###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         08/Nov/2015  15:04:05 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c           #
#    Command line       =  -f E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ #
#                          ZStack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wEndev.cfg (-DCPU32MHZ                   #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg (-DSECURE=0                     #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c -D        #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D          #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC E:\work\zigbee\taobao\work #
#                          \WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂ #
#                          À1-÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\EndDeviceEB-Pro\List\ -lA                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\ --diag_suppress Pe001,Pa010 -o                  #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \ -e --debug --core=plain --dptr=16,1              #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ #
#                          ZStack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\ -I              #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I       #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\ -I E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ #
#                          ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MT\ -I E:\work\zigbee\taobao\work\ #
#                          WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À #
#                          1-÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I      #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\ -I                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\ -I                          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\ -I E:\work\zigbee\taobao\work #
#                          \WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂ #
#                          À1-÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I        #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\ -I E:\work\zigbee\taobao\work\WI #
#                          FI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À1- #
#                          ÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\ -I E:\work\zigbee\taobao\work\W #
#                          IFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À1 #
#                          -÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I         #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\ -I E:\work\zigbee\taobao\work\WI #
#                          FI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À1- #
#                          ÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I           #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\ -I E:\work\zigbee\taobao\work\WIFI-Zi #
#                          gBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥ #
#                          Û≈Ô\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\ -I                          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\ -I E:\work\zigbee\taobao\work\ #
#                          WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À #
#                          1-÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\ -I                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz       #
#    List file          =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\SampleApp.lst                                    #
#    Object file        =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \SampleApp.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          #include "Hal_adc.h"
     79          #include "stdio.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0500         DW 5
   \   00000A   0600         DW 6
     99          {
    100            SERIALAPP_CONNECTREQ_CLUSTER,//”√”⁄…œ¥´÷’∂À∂Ãµÿ÷∑
    101            SAMPLEAPP_END1,
    102            SAMPLEAPP_END2,
    103            SAMPLEAPP_END3,
    104            SAMPLEAPP_END4,
    105            SAMPLEAPP_END5
    106          };
    107          

   \                                 In  segment XDATA_ROM_C, align 1
    108          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    109          {
    110            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    111            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    112            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    113            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    114            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    115            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    116            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    117            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    118            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    119          };
    120          
    121          // This is the Endpoint/Interface description.  It is defined here, but
    122          // filled-in in SampleApp_Init().  Another way to go would be to fill
    123          // in the structure here and make it a "const" (in code space).  The
    124          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139                                    // This variable will be received when
    140                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_Periodic_DstAddr; //π„≤•
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          afAddrType_t SampleApp_Flash_DstAddr;    //◊È≤•
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          afAddrType_t SampleApp_P2P_DstAddr;      //µ„≤•
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          
    154          
    155          #define HUMAN_PIN	P0_4       //»ÀÃÂ∏–”¶1:”–»À0£∫Œﬁ»À
    156          #define LAMP_PIN     P0_5        //∂®“ÂP0.5ø⁄Œ™ºÃµÁ∆˜ ‰»Î∂À
    157          #define GAS_PIN      P0_6        //∂®“ÂP0.6ø⁄Œ™—ÃŒÌ¥´∏–∆˜µƒ ‰»Î∂À  
    158          #define DHT11_DATA P0_7   //dht11
    159          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
    160          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    161          uint8 wenduLimit=40;//Œ¬∂»∑ß÷µ
   \                     wenduLimit:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for wenduLimit>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    162          uint8 shiduLimit=30;// ™∂»∑ß÷µ
   \                     shiduLimit:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for shiduLimit>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163          uint8 lightLimit=30;//π‚’’∑ß÷µ
   \                     lightLimit:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for lightLimit>`
   \   000001                REQUIRE __INIT_XDATA_I
    164          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          uint8 check_shidu=0;//ºÏ≤‚µΩµƒ ™∂»
   \                     check_shidu:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          uint8 check_light=0;//ºÏ≤‚µΩµƒπ‚’’
   \                     check_light:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          uint8 check_wendu=0;//ºÏ≤‚µΩµƒŒ¬∂»
   \                     check_wendu:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    168          
    169          #define wendu_ctrl_pin P0_4
    170          #define shidu_ctrl_pin P0_5
    171          #define guangzhao_ctrl_pin P1_0
    172          
    173          //---------------------------------------------------------------------
    174          //±Í◊º∞Ê≤ªÕ¨µƒ÷’∂À–Ë“™–ﬁ∏ƒ¥ÀID,”√”⁄ ∂±–≠µ˜∆˜∑¢π˝¿¥µƒ ˝æ›£¨IDœ‡Õ¨‘Ú¥¶¿Ì
    175          //◊®“µ∞Ê◊‘∂Ø¥”FlashªÒµ√µÿ÷∑£¨À˘”–÷’∂ÀπÃº˛œ‡Õ¨£¨  ∫œ¡ø≤˙

   \                                 In  segment XDATA_I, align 1, keep-with-next
    176          static uint16 EndDeviceID = 0x0001; //÷’∂ÀID£¨∑«≥£÷ÿ“™
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for EndDeviceID>`
   \   000002                REQUIRE __INIT_XDATA_I
    177          
    178          
    179          /*********************************************************************
    180           * LOCAL FUNCTIONS
    181           */
    182          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    183          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    184          void SampleApp_SendPeriodicMessage( void );
    185          void displayAndCtrl();
    186          void SerialApp_DeviceConnect();
    187          void SerialApp_SendSensorsData();
    188          
    189          /*********************************************************************
    190           * NETWORK LAYER CALLBACKS
    191           */
    192          
    193          /*********************************************************************
    194           * PUBLIC FUNCTIONS
    195           */
    196          
    197          /*********************************************************************
    198           * @fn      SampleApp_Init
    199           *
    200           * @brief   Initialization function for the Generic App Task.
    201           *          This is called during initialization and should contain
    202           *          any application specific initialization (ie. hardware
    203           *          initialization/setup, table initialization, power up
    204           *          notificaiton ... ).
    205           *
    206           * @param   task_id - the ID assigned by OSAL.  This ID should be
    207           *                    used to send messages and set timers.
    208           *
    209           * @return  none
    210           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    211          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    212          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    213            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    214            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    215            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    216            
    217            MT_UartInit();                  //¥Æø⁄≥ı ºªØ
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    218            MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    219          
    220              P0SEL &= ~0x30;                  //…Ë÷√P0.4ø⁄Œ™∆’Õ®IO
   \   00001E   53F3CF       ANL     0xf3,#0xcf
    221              P0DIR |= 0x30;                  //…Ë÷√P0.5Œ™ ‰≥ˆ
   \   000021   43FD30       ORL     0xfd,#0x30
    222          
    223              P1SEL &= ~0x01;                  //…Ë÷√P1.0ø⁄Œ™∆’Õ®IO
   \   000024   53F4FE       ANL     0xf4,#0xfe
    224              P1DIR |= 0x01;                  //…Ë÷√P1.0Œ™ ‰≥ˆ
   \   000027   43FE01       ORL     0xfe,#0x1
    225          
    226          
    227          //    P0SEL &= ~0x40;                 //…Ë÷√P0.6Œ™∆’Õ®IOø⁄
    228          //    P0DIR &= ~0x40;                 //P0.6∂®“ÂŒ™ ‰»Îø⁄
    229          //    P0SEL &= 0x7f;                  //P0_7≈‰÷√≥…Õ®”√io
    230          
    231          //    LAMP_PIN = 0;                   //µÕµÁ∆ΩºÃµÁ∆˜∂œø™;∏ﬂµÁ∆ΩºÃµÁ∆˜Œ¸∫œ
    232          
    233          
    234            
    235            // Device hardware initialization can be added here or in main() (Zmain.c).
    236            // If the hardware is application specific - add it here.
    237            // If the hardware is other parts of the device add it in main().
    238          
    239           #if defined ( BUILD_ALL_DEVICES )
    240            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    241            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    242            // together - if they are - we will start up a coordinator. Otherwise,
    243            // the device will start as a router.
    244            if ( readCoordinatorJumper() )
    245              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;dd
    246            else
    247              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    248          #endif // BUILD_ALL_DEVICES
    249          
    250          #if defined ( HOLD_AUTO_START )
    251            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    252            //  from starting the device and wait for the application to
    253            //  start the device.
    254            ZDOInitDevice(0);ee
    255          #endif
    256          
    257            // Setup for the periodic message's destination address
    258            // Broadcast to everyone
    259            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002A   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00002D   740F         MOV     A,#0xf
   \   00002F   F0           MOVX    @DPTR,A
    260            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000030   A3           INC     DPTR
   \   000031   7414         MOV     A,#0x14
   \   000033   F0           MOVX    @DPTR,A
    261            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000034   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000037   74FF         MOV     A,#-0x1
   \   000039   F0           MOVX    @DPTR,A
   \   00003A   A3           INC     DPTR
   \   00003B   F0           MOVX    @DPTR,A
    262          
    263            // Setup for the flash command's destination address - Group 1
    264            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00003C   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00003F   7401         MOV     A,#0x1
   \   000041   F0           MOVX    @DPTR,A
    265            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000042   A3           INC     DPTR
   \   000043   7414         MOV     A,#0x14
   \   000045   F0           MOVX    @DPTR,A
    266            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000046   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000049   7401         MOV     A,#0x1
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
    267            
    268            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µ„≤• 
   \   00004F   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000052   7402         MOV     A,#0x2
   \   000054   F0           MOVX    @DPTR,A
    269            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000055   A3           INC     DPTR
   \   000056   7414         MOV     A,#0x14
   \   000058   F0           MOVX    @DPTR,A
    270            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //∑¢∏¯–≠µ˜∆˜
   \   000059   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00005C   E4           CLR     A
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   F0           MOVX    @DPTR,A
    271          
    272            // Fill out the endpoint description.
    273            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000060   90....       MOV     DPTR,#SampleApp_epDesc
   \   000063   7414         MOV     A,#0x14
   \   000065   F0           MOVX    @DPTR,A
    274            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000066   A3           INC     DPTR
   \   000067   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006D   F0           MOVX    @DPTR,A
    275            SampleApp_epDesc.simpleDesc
    276                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00006E   A3           INC     DPTR
   \   00006F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000075   F0           MOVX    @DPTR,A
    277            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000076   A3           INC     DPTR
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
    278          
    279            // Register the endpoint description with the AF
    280            afRegister( &SampleApp_epDesc );
   \   000079                ; Setup parameters for call to function afRegister
   \   000079   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007B   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007D   12....       LCALL   ??afRegister?relay
    281          
    282            // Register for all key events - This app will handle all key events
    283            RegisterForKeys( SampleApp_TaskID );
   \   000080                ; Setup parameters for call to function RegisterForKeys
   \   000080   90....       MOV     DPTR,#SampleApp_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??RegisterForKeys?relay
    284          
    285            // By default, all devices start out in Group 1
    286            SampleApp_Group.ID = 0x0001;
   \   000088   90....       MOV     DPTR,#SampleApp_Group
   \   00008B   7401         MOV     A,#0x1
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   E4           CLR     A
   \   000090   F0           MOVX    @DPTR,A
    287            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000091                ; Setup parameters for call to function osal_memcpy
   \   000091   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000094   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000097   F5..         MOV     ?V0 + 2,A
   \   000099   78..         MOV     R0,#?V0 + 0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009E   7C07         MOV     R4,#0x7
   \   0000A0   7D00         MOV     R5,#0x0
   \   0000A2   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A4   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A6   12....       LCALL   ??osal_memcpy?relay
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
    288            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000AE                ; Setup parameters for call to function aps_AddGroup
   \   0000AE   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B0   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B2   7914         MOV     R1,#0x14
   \   0000B4   12....       LCALL   ??aps_AddGroup?relay
    289          
    290          #if defined ( LCD_SUPPORTED )
    291            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B7                ; Setup parameters for call to function HalLcdWriteString
   \   0000B7   7901         MOV     R1,#0x1
   \   0000B9   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BB   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000BD   12....       LCALL   ??HalLcdWriteString?relay
    292          #endif
    293              displayAndCtrl();
   \   0000C0                ; Setup parameters for call to function displayAndCtrl
   \   0000C0   12....       LCALL   ??displayAndCtrl?relay
    294          }
   \   0000C3   7F03         MOV     R7,#0x3
   \   0000C5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C8                REQUIRE P0SEL
   \   0000C8                REQUIRE P0DIR
   \   0000C8                REQUIRE P1SEL
   \   0000C8                REQUIRE P1DIR
    295          
    296          /*********************************************************************
    297           * @fn      SampleApp_ProcessEvent
    298           *
    299           * @brief   Generic Application Task event processor.  This function
    300           *          is called to process all events for the task.  Events
    301           *          include timers, messages and any other user defined events.
    302           *
    303           * @param   task_id  - The OSAL assigned task ID.
    304           * @param   events - events to process.  This is a bit map and can
    305           *                   contain more than one event.
    306           *
    307           * @return  none
    308           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    309          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    310          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    311            afIncomingMSGPacket_t *MSGpkt;
    312            (void)task_id;  // Intentionally unreferenced parameter
    313          
    314            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6077         JZ      ??SampleApp_ProcessEvent_0
    315            {
    316              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8029         SJMP    ??SampleApp_ProcessEvent_1
    317              while ( MSGpkt )
    318              {
    319                switch ( MSGpkt->hdr.event )
    320                {
    321                  // Received when a key is pressed
    322                  case KEY_CHANGE:
    323                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    324                    break;
    325          
    326                  // Received when a messages is received (OTA) for this endpoint
    327                  case AF_INCOMING_MSG_CMD:
    328                    SampleApp_MessageMSGCB( MSGpkt );
    329                    break;
    330          
    331                  // Received whenever the device changes state in the network
    332                  case ZDO_STATE_CHANGE:
    333                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    334                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    335                           (SampleApp_NwkState == DEV_ROUTER)
    336                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7013         JNZ     ??SampleApp_ProcessEvent_4
    337                    {
    338                      SerialApp_DeviceConnect();//…œ¥´÷’∂Àµƒ∂Ãµÿ÷∑
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function SerialApp_DeviceConnect
   \   00001E   12....       LCALL   ??SerialApp_DeviceConnect?relay
    339          
    340                      // Start sending the periodic message in a regular interval.
    341                      osal_start_timerEx( SampleApp_TaskID,
    342                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    343                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   7CD0         MOV     R4,#-0x30
   \   000023   7D07         MOV     R5,#0x7
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay
    344                    }
    345                    else
    346                    {
    347                      // Device is no longer in the network
    348                    }
    349                    break;
    350          
    351                  default:
    352                    break;
    353                }
    354          
    355                // Release the memory
    356                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000031                ; Setup parameters for call to function osal_msg_deallocate
   \   000031   AA..         MOV     R2,?V0 + 0
   \   000033   AB..         MOV     R3,?V0 + 1
   \   000035   12....       LCALL   ??osal_msg_deallocate?relay
    357          
    358                // Next - if one is available
    359                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000038   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_receive?relay
   \   000040   8A..         MOV     ?V0 + 0,R2
   \   000042   8B..         MOV     ?V0 + 1,R3
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004A   85..82       MOV     DPL,?V0 + 0
   \   00004D   85..83       MOV     DPH,?V0 + 1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   24E6         ADD     A,#-0x1a
   \   000053   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000055   245A         ADD     A,#0x5a
   \   000057   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000059   24EF         ADD     A,#-0x11
   \   00005B   60B2         JZ      ??SampleApp_ProcessEvent_2
   \   00005D   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005F                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000071   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000073                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000073   AA..         MOV     R2,?V0 + 0
   \   000075   AB..         MOV     R3,?V0 + 1
   \   000077   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007A   80B5         SJMP    ??SampleApp_ProcessEvent_4
    360              }
    361          
    362              // return unprocessed events
    363              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000081   FB           MOV     R3,A
   \   000082   8023         SJMP    ??SampleApp_ProcessEvent_9
    364            }
    365          
    366            // Send a message out - This event is generated by a timer
    367            //  (setup in SampleApp_Init()).
    368            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000084   EE           MOV     A,R6
   \   000085   A2E0         MOV     C,0xE0 /* A   */.0
   \   000087   501A         JNC     ??SampleApp_ProcessEvent_10
    369            {
    370              // Send the periodic message
    371          
    372              SerialApp_SendSensorsData();
   \   000089                ; Setup parameters for call to function SerialApp_SendSensorsData
   \   000089   12....       LCALL   ??SerialApp_SendSensorsData?relay
    373          
    374              // Setup to send message again in normal period (+ a little jitter)
    375              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    376                  1000 );
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   7CE8         MOV     R4,#-0x18
   \   00008E   7D03         MOV     R5,#0x3
   \   000090   7A01         MOV     R2,#0x1
   \   000092   7B00         MOV     R3,#0x0
   \   000094   90....       MOV     DPTR,#SampleApp_TaskID
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   12....       LCALL   ??osal_start_timerEx?relay
    377           
    378          
    379              // return unprocessed events
    380              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   00009C   EE           MOV     A,R6
   \   00009D   6401         XRL     A,#0x1
   \   00009F   FA           MOV     R2,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   80DE         SJMP    ??SampleApp_ProcessEvent_8
    381            }
    382          
    383            // Discard unknown events
    384            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A3   7A00         MOV     R2,#0x0
   \   0000A5   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000A7   7F04         MOV     R7,#0x4
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA
    385          }
    386          
    387          /*********************************************************************
    388           * Event Generation Functions
    389           */
    390          /*********************************************************************
    391           * @fn      SampleApp_HandleKeys
    392           *
    393           * @brief   Handles all key events for this device.
    394           *
    395           * @param   shift - true if in shift/alt.
    396           * @param   keys - bit field for key events. Valid entries:
    397           *                 HAL_KEY_SW_2
    398           *                 HAL_KEY_SW_1
    399           *
    400           * @return  none
    401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    403          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    404            (void)shift;  // Intentionally unreferenced parameter
    405            
    406            if ( keys & HAL_KEY_SW_1 )
    407            {
    408              /* This key sends the Flash Command is sent to Group 1.
    409               * This device will not receive the Flash Command from this
    410               * device (even if it belongs to group 1).
    411               */
    412            }
    413          
    414            if ( keys & HAL_KEY_SW_2 )
   \   000006   A2E1         MOV     C,0xE0 /* A   */.1
   \   000008   5024         JNC     ??SampleApp_HandleKeys_0
    415            {
    416              /* The Flashr Command is sent to Group 1.
    417               * This key toggles this device in and out of group 1.
    418               * If this device doesn't belong to group 1, this application
    419               * will not receive the Flash command sent to group 1.
    420               */
    421              aps_Group_t *grp;
    422              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    423              if ( grp )
   \   00000A                ; Setup parameters for call to function aps_FindGroup
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   7914         MOV     R1,#0x14
   \   000010   12....       LCALL   ??aps_FindGroup?relay
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V0 + 1
   \   000018   600B         JZ      ??SampleApp_HandleKeys_1
    424              {
    425                // Remove from the group
    426                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   00001A                ; Setup parameters for call to function aps_RemoveGroup
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   7914         MOV     R1,#0x14
   \   000020   12....       LCALL   ??aps_RemoveGroup?relay
   \   000023   8009         SJMP    ??SampleApp_HandleKeys_0
    427              }
    428              else
    429              {
    430                // Add to the flash group
    431                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_1:
   \   000025                ; Setup parameters for call to function aps_AddGroup
   \   000025   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000027   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000029   7914         MOV     R1,#0x14
   \   00002B   12....       LCALL   ??aps_AddGroup?relay
    432              }
    433            }
    434          }
   \                     ??SampleApp_HandleKeys_0:
   \   00002E   02....       LJMP    ??Subroutine6_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    435          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          void displayAndCtrl()
   \                     displayAndCtrl:
    437          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    438              uint8 buff[30]={0};    
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   741E         MOV     A,#0x1e
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    439          
    440              //∑ß÷µ
    441              sprintf(buff, "%02d %02d %02d", wenduLimit,shiduLimit,lightLimit);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000023                ; Setup parameters for call to function sprintf
   \   000023   90....       MOV     DPTR,#lightLimit
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 0,A
   \   000029   75..00       MOV     ?V0 + 1,#0x0
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   90....       MOV     DPTR,#shiduLimit
   \   000034   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   90....       MOV     DPTR,#wenduLimit
   \   00003D   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   7C..         MOV     R4,#`?<Constant "%02d %02d %02d">` & 0xff
   \   000045   7D..         MOV     R5,#(`?<Constant "%02d %02d %02d">` >> 8) & 0xff
   \   000047   7406         MOV     A,#0x6
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??sprintf?relay
   \   000053   7406         MOV     A,#0x6
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
    442              HalLcdWriteString( buff, HAL_LCD_LINE_2 );
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000058                ; Setup parameters for call to function HalLcdWriteString
   \   000058   7902         MOV     R1,#0x2
   \   00005A   85..82       MOV     DPL,?XSP + 0
   \   00005D   85..83       MOV     DPH,?XSP + 1
   \   000060   AA82         MOV     R2,DPL
   \   000062   AB83         MOV     R3,DPH
   \   000064   12....       LCALL   ??HalLcdWriteString?relay
    443          
    444              //Œ¬ ™∂»œ‘ æ
    445              sprintf(buff, "Œ¬∂»:%02d  ™∂»:%02d", check_wendu,check_shidu);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000067                ; Setup parameters for call to function sprintf
   \   000067   90....       MOV     DPTR,#check_shidu
   \   00006A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000070   90....       MOV     DPTR,#check_wendu
   \   000073   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   7C..         MOV     R4,#`?<Constant "\\316\\302\\266\\310:%02d \\312\\252\\266` & 0xff
   \   00007B   7D..         MOV     R5,#(`?<Constant "\\316\\302\\266\\310:%02d \\312\\252\\266` >> 8) & 0xff
   \   00007D   7404         MOV     A,#0x4
   \   00007F   12....       LCALL   ?XSTACK_DISP0_8
   \   000082   AA82         MOV     R2,DPL
   \   000084   AB83         MOV     R3,DPH
   \   000086   12....       LCALL   ??sprintf?relay
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
    446              HalLcdWriteString( buff, HAL_LCD_LINE_3 );
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00008E                ; Setup parameters for call to function HalLcdWriteString
   \   00008E   7903         MOV     R1,#0x3
   \   000090   12....       LCALL   ?Subroutine2 & 0xFFFF
    447          
    448              //Œ¬ ™∂»¥Æø⁄ ‰≥ˆ
    449              HalUARTWrite(0, buff, osal_strlen(buff));
                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    450              HalUARTWrite(0, "\n",1);
    451          
    452              //π‚’’œ‘ æ
    453              sprintf(buff, "π‚’’:%02d", check_light);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??CrossCallReturnLabel_0:
   \   000093                ; Setup parameters for call to function sprintf
   \   000093   90....       MOV     DPTR,#check_light
   \   000096   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   7C..         MOV     R4,#`?<Constant "\\271\\342\\325\\325:%02d">` & 0xff
   \   00009E   7D..         MOV     R5,#(`?<Constant "\\271\\342\\325\\325:%02d">` >> 8) & 0xff
   \   0000A0   7402         MOV     A,#0x2
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   AA82         MOV     R2,DPL
   \   0000A7   AB83         MOV     R3,DPH
   \   0000A9   12....       LCALL   ??sprintf?relay
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
    454              HalLcdWriteString( buff, HAL_LCD_LINE_4 );
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   0000B1                ; Setup parameters for call to function HalLcdWriteString
   \   0000B1   7904         MOV     R1,#0x4
   \   0000B3   12....       LCALL   ?Subroutine2 & 0xFFFF
    455          
    456              //π‚’’¥Æø⁄ ‰≥ˆ
    457              HalUARTWrite(0, buff, osal_strlen(buff));
                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    458              HalUARTWrite(0, "\n",1);
    459          
    460              //øÿ÷∆°°
    461          
    462              // ™∂»π˝µÕ
    463              //◊‘∂ØΩΩÀÆ
    464              if(check_shidu<shiduLimit)
   \                     ??CrossCallReturnLabel_1:
   \   0000B6   90....       MOV     DPTR,#shiduLimit
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F8           MOV     R0,A
   \   0000BB   90....       MOV     DPTR,#check_shidu
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   C3           CLR     C
   \   0000C0   98           SUBB    A,R0
   \   0000C1   5004         JNC     ??displayAndCtrl_0
    465              {
    466                  //
    467                  shidu_ctrl_pin=1;
   \   0000C3   D285         SETB    0x80.5
   \   0000C5   8002         SJMP    ??displayAndCtrl_1
    468              }
    469              else
    470              {
    471                  //
    472                  shidu_ctrl_pin=0;
   \                     ??displayAndCtrl_0:
   \   0000C7   C285         CLR     0x80.5
    473              }
    474          
    475              //π‚’’≤ª◊„£¨ø™¥∞    
    476              //∞Ÿ“∂¥∞£¨
    477              if(check_light<lightLimit)
   \                     ??displayAndCtrl_1:
   \   0000C9   90....       MOV     DPTR,#lightLimit
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F8           MOV     R0,A
   \   0000CE   90....       MOV     DPTR,#check_light
   \   0000D1   E0           MOVX    A,@DPTR
   \   0000D2   C3           CLR     C
   \   0000D3   98           SUBB    A,R0
   \   0000D4   5004         JNC     ??displayAndCtrl_2
    478              {
    479                  //
    480                  guangzhao_ctrl_pin=1;
   \   0000D6   D290         SETB    0x90.0
   \   0000D8   8002         SJMP    ??displayAndCtrl_3
    481              }
    482              else
    483              {
    484                  //
    485                  guangzhao_ctrl_pin=0;                
   \                     ??displayAndCtrl_2:
   \   0000DA   C290         CLR     0x90.0
    486              }
    487          
    488              //Œ¬∂»π˝∏ﬂ£¨Õ®∑Á
    489              //Õ®∑Á
    490              if(check_wendu>wenduLimit)
   \                     ??displayAndCtrl_3:
   \   0000DC   90....       MOV     DPTR,#check_wendu
   \   0000DF   E0           MOVX    A,@DPTR
   \   0000E0   F8           MOV     R0,A
   \   0000E1   90....       MOV     DPTR,#wenduLimit
   \   0000E4   E0           MOVX    A,@DPTR
   \   0000E5   C3           CLR     C
   \   0000E6   98           SUBB    A,R0
   \   0000E7   5004         JNC     ??displayAndCtrl_4
    491              {
    492                  //
    493                  wendu_ctrl_pin=1;
   \   0000E9   D284         SETB    0x80.4
   \   0000EB   8002         SJMP    ??displayAndCtrl_5
    494              }
    495              else
    496              {
    497                  //
    498                  wendu_ctrl_pin=0;                
   \                     ??displayAndCtrl_4:
   \   0000ED   C284         CLR     0x80.4
    499              }
    500          }
   \                     ??displayAndCtrl_5:
   \   0000EF   741E         MOV     A,#0x1e
   \   0000F1                REQUIRE ?Subroutine0
   \   0000F1                REQUIRE _A_P0
   \   0000F1                REQUIRE _A_P1
   \   0000F1                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine6_0
   \   000003                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   12....       LCALL   ??HalLcdWriteString?relay
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D                ; Setup parameters for call to function osal_strlen
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D                ; Setup parameters for call to function osal_strlen
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   12....       LCALL   ??osal_strlen?relay
   \   00001A   EA           MOV     A,R2
   \   00001B   FC           MOV     R4,A
   \   00001C   EB           MOV     A,R3
   \   00001D   FD           MOV     R5,A
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   AA82         MOV     R2,DPL
   \   000026   AB83         MOV     R3,DPH
   \   000028   7900         MOV     R1,#0x0
   \   00002A   12....       LCALL   ??HalUARTWrite?relay
   \   00002D                ; Setup parameters for call to function HalUARTWrite
   \   00002D                ; Setup parameters for call to function HalUARTWrite
   \   00002D   7C01         MOV     R4,#0x1
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000033   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000035   7900         MOV     R1,#0x0
   \   000037   12....       LCALL   ??HalUARTWrite?relay
   \   00003A   22           RET
    501          
    502          
    503          /*********************************************************************
    504           * @fn      SampleApp_MessageMSGCB
    505           *
    506           * @brief   Data message processor callback.  This function processes
    507           *          any incoming data - probably from other devices.  So, based
    508           *          on cluster ID, perform the intended action.
    509           *
    510           * @param   none
    511           *
    512           * @return  none
    513           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    514          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    515          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    516              uint16 flashTime;
                            ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    517          
    518              switch ( pkt->clusterId )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000013   702C         JNZ     ??SampleApp_MessageMSGCB_1
    519              {
    520              case SAMPLEAPP_END1:
    521                  {
    522                      wenduLimit=pkt->cmd.Data[0];//Œ¬∂»∑ß÷µ
   \   000015   EA           MOV     A,R2
   \   000016   2421         ADD     A,#0x21
   \   000018   F8           MOV     R0,A
   \   000019   EB           MOV     A,R3
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   F9           MOV     R1,A
   \   00001D   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000020   E0           MOVX    A,@DPTR
   \   000021   90....       MOV     DPTR,#wenduLimit
   \   000024   F0           MOVX    @DPTR,A
    523                      shiduLimit=pkt->cmd.Data[1];// ™∂»∑ß÷µ
   \   000025   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   90....       MOV     DPTR,#shiduLimit
   \   00002D   F0           MOVX    @DPTR,A
    524                      lightLimit=pkt->cmd.Data[2];//π‚’’∑ß÷µ
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F583         MOV     DPH,A
   \   000038   8882         MOV     DPL,R0
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   90....       MOV     DPTR,#lightLimit
   \   000040   F0           MOVX    @DPTR,A
    525                  }
    526                  break;
    527            }
    528          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000041   D083         POP     DPH
   \   000043   D082         POP     DPL
   \   000045   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   22           RET
    529          
    530          /*********************************************************************
    531           * @fn      SampleApp_SendPeriodicMessage
    532           *
    533           * @brief   Send the periodic message.
    534           *
    535           * @param   none
    536           *
    537           * @return  none
    538           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    539          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    540          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    541              
    542          }
   \   000000   02....       LJMP    ?BRET
    543          
    544          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    545          static void SerialApp_SendSensorsData()
   \                     SerialApp_SendSensorsData:
    546          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    547              uint8 SendBuf[20]={0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    548              uint8 SendLen=0;
    549              uint16 adc= 0;
    550              float vol=0.0; //adc≤…—˘µÁ—π  
    551              uint16 temp=0;//∞Ÿ∑÷±»µƒ’˚ ˝÷µ
    552              uint8 buff[30]={0};
    553          
    554              DHT11();                //ªÒ»°Œ¬ ™∂»
   \   00001F                ; Setup parameters for call to function DHT11
   \   00001F   12....       LCALL   ??DHT11?relay
    555              adc= HalAdcRead(HAL_ADC_CHANNEL_6, HAL_ADC_RESOLUTION_14); //ADC ≤…—˘÷µ P06ø⁄
   \   000022                ; Setup parameters for call to function HalAdcRead
   \   000022   7A04         MOV     R2,#0x4
   \   000024   7906         MOV     R1,#0x6
   \   000026   12....       LCALL   ??HalAdcRead?relay
   \   000029   8A..         MOV     ?V0 + 0,R2
   \   00002B   8B..         MOV     ?V0 + 1,R3
   \   00002D   A8..         MOV     R0,?V0 + 0
   \   00002F   A9..         MOV     R1,?V0 + 1
    556          
    557              if(wendu<=0) return;
   \   000031   90....       MOV     DPTR,#wendu
   \   000034   E0           MOVX    A,@DPTR
   \   000035   7003         JNZ     $+5
   \   000037   02....       LJMP    ??SerialApp_SendSensorsData_0 & 0xFFFF
    558              if(shidu<=0) return;
   \   00003A   90....       MOV     DPTR,#shidu
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??SerialApp_SendSensorsData_0 & 0xFFFF
    559          
    560              //◊Ó¥Û≤…—˘÷µ8192(“ÚŒ™◊Ó∏ﬂŒª «∑˚∫≈Œª)
    561              if(adc>=8192)
   \   000043   C3           CLR     C
   \   000044   E9           MOV     A,R1
   \   000045   9420         SUBB    A,#0x20
   \   000047   4003         JC      $+5
   \   000049   02....       LJMP    ??SerialApp_SendSensorsData_0 & 0xFFFF
    562              {
    563                  return;
    564              }
    565              
    566              adc=8192-adc;//∑¥œ‡“ªœ¬£¨“ÚŒ™µÕ ™∂» ±AOø⁄ ‰≥ˆΩœ∏ﬂµÁ∆Ω
    567                             //          ∏ﬂ ™∂» ±AOø⁄ ‰≥ˆΩœµÕµÁ∆Ω   
    568          
    569              //◊™ªØŒ™∞Ÿ∑÷±»
    570              vol=(float)((float)adc)/8192.0;
    571                 
    572              //»°∞Ÿ∑÷±»¡ΩŒª ˝◊÷
    573              temp=vol*100;
                         ^
Warning[Pa093]: implicit conversion from floating point to integer

      uint8 buff[30]={0};
            ^
"E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À1-÷÷÷≤¥Û≈Ô\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",552  Warning[Pe177]: 
          variable "buff" was declared but never referenced
   \   00004C   E4           CLR     A
   \   00004D   C3           CLR     C
   \   00004E   98           SUBB    A,R0
   \   00004F   F5..         MOV     ?V0 + 0,A
   \   000051   7420         MOV     A,#0x20
   \   000053   99           SUBB    A,R1
   \   000054   F5..         MOV     ?V0 + 1,A
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V0 + 2,A
   \   000059   F5..         MOV     ?V0 + 3,A
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?UL_TO_FLT
   \   000060   90....       MOV     DPTR,#__Constant_39000000
   \   000063   78..         MOV     R0,#?V0 + 4
   \   000065   12....       LCALL   ?L_MOV_X
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   79..         MOV     R1,#?V0 + 4
   \   00006C   12....       LCALL   ?FLT_MUL
   \   00006F   90....       MOV     DPTR,#__Constant_42c80000
   \   000072   78..         MOV     R0,#?V0 + 4
   \   000074   12....       LCALL   ?L_MOV_X
   \   000077   78..         MOV     R0,#?V0 + 0
   \   000079   79..         MOV     R1,#?V0 + 4
   \   00007B   12....       LCALL   ?FLT_MUL
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?FLT_TO_L
   \   000083   A8..         MOV     R0,?V0 + 0
    574          
    575              //Œ¬ ™∂»œ‘ æ
    576          //    sprintf(buff, "Œ¬:02d%  ™:02d%", wendu, shidu);
    577          //    HalLcdWriteString( buff, HAL_LCD_LINE_3 );
    578          
    579              //π‚’’œ‘ æ
    580          //    sprintf(buff, "π‚’’:%02d", temp);
    581          //    HalLcdWriteString( buff, HAL_LCD_LINE_4 );
    582          
    583          
    584              SendBuf[0] =EndDeviceID;
   \   000085   12....       LCALL   ?Subroutine5 & 0xFFFF
    585              SendBuf[1] = wendu;  //Œ¬∂»
   \                     ??CrossCallReturnLabel_9:
   \   000088   90....       MOV     DPTR,#wendu
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   C0E0         PUSH    A
   \   00008E   7401         MOV     A,#0x1
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   D0E0         POP     A
   \   000095   F0           MOVX    @DPTR,A
    586              SendBuf[2] = shidu;    // ™∂»
   \   000096   90....       MOV     DPTR,#shidu
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   C0E0         PUSH    A
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A1   D0E0         POP     A
   \   0000A3   F0           MOVX    @DPTR,A
    587              SendBuf[3] = temp;  //π‚’’«ø∂»
   \   0000A4   7403         MOV     A,#0x3
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   E8           MOV     A,R0
   \   0000AA   F0           MOVX    @DPTR,A
    588          
    589              //Õ®π˝∑ß÷µøÿ÷∆µÁª˙
    590              {
    591                  check_wendu=wendu;//ºÏ≤‚µΩµƒŒ¬∂»
   \   0000AB   90....       MOV     DPTR,#wendu
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   90....       MOV     DPTR,#check_wendu
   \   0000B2   F0           MOVX    @DPTR,A
    592                  check_shidu=shidu;//ºÏ≤‚µΩµƒ ™∂»
   \   0000B3   90....       MOV     DPTR,#shidu
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   90....       MOV     DPTR,#check_shidu
   \   0000BA   F0           MOVX    @DPTR,A
    593                  check_light=temp;//ºÏ≤‚µΩµƒπ‚’’
   \   0000BB   E8           MOV     A,R0
   \   0000BC   90....       MOV     DPTR,#check_light
   \   0000BF   F0           MOVX    @DPTR,A
    594                  displayAndCtrl();
   \   0000C0                ; Setup parameters for call to function displayAndCtrl
   \   0000C0   12....       LCALL   ??displayAndCtrl?relay
    595              }
    596          
    597              SendLen=4;//π≤4∏ˆ◊÷Ω⁄∑¢ÀÕ
    598          
    599              if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    600                                 SAMPLEAPP_END1,
    601                                 SendLen,
    602                                 SendBuf,
    603                                 &SampleApp_TransID,
    604                                 AF_DISCV_ROUTE,
    605                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0000C3                ; Setup parameters for call to function AF_DataRequest
   \   0000C3   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000C6   78..         MOV     R0,#?V0 + 0
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000CE   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000D1   78..         MOV     R0,#?V0 + 0
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   7403         MOV     A,#0x3
   \   0000D8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DB   8582..       MOV     ?V0 + 0,DPL
   \   0000DE   8583..       MOV     ?V0 + 1,DPH
   \   0000E1   78..         MOV     R0,#?V0 + 0
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   75..04       MOV     ?V0 + 0,#0x4
   \   0000E9   75..00       MOV     ?V0 + 1,#0x0
   \   0000EC   78..         MOV     R0,#?V0 + 0
   \   0000EE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F1   75..02       MOV     ?V0 + 0,#0x2
   \   0000F4   78..         MOV     R0,#?V0 + 0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   7920         MOV     R1,#0x20
   \   0000FB   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000FD   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000FF   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   000101   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   000103   12....       LCALL   ??AF_DataRequest?relay
   \   000106   7409         MOV     A,#0x9
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
    606              {
    607              }
    608              else
    609              {
    610              // Error occurred in request to send.
    611              }
    612              
    613          }
   \                     ??SerialApp_SendSensorsData_0:
   \   00010B   7414         MOV     A,#0x14
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000110   7F08         MOV     R7,#0x8
   \   000112   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   90....       MOV     DPTR,#EndDeviceID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET
    614          
    615          //ªÒµ√P0_5 ºÃµÁ∆˜“˝Ω≈µƒµÁ∆Ω
    616          //on  1:¡¡  0:√

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    617          uint8 GetLamp( void )
   \                     GetLamp:
    618          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    619            uint8 ret;
    620            
    621            if(LAMP_PIN == 0)
    622            {	
    623              ret = 0;
    624            }
    625            else
    626            {
    627          	ret = 1;
    628            }
    629            
    630          	return ret;
   \   000000   A285         MOV     C,0x80.5
   \   000002                REQUIRE ?Subroutine1
   \   000002                REQUIRE _A_P0
   \   000002                ; // Fall through to label ?Subroutine1
    631          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E4           CLR     A
   \   000001   33           RLC     A
   \   000002   F9           MOV     R1,A
   \   000003   02....       LJMP    ?BRET
    632          
    633          //on  true:¡¡  false:√

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    634          void SetLamp(bool on)
   \                     SetLamp:
    635          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    636          	LAMP_PIN=(on)?1:0;
   \   000000   E9           MOV     A,R1
   \   000001   6004         JZ      ??SetLamp_0
   \   000003   7401         MOV     A,#0x1
   \   000005   8001         SJMP    ??SetLamp_1
   \                     ??SetLamp_0:
   \   000007   E4           CLR     A
   \                     ??SetLamp_1:
   \   000008   C4           SWAP    A
   \   000009   33           RLC     A
   \   00000A   54E0         ANL     A,#0xe0
   \   00000C   F8           MOV     R0,A
   \   00000D   E580         MOV     A,0x80
   \   00000F   54DF         ANL     A,#0xdf
   \   000011   48           ORL     A,R0
   \   000012   F580         MOV     0x80,A
    637          }
   \   000014   02....       LJMP    ?BRET
   \   000017                REQUIRE _A_P0
    638          
    639          //ªÒµ√P0_6 MQ-2∆¯ÃÂ¥´∏–∆˜µƒ ˝æ›
    640          //∏ﬂµÁ∆Ω ±£¨∆¯ÃÂ’˝≥£

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    641          uint8 GetGas( void )
   \                     GetGas:
    642          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    643            uint8 ret;
    644            
    645            if(GAS_PIN == 0)
    646              ret = 0;
    647            else
    648              ret = 1;
    649            
    650            return ret;
   \   000000   A286         MOV     C,0x80.6
   \   000002   80..         SJMP    ?Subroutine1
   \   000004                REQUIRE _A_P0
    651          }
    652          
    653          //ªÒµ√P0_4 »ÀÃÂ∫ÏÕ‚¥´∏–∆˜µƒ ˝æ›
    654          //∑µªÿ,1:”–»À0£∫Œﬁ»À

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    655          uint8 GetHuman( void )
   \                     GetHuman:
    656          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    657            uint8 ret;
    658            
    659            if(HUMAN_PIN == 0)
    660              ret = 0;
    661            else
    662              ret = 1;
    663            
    664            return ret;
   \   000000   A284         MOV     C,0x80.4
   \   000002   80..         SJMP    ?Subroutine1
   \   000004                REQUIRE _A_P0
    665          }
    666          
    667          //∞—÷’∂Àµÿ÷∑…œ¥´∑˛ŒÒ∆˜

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    668          void  SerialApp_DeviceConnect()
   \                     SerialApp_DeviceConnect:
    669          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    670            uint16 nwkAddr;
    671            uint16 parentNwkAddr;
                          ^
Warning[Pe177]: variable "parentNwkAddr" was declared but never referenced
    672            char buff[5] = {0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>_2` & 0xff
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    673            afAddrType_t SerialApp_TxAddr;
    674            
    675            nwkAddr = NLME_GetShortAddr();
   \   00001F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001F   12....       LCALL   ??NLME_GetShortAddr?relay
    676          //  parentNwkAddr = NLME_GetCoordShortAddr();
    677            
    678            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000022   740D         MOV     A,#0xd
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
    679            SerialApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   740E         MOV     A,#0xe
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7414         MOV     A,#0x14
   \   000031   F0           MOVX    @DPTR,A
    680            SerialApp_TxAddr.addr.shortAddr = 0x0;
   \   000032   7405         MOV     A,#0x5
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
    681          
    682            buff[0] = EndDeviceID;
   \   00003B   12....       LCALL   ?Subroutine5 & 0xFFFF
    683            buff[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_10:
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   EB           MOV     A,R3
   \   000044   F0           MOVX    @DPTR,A
    684            buff[2] = LO_UINT16( nwkAddr );
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   EA           MOV     A,R2
   \   00004B   F0           MOVX    @DPTR,A
    685            
    686            if ( AF_DataRequest( &SerialApp_TxAddr, &SampleApp_epDesc,
    687                                 SERIALAPP_CONNECTREQ_CLUSTER,
    688                                 3,
    689                                 (uint8*)buff,
    690                                 &SampleApp_TransID, 
    691                                 0, 
    692                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00004C                ; Setup parameters for call to function AF_DataRequest
   \   00004C   75..1E       MOV     ?V0 + 0,#0x1e
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000057   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   8582..       MOV     ?V0 + 0,DPL
   \   000067   8583..       MOV     ?V0 + 1,DPH
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   75..03       MOV     ?V0 + 0,#0x3
   \   000072   75..00       MOV     ?V0 + 1,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   75..01       MOV     ?V0 + 0,#0x1
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   7900         MOV     R1,#0x0
   \   000084   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000086   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000088   740E         MOV     A,#0xe
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   AA82         MOV     R2,DPL
   \   00008F   AB83         MOV     R3,DPH
   \   000091   12....       LCALL   ??AF_DataRequest?relay
   \   000094   7409         MOV     A,#0x9
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
    693            {
    694            }
    695            else
    696            {
    697              // Error occurred in request to send.
    698            }
    699          }
   \   000099   7411         MOV     A,#0x11
   \   00009B   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for wenduLimit>`:
   \   000000   28           DB 40

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for shiduLimit>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for lightLimit>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EndDeviceID>`:
   \   000000   0100         DW 1

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??displayAndCtrl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    displayAndCtrl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_SendSensorsData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_SendSensorsData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetLamp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetLamp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetLamp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetLamp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetGas?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetGas

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetHuman?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetHuman

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_DeviceConnect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_DeviceConnect

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02d %02d %02d">`:
   \   000000   25303264     DB "%02d %02d %02d"
   \            20253032
   \            64202530
   \            326400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\316\\302\\266\\310:%02d \\312\\252\\266`:
   \   000000   CEC2B6C8     DB "\316\302\266\310:%02d \312\252\266\310:%02d"
   \            3A253032
   \            6420CAAA
   \            B6C83A25
   \            30326400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\271\\342\\325\\325:%02d">`:
   \   000000   B9E2D5D5     DB "\271\342\325\325:%02d"
   \            3A253032
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   000000       DB 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_39000000:
   \   000000   00000039     DD 39000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80000:
   \   000000   0000C842     DD 42C80000H
    700          /*********************************************************************
    701          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GetGas                             0      0      0
     GetHuman                           0      0      0
     GetLamp                            0      0      0
     SampleApp_HandleKeys               0      0     22
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
       -> displayAndCtrl                0      0     22
     SampleApp_MessageMSGCB             2      0     12
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> SerialApp_DeviceConnect       0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SerialApp_SendSensorsData     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendPeriodicMessage      0      0      0
     SerialApp_DeviceConnect            2      0     48
       -> NLME_GetShortAddr             0      0     54
       -> AF_DataRequest                0      0     72
     SerialApp_SendSensorsData          2      0     57
       -> DHT11                         0      0     72
       -> HalAdcRead                    0      0     72
       -> displayAndCtrl                0      0     72
       -> AF_DataRequest                0      0     90
     SetLamp                            0      0      0
     displayAndCtrl                     2      0     82
       -> sprintf                       0      0     92
       -> HalLcdWriteString             0      0     80
       -> sprintf                       0      0     88
       -> HalLcdWriteString             0      0     80
       -> osal_strlen                   0      0     80
       -> HalUARTWrite                  0      0     80
       -> HalUARTWrite                  0      0     80
       -> sprintf                       0      0     84
       -> HalLcdWriteString             0      0     80
       -> osal_strlen                   0      0     80
       -> HalUARTWrite                  0      0     80
       -> HalUARTWrite                  0      0     80


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P0                                             1
     _A_P1                                             1
     P0SEL                                             1
     P1SEL                                             1
     P0DIR                                             1
     P1DIR                                             1
     SampleApp_ClusterList                            12
     SampleApp_SimpleDesc                             12
     SampleApp_epDesc                                  6
     SampleApp_TaskID                                  1
     SampleApp_NwkState                                1
     SampleApp_TransID                                 1
     SampleApp_Periodic_DstAddr                       12
     SampleApp_Flash_DstAddr                          12
     SampleApp_P2P_DstAddr                            12
     SampleApp_Group                                  18
     SampleAppPeriodicCounter                          1
     SampleAppFlashCounter                             1
     wenduLimit                                        1
     shiduLimit                                        1
     lightLimit                                        1
     check_shidu                                       1
     check_light                                       1
     check_wendu                                       1
     EndDeviceID                                       2
     SampleApp_Init                                  200
     SampleApp_ProcessEvent                          172
     SampleApp_HandleKeys                             49
     ??Subroutine6_0                                   5
     displayAndCtrl                                  241
     ?Subroutine0                                      3
     ?Subroutine3                                      6
     ?Subroutine2                                     59
     SampleApp_MessageMSGCB                           72
     ?Subroutine4                                     13
     SampleApp_SendPeriodicMessage                     3
     SerialApp_SendSensorsData                       277
     ?Subroutine5                                     12
     GetLamp                                           2
     ?Subroutine1                                      6
     SetLamp                                          23
     GetGas                                            4
     GetHuman                                          4
     SerialApp_DeviceConnect                         158
     ?<Initializer for wenduLimit>                     1
     ?<Initializer for shiduLimit>                     1
     ?<Initializer for lightLimit>                     1
     ?<Initializer for EndDeviceID>                    2
     ??SampleApp_Init?relay                            6
     ??SampleApp_ProcessEvent?relay                    6
     ??SampleApp_HandleKeys?relay                      6
     ??displayAndCtrl?relay                            6
     ??SampleApp_MessageMSGCB?relay                    6
     ??SampleApp_SendPeriodicMessage?relay             6
     ??SerialApp_SendSensorsData?relay                 6
     ??GetLamp?relay                                   6
     ??SetLamp?relay                                   6
     ??GetGas?relay                                    6
     ??GetHuman?relay                                  6
     ??SerialApp_DeviceConnect?relay                   6
     ?<Constant "Group 1">                             8
     ?<Constant "SampleApp">                          10
     ?<Constant {0}>                                  30
     ?<Constant "%02d %02d %02d">                     15
     ?<Constant "\316\302\266\310:%02d \312\252\266   20
     ?<Constant "\n">                                  2
     ?<Constant "\271\342\325\325:%02d">              10
     ?<Constant {0}>_1                                20
     ?<Constant {0}>_2                                 5
     __Constant_39000000                               4
     __Constant_42c80000                               4

 
 1 309 bytes in segment BANKED_CODE
    72 bytes in segment BANK_RELAYS
     6 bytes in segment SFR_AN
     5 bytes in segment XDATA_I
     5 bytes in segment XDATA_ID
   152 bytes in segment XDATA_ROM_C
    68 bytes in segment XDATA_Z
 
 1 386 bytes of CODE  memory
   144 bytes of CONST memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 6 bytes shared)
    73 bytes of XDATA memory

Errors: none
Warnings: 12
