###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         08/Nov/2015  17:40:39 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\Source\SampleApp.c                   #
#    Command line       =  -f E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ #
#                          ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func        #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Config.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0       #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\Source\SampleApp.c -D ZIGBEEPRO -D   #
#                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D            #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC            #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\CoordinatorEB-Pro\List\     #
#                          -lA E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³ #
#                          \ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\ #
#                           --diag_suppress Pe001,Pa010 -o                    #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e   #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ #
#                          ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\ -I                      #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\SOURCE\ -I               #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\    #
#                          -I E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ #
#                          ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\ -I E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀ #
#                          íÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\HAL\INCLUDE\ -I E:\work\zigbee\taobao\work #
#                          \WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ #
#                          ÷Æ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\O #
#                          SAL\MCU\CCSOC\ -I E:\work\zigbee\taobao\work\WIFI- #
#                          ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\OSAL\INCLUDE\ -I                  #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\AF\ -I E:\work\zigbee\taobao\work\WIFI-ZigBee #
#                          ¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\STACK\NWK\ -I                           #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\SEC\ -I E:\work\zigbee\taobao\work\WIFI-ZigBe #
#                          e¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\SAPI\ -I                         #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\SYS\ -I E:\work\zigbee\taobao\work\WIFI-ZigBe #
#                          e¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\ZDO\ -I                          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\Z #
#                          MAC\F8W\ -I E:\work\zigbee\taobao\work\WIFI-ZigBee #
#                          ¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\ZMAC\ -I E:\work\zigbee\taobao\work\WIF #
#                          I-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\COMPONENTS\SERVICES\SADDR\ -I              #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          ERVICES\SDATA\ -I E:\work\zigbee\taobao\work\WIFI- #
#                          ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MAC\INCLUDE\ -I                   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\HIGH_LEVEL\ -I E:\work\zigbee\taobao\work\WIFI- #
#                          ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I           #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz               #
#    List file          =  E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\CoordinatorEB-Pro\List\Samp #
#                          leApp.lst                                          #
#    Object file        =  E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\Sampl #
#                          eApp.r51                                           #
#                                                                             #
#                                                                             #
###############################################################################

E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "stdio.h"
     78          
     79          /*********************************************************************
     80           * MACROS
     81           */
     82          
     83          
     84          #if !defined( SERIAL_APP_PORT )
     85          #define SERIAL_APP_PORT  0
     86          #endif
     87          
     88          
     89          
     90          //½Ó½Ð´®¿ÚÊý¾Ý»º³å
     91          #define SERIAL_APP_RX_MAX  80

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          static uint8 SerialApp_RX_Buff[SERIAL_APP_RX_MAX+1];
   \                     SerialApp_RX_Buff:
   \   000000                DS 81
   \   000051                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     93          static uint8 SerialApp_RX_Len;
   \                     SerialApp_RX_Len:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     94          
     95          //½âÎö´®¿ÚÊý¾ÝµÄ»º³å
     96          #define SERIAL_APP_PARSE_MAX  80
     97          static uint8 SerialApp_PARSE_Buff[SERIAL_APP_PARSE_MAX+1];
     98          static uint8 SerialApp_PARSE_Len;
     99          
    100          //·¢ËÍµÄÊý¾Ý³¤¶È
    101          #define SERIAL_APP_TX_MAX  80

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          static uint8 SerialApp_TX_Buff[SERIAL_APP_TX_MAX+1];
   \                     SerialApp_TX_Buff:
   \   000000                DS 81
   \   000051                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          static uint8 SerialApp_TX_Len;
   \                     SerialApp_TX_Len:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    104          
    105          
    106          /*********************************************************************
    107           * CONSTANTS
    108           */
    109          
    110          /*********************************************************************
    111           * TYPEDEFS
    112           */
    113          
    114          /*********************************************************************
    115           * GLOBAL VARIABLES
    116           */
    117          
    118          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    119          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0500         DW 5
   \   00000A   0600         DW 6
    120          {
    121            SERIALAPP_CONNECTREQ_CLUSTER,//ÓÃÓÚÉÏ´«ÖÕ¶Ë¶ÌµØÖ·
    122            SAMPLEAPP_END1,
    123            SAMPLEAPP_END2,
    124            SAMPLEAPP_END3,
    125            SAMPLEAPP_END4,
    126            SAMPLEAPP_END5
    127          };
    128          

   \                                 In  segment XDATA_ROM_C, align 1
    129          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    130          {
    131            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    132            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    133            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    134            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    135            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    136            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    137            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    138            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    139            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    140          };
    141          
    142          // This is the Endpoint/Interface description.  It is defined here, but
    143          // filled-in in SampleApp_Init().  Another way to go would be to fill
    144          // in the structure here and make it a "const" (in code space).  The
    145          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    147          
    148          /*********************************************************************
    149           * EXTERNAL VARIABLES
    150           */
    151          
    152          /*********************************************************************
    153           * EXTERNAL FUNCTIONS
    154           */
    155          
    156          /*********************************************************************
    157           * LOCAL VARIABLES
    158           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    159          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    160                                    // This variable will be received when
    161                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    163          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    165          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    167          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    168          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    169          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    174          
    175          
    176          //Ð­µ÷Æ÷±£´æËùÓÐÖÕ¶ËµÄÊý¾Ý

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    177          DeviceDataInfo  endDevInfo;
   \                     endDevInfo:
   \   000000                DS 30
   \   00001E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    178          uint16 endDevAddr[MAX_DEVICE]={0};
   \                     endDevAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    179          
    180          /*********************************************************************
    181           * LOCAL FUNCTIONS
    182           */
    183          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    184          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    185          void SampleApp_SendPeriodicMessage( void );
    186          void SerialApp_CallBack(uint8 port, uint8 event);
    187          void unpackData(uint8* data, uint8 len);
    188          void ParseframeData(uint8* data, uint8 len);
    189          void packDataAndSend(uint8 fc, uint8* data, uint8 len);
    190          void sendDataToEnd(uint16 shortAddr, uint16 clusterId, uint8* data, uint8 len);
    191          
    192          /*********************************************************************
    193           * NETWORK LAYER CALLBACKS
    194           */
    195          
    196          /*********************************************************************
    197           * PUBLIC FUNCTIONS
    198           */
    199          
    200          /*********************************************************************
    201           * @fn      SampleApp_Init
    202           *
    203           * @brief   Initialization function for the Generic App Task.
    204           *          This is called during initialization and should contain
    205           *          any application specific initialization (ie. hardware
    206           *          initialization/setup, table initialization, power up
    207           *          notificaiton ... ).
    208           *
    209           * @param   task_id - the ID assigned by OSAL.  This ID should be
    210           *                    used to send messages and set timers.
    211           *
    212           * @return  none
    213           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    215          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    216            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    217            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    218            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    219            
    220            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    221            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    222              HalUARTWrite(0,"SampleApp_Init", 14);
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0E         MOV     R4,#0xe
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "SampleApp_Init">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "SampleApp_Init">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay
    223          
    224            
    225            // Device hardware initialization can be added here or in main() (Zmain.c).
    226            // If the hardware is application specific - add it here.
    227            // If the hardware is other parts of the device add it in main().
    228          
    229           #if defined ( BUILD_ALL_DEVICES )
    230            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    231            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    232            // together - if they are - we will start up a coordinator. Otherwise,
    233            // the device will start as a router.
    234            if ( readCoordinatorJumper() )
    235              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;dd
    236            else
    237              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    238          #endif // BUILD_ALL_DEVICES
    239          
    240          #if defined ( HOLD_AUTO_START )
    241            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    242            //  from starting the device and wait for the application to
    243            //  start the device.
    244            ZDOInitDevice(0);ee
    245          #endif
    246          
    247            // Setup for the periodic message's destination address
    248            // Broadcast to everyone
    249            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00002E   740F         MOV     A,#0xf
   \   000030   F0           MOVX    @DPTR,A
    250            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000031   A3           INC     DPTR
   \   000032   7414         MOV     A,#0x14
   \   000034   F0           MOVX    @DPTR,A
    251            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000035   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    252          
    253            // Setup for the flash command's destination address - Group 1
    254            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
    255            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000043   A3           INC     DPTR
   \   000044   7414         MOV     A,#0x14
   \   000046   F0           MOVX    @DPTR,A
    256            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000047   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004A   7401         MOV     A,#0x1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    257            
    258            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000050   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000053   7402         MOV     A,#0x2
   \   000055   F0           MOVX    @DPTR,A
    259            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000056   A3           INC     DPTR
   \   000057   7414         MOV     A,#0x14
   \   000059   F0           MOVX    @DPTR,A
    260            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   00005A   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00005D   E4           CLR     A
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   F0           MOVX    @DPTR,A
    261          
    262            // Fill out the endpoint description.
    263            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000061   90....       MOV     DPTR,#SampleApp_epDesc
   \   000064   7414         MOV     A,#0x14
   \   000066   F0           MOVX    @DPTR,A
    264            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000067   A3           INC     DPTR
   \   000068   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00006E   F0           MOVX    @DPTR,A
    265            SampleApp_epDesc.simpleDesc
    266                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00006F   A3           INC     DPTR
   \   000070   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000072   F0           MOVX    @DPTR,A
   \   000073   A3           INC     DPTR
   \   000074   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000076   F0           MOVX    @DPTR,A
    267            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000077   A3           INC     DPTR
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
    268          
    269            // Register the endpoint description with the AF
    270            afRegister( &SampleApp_epDesc );
   \   00007A                ; Setup parameters for call to function afRegister
   \   00007A   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00007C   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00007E   12....       LCALL   ??afRegister?relay
    271          
    272            // Register for all key events - This app will handle all key events
    273            RegisterForKeys( SampleApp_TaskID );
   \   000081                ; Setup parameters for call to function RegisterForKeys
   \   000081   90....       MOV     DPTR,#SampleApp_TaskID
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F9           MOV     R1,A
   \   000086   12....       LCALL   ??RegisterForKeys?relay
    274          
    275            // By default, all devices start out in Group 1
    276            SampleApp_Group.ID = 0x0001;
   \   000089   90....       MOV     DPTR,#SampleApp_Group
   \   00008C   7401         MOV     A,#0x1
   \   00008E   F0           MOVX    @DPTR,A
   \   00008F   A3           INC     DPTR
   \   000090   E4           CLR     A
   \   000091   F0           MOVX    @DPTR,A
    277            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   000092                ; Setup parameters for call to function osal_memcpy
   \   000092   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   000095   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000098   F5..         MOV     ?V0 + 2,A
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009F   7C07         MOV     R4,#0x7
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000A5   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A7   12....       LCALL   ??osal_memcpy?relay
   \   0000AA   7403         MOV     A,#0x3
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
    278            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000AF                ; Setup parameters for call to function aps_AddGroup
   \   0000AF   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000B1   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000B3   7914         MOV     R1,#0x14
   \   0000B5   12....       LCALL   ??aps_AddGroup?relay
    279          
    280          #if defined ( LCD_SUPPORTED )
    281            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B8                ; Setup parameters for call to function HalLcdWriteString
   \   0000B8   7901         MOV     R1,#0x1
   \   0000BA   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000BC   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000BE   12....       LCALL   ??HalLcdWriteString?relay
    282          #endif
    283          }
   \   0000C1   7F03         MOV     R7,#0x3
   \   0000C3   02....       LJMP    ?BANKED_LEAVE_XDATA
    284          
    285          /*********************************************************************
    286           * @fn      SampleApp_ProcessEvent
    287           *
    288           * @brief   Generic Application Task event processor.  This function
    289           *          is called to process all events for the task.  Events
    290           *          include timers, messages and any other user defined events.
    291           *
    292           * @param   task_id  - The OSAL assigned task ID.
    293           * @param   events - events to process.  This is a bit map and can
    294           *                   contain more than one event.
    295           *
    296           * @return  none
    297           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    298          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    299          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    300            afIncomingMSGPacket_t *MSGpkt;
    301            (void)task_id;  // Intentionally unreferenced parameter
    302          
    303            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   605A         JZ      ??SampleApp_ProcessEvent_0
    304            {
    305              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800D         SJMP    ??SampleApp_ProcessEvent_1
    306              while ( MSGpkt )
    307              {
    308                switch ( MSGpkt->hdr.event )
    309                {
    310                  // Received when a key is pressed
    311                  case KEY_CHANGE:
    312                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    313                    break;
    314          
    315                  // Received when a messages is received (OTA) for this endpoint
    316                  case AF_INCOMING_MSG_CMD:
    317                    SampleApp_MessageMSGCB( MSGpkt );
    318                    break;
    319          
    320                  // Received whenever the device changes state in the network
    321                  case ZDO_STATE_CHANGE:
    322                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#SampleApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    323                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    324                           (SampleApp_NwkState == DEV_ROUTER)
    325                        || (SampleApp_NwkState == DEV_END_DEVICE) )
    326                    {
    327                    }
    328                    else
    329                    {
    330                      // Device is no longer in the network
    331                    }
    332                    break;
    333          
    334                  default:
    335                    break;
    336                }
    337          
    338                // Release the memory
    339                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    340          
    341                // Next - if one is available
    342                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#SampleApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 2,R2
   \   000027   8B..         MOV     ?V0 + 3,R3
   \   000029   AE..         MOV     R6,?V0 + 2
   \   00002B   AF..         MOV     R7,?V0 + 3
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   602E         JZ      ??SampleApp_ProcessEvent_4
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   24E6         ADD     A,#-0x1a
   \   000038   601C         JZ      ??SampleApp_ProcessEvent_5
   \   00003A   245A         ADD     A,#0x5a
   \   00003C   6006         JZ      ??SampleApp_ProcessEvent_6
   \   00003E   24EF         ADD     A,#-0x11
   \   000040   60CE         JZ      ??SampleApp_ProcessEvent_2
   \   000042   80D2         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000044                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F9           MOV     R1,A
   \   000051   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000054   80C0         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000056                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00005D   80B7         SJMP    ??SampleApp_ProcessEvent_3
    343              }
    344          
    345              // return unprocessed events
    346              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   00005F   AA..         MOV     R2,?V0 + 0
   \   000061   E5..         MOV     A,?V0 + 1
   \   000063   6480         XRL     A,#0x80
   \   000065   FB           MOV     R3,A
   \   000066   802D         SJMP    ??SampleApp_ProcessEvent_7
    347            }
    348          
    349            // Send a message out - This event is generated by a timer
    350            //  (setup in SampleApp_Init()).
    351            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000068   EA           MOV     A,R2
   \   000069   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006B   5024         JNC     ??SampleApp_ProcessEvent_8
    352            {
    353          
    354              packDataAndSend(FUN_CODE_UPDATA_ALL_DATA, (uint8*)&endDevInfo, sizeof(DeviceDataInfo));
   \   00006D                ; Setup parameters for call to function packDataAndSend
   \   00006D   7C1E         MOV     R4,#0x1e
   \   00006F   7A..         MOV     R2,#endDevInfo & 0xff
   \   000071   7B..         MOV     R3,#(endDevInfo >> 8) & 0xff
   \   000073   7902         MOV     R1,#0x2
   \   000075   12....       LCALL   ??packDataAndSend?relay
    355            
    356              osal_start_timerEx( SampleApp_TaskID,
    357                            SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    358                            SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000078                ; Setup parameters for call to function osal_start_timerEx
   \   000078   7CD0         MOV     R4,#-0x30
   \   00007A   7D07         MOV     R5,#0x7
   \   00007C   7A01         MOV     R2,#0x1
   \   00007E   7B00         MOV     R3,#0x0
   \   000080   90....       MOV     DPTR,#SampleApp_TaskID
   \   000083   E0           MOVX    A,@DPTR
   \   000084   F9           MOV     R1,A
   \   000085   12....       LCALL   ??osal_start_timerEx?relay
    359          
    360              
    361              // return unprocessed events
    362              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   6401         XRL     A,#0x1
   \   00008C   FA           MOV     R2,A
   \   00008D   AB..         MOV     R3,?V0 + 1
   \   00008F   8004         SJMP    ??SampleApp_ProcessEvent_7
    363            }
    364          
    365            // Discard unknown events
    366            return 0;
   \                     ??SampleApp_ProcessEvent_8:
   \   000091   7A00         MOV     R2,#0x0
   \   000093   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_7:
   \   000095                REQUIRE ?Subroutine0
   \   000095                ; // Fall through to label ?Subroutine0
    367          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    368          
    369          /*********************************************************************
    370           * Event Generation Functions
    371           */
    372          /*********************************************************************
    373           * @fn      SampleApp_HandleKeys
    374           *
    375           * @brief   Handles all key events for this device.
    376           *
    377           * @param   shift - true if in shift/alt.
    378           * @param   keys - bit field for key events. Valid entries:
    379           *                 HAL_KEY_SW_2
    380           *                 HAL_KEY_SW_1
    381           *
    382           * @return  none
    383           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    384          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    385          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    386            (void)shift;  // Intentionally unreferenced parameter
    387            
    388            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   500B         JNC     ??SampleApp_HandleKeys_0
    389            {
    390              /* This key sends the Flash Command is sent to Group 1.
    391               * This device will not receive the Flash Command from this
    392               * device (even if it belongs to group 1).
    393               */
    394                  packDataAndSend(FUN_CODE_UPDATA_RFID, "7CCC8204", 8);
   \   00000B                ; Setup parameters for call to function packDataAndSend
   \   00000B   7C08         MOV     R4,#0x8
   \   00000D   7A..         MOV     R2,#`?<Constant "7CCC8204">` & 0xff
   \   00000F   7B..         MOV     R3,#(`?<Constant "7CCC8204">` >> 8) & 0xff
   \   000011   7903         MOV     R1,#0x3
   \   000013   12....       LCALL   ??packDataAndSend?relay
    395            }
    396          
    397            if ( keys & HAL_KEY_SW_6 )
   \                     ??SampleApp_HandleKeys_0:
   \   000016   EE           MOV     A,R6
   \   000017   A2E5         MOV     C,0xE0 /* A   */.5
   \   000019   5044         JNC     ??SampleApp_HandleKeys_1
    398            {
    399              /* The Flashr Command is sent to Group 1.
    400               * This key toggles this device in and out of group 1.
    401               * If this device doesn't belong to group 1, this application
    402               * will not receive the Flash command sent to group 1.
    403               */
    404              int i;
    405              
    406              endDevInfo.end1_light=1;
   \   00001B   90....       MOV     DPTR,#endDevInfo
   \   00001E   7401         MOV     A,#0x1
   \   000020   12....       LCALL   ?Subroutine7 & 0xFFFF
    407              endDevInfo.end1_temp=2;
    408              endDevInfo.end1_hum=3;
    409          
    410          
    411              endDevInfo.end2_people=4;
    412              endDevInfo.end2_mq2=5;
   \                     ??CrossCallReturnLabel_6:
   \   000023   A3           INC     DPTR
   \   000024   04           INC     A
   \   000025   12....       LCALL   ?Subroutine7 & 0xFFFF
    413              endDevInfo.end2_temp=6;
    414              endDevInfo.end2_hum=7;
    415              endDevInfo.end2_lamp=8;
    416          
    417              for(i=0; i<22; i++)
   \                     ??CrossCallReturnLabel_7:
   \   000028   7800         MOV     R0,#0x0
   \   00002A   7900         MOV     R1,#0x0
    418              {
    419                  endDevInfo.gpsData[i]=9+i;
   \                     ??SampleApp_HandleKeys_2:
   \   00002C   E8           MOV     A,R0
   \   00002D   2409         ADD     A,#0x9
   \   00002F   C0E0         PUSH    A
   \   000031   74..         MOV     A,#(endDevInfo + 8) & 0xff
   \   000033   28           ADD     A,R0
   \   000034   F582         MOV     DPL,A
   \   000036   74..         MOV     A,#((endDevInfo + 8) >> 8) & 0xff
   \   000038   39           ADDC    A,R1
   \   000039   F583         MOV     DPH,A
   \   00003B   D0E0         POP     A
   \   00003D   F0           MOVX    @DPTR,A
    420              }
   \   00003E   E8           MOV     A,R0
   \   00003F   2401         ADD     A,#0x1
   \   000041   08           INC     R0
   \   000042   E9           MOV     A,R1
   \   000043   3400         ADDC    A,#0x0
   \   000045   F9           MOV     R1,A
   \   000046   C3           CLR     C
   \   000047   E8           MOV     A,R0
   \   000048   9416         SUBB    A,#0x16
   \   00004A   E9           MOV     A,R1
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00004F   65D0         XRL     A,PSW
   \   000051   33           RLC     A
   \   000052   40D8         JC      ??SampleApp_HandleKeys_2
    421          
    422              packDataAndSend(FUN_CODE_UPDATA_ALL_DATA, (uint8*)&endDevInfo, 30);
   \   000054                ; Setup parameters for call to function packDataAndSend
   \   000054   7C1E         MOV     R4,#0x1e
   \   000056   7A..         MOV     R2,#endDevInfo & 0xff
   \   000058   7B..         MOV     R3,#(endDevInfo >> 8) & 0xff
   \   00005A   7902         MOV     R1,#0x2
   \   00005C   12....       LCALL   ??packDataAndSend?relay
    423          
    424            }
    425          }
   \                     ??SampleApp_HandleKeys_1:
   \   00005F                REQUIRE ?Subroutine1
   \   00005F                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   04           INC     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   04           INC     A
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   04           INC     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   22           RET
    426          
    427          
    428          
    429          /*********************************************************************
    430           * @fn      SampleApp_MessageMSGCB
    431           *
    432           * @brief   Data message processor callback.  This function processes
    433           *          any incoming data - probably from other devices.  So, based
    434           *          on cluster ID, perform the intended action.
    435           *
    436           * @param   none
    437           *
    438           * @return  none
    439           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    440          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    441          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    442              uint16 flashTime;
    443          
    444              switch ( pkt->clusterId )
   \   00000A   EA           MOV     A,R2
   \   00000B   2421         ADD     A,#0x21
   \   00000D   F8           MOV     R0,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   FE           MOV     R6,A
   \   000014   E9           MOV     A,R1
   \   000015   FF           MOV     R7,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000026   0100         DW        1
   \   000028   05           DB        5
   \   000029   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002B   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00002D   ....         DW        ??SampleApp_MessageMSGCB_2
   \   00002F   ....         DW        ??SampleApp_MessageMSGCB_3
   \   000031   ....         DW        ??SampleApp_MessageMSGCB_4
   \   000033   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000035   ....         DW        ??SampleApp_MessageMSGCB_5
    445              {
    446                  case SERIALAPP_CONNECTREQ_CLUSTER://±£´æÖÕ¶ËµÄ¶ÌµØÖ·
    447                      uint8 addr=pkt->cmd.Data[0]-1;
                             ^
Warning[Pe1072]: a declaration cannot have a label
   \                     ??SampleApp_MessageMSGCB_1:
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F8           MOV     R0,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   E8           MOV     A,R0
   \   000041   FA           MOV     R2,A
   \   000042   E9           MOV     A,R1
   \   000043   FB           MOV     R3,A
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   E0           MOVX    A,@DPTR
   \   000049   14           DEC     A
   \   00004A   F8           MOV     R0,A
    448                      if(addr>=MAX_DEVICE) break;
   \   00004B   C3           CLR     C
   \   00004C   9406         SUBB    A,#0x6
   \   00004E   4003         JC      $+5
   \   000050   02....       LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
    449                      endDevAddr[addr]=BUILD_UINT16(pkt->cmd.Data[2], pkt->cmd.Data[1]);
   \   000053   8882         MOV     DPL,R0
   \   000055   8582..       MOV     ?V0 + 2,DPL
   \   000058   75..00       MOV     ?V0 + 3,#0x0
   \   00005B   E8           MOV     A,R0
   \   00005C   C3           CLR     C
   \   00005D   33           RLC     A
   \   00005E   F8           MOV     R0,A
   \   00005F   E4           CLR     A
   \   000060   33           RLC     A
   \   000061   F9           MOV     R1,A
   \   000062   74..         MOV     A,#endDevAddr & 0xff
   \   000064   28           ADD     A,R0
   \   000065   F8           MOV     R0,A
   \   000066   74..         MOV     A,#(endDevAddr >> 8) & 0xff
   \   000068   39           ADDC    A,R1
   \   000069   F9           MOV     R1,A
   \   00006A   EA           MOV     A,R2
   \   00006B   2402         ADD     A,#0x2
   \   00006D   FC           MOV     R4,A
   \   00006E   EB           MOV     A,R3
   \   00006F   3400         ADDC    A,#0x0
   \   000071   FD           MOV     R5,A
   \   000072   8C..         MOV     ?V0 + 0,R4
   \   000074   8D..         MOV     ?V0 + 1,R5
   \   000076   8A82         MOV     DPL,R2
   \   000078   A3           INC     DPTR
   \   000079   AE82         MOV     R6,DPL
   \   00007B   AF83         MOV     R7,DPH
   \   00007D   8C82         MOV     DPL,R4
   \   00007F   F583         MOV     DPH,A
   \   000081   E0           MOVX    A,@DPTR
   \   000082   F5..         MOV     ?V0 + 4,A
   \   000084   8E82         MOV     DPL,R6
   \   000086   8F83         MOV     DPH,R7
   \   000088   E0           MOVX    A,@DPTR
   \   000089   FD           MOV     R5,A
   \   00008A   E5..         MOV     A,?V0 + 4
   \   00008C   8882         MOV     DPL,R0
   \   00008E   8983         MOV     DPH,R1
   \   000090   F0           MOVX    @DPTR,A
   \   000091   A3           INC     DPTR
   \   000092   ED           MOV     A,R5
   \   000093   12....       LCALL   ??Subroutine13_0 & 0xFFFF
    450          
    451                      {
    452                          uint8 buff[30]={0};    
   \                     ??CrossCallReturnLabel_21:
   \   000096   AC82         MOV     R4,DPL
   \   000098   AD83         MOV     R5,DPH
   \   00009A   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00009D   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   0000A0   741E         MOV     A,#0x1e
   \   0000A2   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    453          
    454                          //·§Öµ
    455                          sprintf(buff, "%02d,%02x,%02x,%02d,%04x", 
                                         ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    456                          pkt->cmd.Data[0],pkt->cmd.Data[1],pkt->cmd.Data[2],addr,endDevAddr[addr]);
   \   0000A5                ; Setup parameters for call to function sprintf
   \   0000A5   8882         MOV     DPL,R0
   \   0000A7   8983         MOV     DPH,R1
   \   0000A9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000AC   78..         MOV     R0,#?V0 + 2
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   85..82       MOV     DPL,?V0 + 0
   \   0000B4   85..83       MOV     DPH,?V0 + 1
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F5..         MOV     ?V0 + 0,A
   \   0000BA   75..00       MOV     ?V0 + 1,#0x0
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   F5..         MOV     ?V0 + 0,A
   \   0000C9   78..         MOV     R0,#?V0 + 0
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CE   8A82         MOV     DPL,R2
   \   0000D0   8B83         MOV     DPH,R3
   \   0000D2   E0           MOVX    A,@DPTR
   \   0000D3   F5..         MOV     ?V0 + 0,A
   \   0000D5   78..         MOV     R0,#?V0 + 0
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DA   7C..         MOV     R4,#`?<Constant "%02d,%02x,%02x,%02d,%04x">` & 0xff
   \   0000DC   7D..         MOV     R5,#(`?<Constant "%02d,%02x,%02x,%02d,%04x">` >> 8) & 0xff
   \   0000DE   740A         MOV     A,#0xa
   \   0000E0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E3   AA82         MOV     R2,DPL
   \   0000E5   AB83         MOV     R3,DPH
   \   0000E7   12....       LCALL   ??sprintf?relay
   \   0000EA   740A         MOV     A,#0xa
   \   0000EC   12....       LCALL   ?DEALLOC_XSTACK8
    457                          HalLcdWriteString( buff, HAL_LCD_LINE_4 );
                                                    ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"

      switch ( pkt->clusterId )
      ^
"E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",444  Warning[Pe546]: 
          transfer of control bypasses initialization of:
            variable "addr" (declared at line 447 of
                      "E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC
                      2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samples\SampleApp
                      \Source\SampleApp.c")

      uint16 flashTime;
             ^
"E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",442  Warning[Pe177]: 
          variable "flashTime" was declared but never referenced
   \   0000EF                ; Setup parameters for call to function HalLcdWriteString
   \   0000EF   7904         MOV     R1,#0x4
   \   0000F1   85..82       MOV     DPL,?XSP + 0
   \   0000F4   85..83       MOV     DPH,?XSP + 1
   \   0000F7   AA82         MOV     R2,DPL
   \   0000F9   AB83         MOV     R3,DPH
   \   0000FB   12....       LCALL   ??HalLcdWriteString?relay
    458                      }
    459                      
    460                  break;
   \   0000FE   8073         SJMP    ??SampleApp_MessageMSGCB_0
    461                  case SAMPLEAPP_END1:
    462                      endDevInfo.end1_temp=pkt->cmd.Data[1];//ÎÂ¶È
   \                     ??SampleApp_MessageMSGCB_2:
   \   000100   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000103   90....       MOV     DPTR,#endDevInfo + 1
   \   000106   12....       LCALL   ?Subroutine5 & 0xFFFF
    463                      endDevInfo.end1_hum=pkt->cmd.Data[2];//Êª¶È
   \                     ??CrossCallReturnLabel_4:
   \   000109   90....       MOV     DPTR,#endDevInfo + 2
   \   00010C   12....       LCALL   ?Subroutine3 & 0xFFFF
    464                      endDevInfo.end1_light=pkt->cmd.Data[3];  //¹âÕÕ              
   \                     ??CrossCallReturnLabel_0:
   \   00010F   90....       MOV     DPTR,#endDevInfo
   \                     ??SampleApp_MessageMSGCB_6:
   \   000112   F0           MOVX    @DPTR,A
    465                  break;
   \   000113   805E         SJMP    ??SampleApp_MessageMSGCB_0
    466                  case SAMPLEAPP_END2:
    467                      endDevInfo.end2_temp=pkt->cmd.Data[1]; //ÎÂ¶È
   \                     ??SampleApp_MessageMSGCB_3:
   \   000115   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000118   90....       MOV     DPTR,#endDevInfo + 5
   \   00011B   12....       LCALL   ?Subroutine5 & 0xFFFF
    468                      endDevInfo.end2_hum=pkt->cmd.Data[2]; //Êª¶È
   \                     ??CrossCallReturnLabel_5:
   \   00011E   90....       MOV     DPTR,#endDevInfo + 6
   \   000121   12....       LCALL   ?Subroutine3 & 0xFFFF
    469                      endDevInfo.end2_mq2=pkt->cmd.Data[3];//ÆøÌå
   \                     ??CrossCallReturnLabel_1:
   \   000124   90....       MOV     DPTR,#endDevInfo + 4
   \   000127   12....       LCALL   ?Subroutine4 & 0xFFFF
    470                      endDevInfo.end2_people=pkt->cmd.Data[4]; //ÈËÌå
   \                     ??CrossCallReturnLabel_2:
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   90....       MOV     DPTR,#endDevInfo + 3
   \   00012E   12....       LCALL   ?Subroutine4 & 0xFFFF
    471                      endDevInfo.end2_lamp=pkt->cmd.Data[5];//¼ÌµçÆ÷£¬¼´µÆµÄ×´Ì¬
   \                     ??CrossCallReturnLabel_3:
   \   000131   A3           INC     DPTR
   \   000132   E0           MOVX    A,@DPTR
   \   000133   90....       MOV     DPTR,#endDevInfo + 7
   \   000136   80DA         SJMP    ??SampleApp_MessageMSGCB_6
    472                  break;
    473                  case SAMPLEAPP_END3:
    474                      //RFIDÉÏ´«²»±£´æ£¬Ö±½ÓÉÏ´«ÊÖ»ú»òÕßPC
    475                      packDataAndSend(FUN_CODE_UPDATA_RFID, pkt->cmd.Data, pkt->cmd.DataLength);
   \                     ??SampleApp_MessageMSGCB_4:
   \   000138                ; Setup parameters for call to function packDataAndSend
   \   000138   EA           MOV     A,R2
   \   000139   241F         ADD     A,#0x1f
   \   00013B   F582         MOV     DPL,A
   \   00013D   EB           MOV     A,R3
   \   00013E   3400         ADDC    A,#0x0
   \   000140   F583         MOV     DPH,A
   \   000142   E0           MOVX    A,@DPTR
   \   000143   FC           MOV     R4,A
   \   000144   8E82         MOV     DPL,R6
   \   000146   8F83         MOV     DPH,R7
   \   000148   E0           MOVX    A,@DPTR
   \   000149   FA           MOV     R2,A
   \   00014A   A3           INC     DPTR
   \   00014B   E0           MOVX    A,@DPTR
   \   00014C   FB           MOV     R3,A
   \   00014D   7903         MOV     R1,#0x3
   \   00014F   12....       LCALL   ??packDataAndSend?relay
    476                  break;
   \   000152   801F         SJMP    ??SampleApp_MessageMSGCB_0
    477                  case SAMPLEAPP_END4:
    478                      //²½½øµç»úÃ»ÓÐÊý¾ÝÉÏ´«
    479                  break;
    480                  case SAMPLEAPP_END5:
    481                      osal_memcpy(endDevInfo.gpsData, pkt->cmd.Data,22);//ÖÕ¶ËÉÏ´«µÄGPS¹²22¸ö×Ö½Ú
   \                     ??SampleApp_MessageMSGCB_5:
   \   000154                ; Setup parameters for call to function osal_memcpy
   \   000154   8E82         MOV     DPL,R6
   \   000156   8F83         MOV     DPH,R7
   \   000158   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   00015B   75..00       MOV     ?V0 + 2,#0x0
   \   00015E   78..         MOV     R0,#?V0 + 0
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000163   7C16         MOV     R4,#0x16
   \   000165   7D00         MOV     R5,#0x0
   \   000167   7A..         MOV     R2,#(endDevInfo + 8) & 0xff
   \   000169   7B..         MOV     R3,#((endDevInfo + 8) >> 8) & 0xff
   \   00016B   12....       LCALL   ??osal_memcpy?relay
   \   00016E   7403         MOV     A,#0x3
   \   000170   12....       LCALL   ?DEALLOC_XSTACK8
    482                  break;
    483              }
    484          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000173                REQUIRE ?Subroutine2
   \   000173                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   741E         MOV     A,#0x1e
   \   000002   12....       LCALL   ?DEALLOC_XSTACK8
   \   000005   7F06         MOV     R7,#0x6
   \   000007   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine13_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    485          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    486          uint8 CheckSum(uint8 *pdata, uint8 len)
   \                     CheckSum:
    487          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FC           MOV     R4,A
    488          	uint8 i;
    489          	uint8 check_sum=0;
   \   000007   7900         MOV     R1,#0x0
    490          
    491          	for(i=0; i<len; i++)
   \   000009   7800         MOV     R0,#0x0
   \   00000B   8010         SJMP    ??CheckSum_0
    492          	{
    493          		check_sum += pdata[i];
   \                     ??CheckSum_1:
   \   00000D   88..         MOV     ?V0 + 0,R0
   \   00000F   EA           MOV     A,R2
   \   000010   25..         ADD     A,?V0 + 0
   \   000012   F582         MOV     DPL,A
   \   000014   EB           MOV     A,R3
   \   000015   3400         ADDC    A,#0x0
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   29           ADD     A,R1
   \   00001B   F9           MOV     R1,A
    494          	}
   \   00001C   08           INC     R0
   \                     ??CheckSum_0:
   \   00001D   E8           MOV     A,R0
   \   00001E   C3           CLR     C
   \   00001F   9C           SUBB    A,R4
   \   000020   40EB         JC      ??CheckSum_1
    495          	return check_sum;
   \   000022   7F02         MOV     R7,#0x2
   \   000024   02....       LJMP    ?BANKED_LEAVE_XDATA
    496          }
    497          
    498          //Êý¾Ý´ò°ü·¢ËÍ
    499          /**
    500          *fc:¹¦ÄÜÂë
    501          *data:ÉÏ´«µÄÊý¾Ý
    502          *len:Êý¾Ý³¤¶È
    503          */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          void packDataAndSend(uint8 fc, uint8* data, uint8 len)
   \                     packDataAndSend:
    505          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
   \   00000B   8C..         MOV     ?V0 + 1,R4
    506              osal_memset(SerialApp_TX_Buff, 0, SERIAL_APP_TX_MAX+1);
   \   00000D                ; Setup parameters for call to function osal_memset
   \   00000D   7C51         MOV     R4,#0x51
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   7900         MOV     R1,#0x0
   \   000013   7A..         MOV     R2,#SerialApp_TX_Buff & 0xff
   \   000015   7B..         MOV     R3,#(SerialApp_TX_Buff >> 8) & 0xff
   \   000017   12....       LCALL   ??osal_memset?relay
    507          
    508              //Êý¾Ý°ü³¤¶È
    509              SerialApp_TX_Buff[0]=3+len;
   \   00001A   7403         MOV     A,#0x3
   \   00001C   25..         ADD     A,?V0 + 1
   \   00001E   F5..         MOV     ?V0 + 2,A
   \   000020   90....       MOV     DPTR,#SerialApp_TX_Buff
   \   000023   F0           MOVX    @DPTR,A
    510          
    511              //¹¦ÄÜÂë
    512              SerialApp_TX_Buff[2]=fc;
   \   000024   E5..         MOV     A,?V0 + 0
   \   000026   90....       MOV     DPTR,#SerialApp_TX_Buff + 2
   \   000029   F0           MOVX    @DPTR,A
    513          
    514              //·¢ËÍµÄÊý¾Ý
    515              if(len>0)
   \   00002A   E5..         MOV     A,?V0 + 1
   \   00002C   601F         JZ      ??packDataAndSend_0
    516              {
    517                  osal_memcpy(SerialApp_TX_Buff+3, data, len);
   \   00002E                ; Setup parameters for call to function osal_memcpy
   \   00002E   8E..         MOV     ?V0 + 4,R6
   \   000030   8F..         MOV     ?V0 + 5,R7
   \   000032   75..00       MOV     ?V0 + 6,#0x0
   \   000035   78..         MOV     R0,#?V0 + 4
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003A   85....       MOV     ?V0 + 4,?V0 + 1
   \   00003D   AC..         MOV     R4,?V0 + 4
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A..         MOV     R2,#(SerialApp_TX_Buff + 3) & 0xff
   \   000043   7B..         MOV     R3,#((SerialApp_TX_Buff + 3) >> 8) & 0xff
   \   000045   12....       LCALL   ??osal_memcpy?relay
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
    518              }
    519          
    520              //Ð£ÑéºÍ
    521              SerialApp_TX_Buff[1]=CheckSum(SerialApp_TX_Buff+2, len+1);
   \                     ??packDataAndSend_0:
   \   00004D                ; Setup parameters for call to function CheckSum
   \   00004D   7401         MOV     A,#0x1
   \   00004F   25..         ADD     A,?V0 + 1
   \   000051   F9           MOV     R1,A
   \   000052   7A..         MOV     R2,#(SerialApp_TX_Buff + 2) & 0xff
   \   000054   7B..         MOV     R3,#((SerialApp_TX_Buff + 2) >> 8) & 0xff
   \   000056   12....       LCALL   ??CheckSum?relay
   \   000059   E9           MOV     A,R1
   \   00005A   90....       MOV     DPTR,#SerialApp_TX_Buff + 1
   \   00005D   F0           MOVX    @DPTR,A
    522          
    523              //·¢ËÍ³¤¶È
    524              SerialApp_TX_Len=3+len;
   \   00005E   E5..         MOV     A,?V0 + 2
   \   000060   90....       MOV     DPTR,#SerialApp_TX_Len
   \   000063   F0           MOVX    @DPTR,A
    525              HalUARTWrite(0,SerialApp_TX_Buff, SerialApp_TX_Len);
   \   000064                ; Setup parameters for call to function HalUARTWrite
   \   000064   FC           MOV     R4,A
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7A..         MOV     R2,#SerialApp_TX_Buff & 0xff
   \   000069   7B..         MOV     R3,#(SerialApp_TX_Buff >> 8) & 0xff
   \   00006B   7900         MOV     R1,#0x0
   \   00006D   12....       LCALL   ??HalUARTWrite?relay
    526           //   HalUARTWrite(0,"\r\n", 2);//Êý¾Ý°ü½áÎ²
    527          }
   \   000070   7F07         MOV     R7,#0x7
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
    528          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    529          void SerialApp_CallBack(uint8 port, uint8 event)
   \                     SerialApp_CallBack:
    530          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    531              (void)port;
    532          
    533              if(port==SERIAL_APP_PORT)//´®¿Ú0Êý¾Ý
   \   000006   7029         JNZ     ??SerialApp_CallBack_0
    534              {
    535                  osal_memset(SerialApp_RX_Buff, 0, SERIAL_APP_RX_MAX+1);
   \   000008                ; Setup parameters for call to function osal_memset
   \   000008   7C51         MOV     R4,#0x51
   \   00000A   7D00         MOV     R5,#0x0
   \   00000C   7900         MOV     R1,#0x0
   \   00000E   7A..         MOV     R2,#SerialApp_RX_Buff & 0xff
   \   000010   7B..         MOV     R3,#(SerialApp_RX_Buff >> 8) & 0xff
   \   000012   12....       LCALL   ??osal_memset?relay
    536                  SerialApp_RX_Len = HalUARTRead(SERIAL_APP_PORT, SerialApp_RX_Buff, 
    537                  SERIAL_APP_RX_MAX);
   \   000015                ; Setup parameters for call to function HalUARTRead
   \   000015   7C50         MOV     R4,#0x50
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A..         MOV     R2,#SerialApp_RX_Buff & 0xff
   \   00001B   7B..         MOV     R3,#(SerialApp_RX_Buff >> 8) & 0xff
   \   00001D   7900         MOV     R1,#0x0
   \   00001F   12....       LCALL   ??HalUARTRead?relay
   \   000022   EA           MOV     A,R2
   \   000023   90....       MOV     DPTR,#SerialApp_RX_Len
   \   000026   F0           MOVX    @DPTR,A
    538                  if(SerialApp_RX_Len>0)
   \   000027   6008         JZ      ??SerialApp_CallBack_0
    539                  {
    540                      unpackData(SerialApp_RX_Buff, SerialApp_RX_Len);
   \   000029                ; Setup parameters for call to function unpackData
   \   000029   F9           MOV     R1,A
   \   00002A   7A..         MOV     R2,#SerialApp_RX_Buff & 0xff
   \   00002C   7B..         MOV     R3,#(SerialApp_RX_Buff >> 8) & 0xff
   \   00002E   12....       LCALL   ??unpackData?relay
    541                  }
    542              }
    543          }
   \                     ??SerialApp_CallBack_0:
   \   000031   02....       LJMP    ?Subroutine1 & 0xFFFF
    544          
    545          //ÕÒ³öÒ»Ö¡Êý¾Ý

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    546          void unpackData(uint8* data, uint8 len)
   \                     unpackData:
    547          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    548              int16 i=0;
    549              if(data==NULL) return;
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   6006         JZ      ??unpackData_0
    550              if(len==0) return;
   \   00000B   EE           MOV     A,R6
   \   00000C   6003         JZ      ??unpackData_0
    551          
    552              ParseframeData(data, len);
   \   00000E                ; Setup parameters for call to function ParseframeData
   \   00000E   12....       LCALL   ??ParseframeData?relay
    553              return;
   \                     ??unpackData_0:
   \   000011   02....       LJMP    ?Subroutine1 & 0xFFFF
    554          
    555              
    556          	for(i=0; i<len; i++)
    557          	{
    558          		if(data[i]=='\r')
    559          		{
    560          			if(SerialApp_PARSE_Len>0) ParseframeData(SerialApp_PARSE_Buff, SerialApp_PARSE_Len);
    561          
    562          			memset(SerialApp_PARSE_Buff, 0, SERIAL_APP_PARSE_MAX+1);
                 			^
Warning[Pe223]: function "memset" declared implicitly
    563          			SerialApp_PARSE_Len=0;
    564          		}
    565          		else if(data[i]=='\n')
    566          		{
    567          			if(SerialApp_PARSE_Len>0) ParseframeData(SerialApp_PARSE_Buff, SerialApp_PARSE_Len);
    568          			
    569          			memset(SerialApp_PARSE_Buff, 0, SERIAL_APP_PARSE_MAX+1);
                 			^
Warning[Pe223]: function "memset" declared implicitly

  	for(i=0; i<len; i++)
  	^
"E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",556  Warning[Pe128]: 
          loop is not reachable
    570          			SerialApp_PARSE_Len=0;
    571          		}
    572          		else
    573          		{
    574          			SerialApp_PARSE_Buff[SerialApp_PARSE_Len]=data[i];
    575          			SerialApp_PARSE_Len++;	
    576          		}
    577          	}    
    578          }
    579          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          void ParseframeData(uint8* data, uint8 len)
   \                     ParseframeData:
    581          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    582              uint8 dataLen=0;
    583              uint8 fc=0;
    584              uint8 addr=0;
    585              
    586              if(data==NULL) return;
   \   00000E   EE           MOV     A,R6
   \   00000F   4F           ORL     A,R7
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    587              if(len==0) return;
   \   000015   E9           MOV     A,R1
   \   000016   7003         JNZ     $+5
   \   000018   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    588          
    589              //³¤¶È²»Ò»ÖÂ
    590              if(data[0]!=len) return;
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   E9           MOV     A,R1
   \   000022   68           XRL     A,R0
   \   000023   6003         JZ      $+5
   \   000025   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    591          
    592              //Ð£ÑéºÍ²»Ò»ÖÂ
    593              dataLen=data[0]-2;
    594              if(data[1]!=CheckSum(&data[2], dataLen)) return;
   \   000028   EE           MOV     A,R6
   \   000029   2402         ADD     A,#0x2
   \   00002B   F5..         MOV     ?V0 + 4,A
   \   00002D   EF           MOV     A,R7
   \   00002E   3400         ADDC    A,#0x0
   \   000030   F5..         MOV     ?V0 + 5,A
   \   000032                ; Setup parameters for call to function CheckSum
   \   000032   74FE         MOV     A,#-0x2
   \   000034   28           ADD     A,R0
   \   000035   F9           MOV     R1,A
   \   000036   0A           INC     R2
   \   000037   0A           INC     R2
   \   000038   AB..         MOV     R3,?V0 + 5
   \   00003A   12....       LCALL   ??CheckSum?relay
   \   00003D   E9           MOV     A,R1
   \   00003E   F8           MOV     R0,A
   \   00003F   8E82         MOV     DPL,R6
   \   000041   8F83         MOV     DPH,R7
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   68           XRL     A,R0
   \   000046   6003         JZ      $+5
   \   000048   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    595          
    596              //¹¦ÄÜÂë
    597              fc=data[2];
    598          
    599              //·Ö·¢´¦Àí
    600              switch(fc)
   \   00004B   EE           MOV     A,R6
   \   00004C   2404         ADD     A,#0x4
   \   00004E   F5..         MOV     ?V0 + 2,A
   \   000050   EF           MOV     A,R7
   \   000051   3400         ADDC    A,#0x0
   \   000053   F5..         MOV     ?V0 + 3,A
   \   000055   85..82       MOV     DPL,?V0 + 4
   \   000058   85..83       MOV     DPH,?V0 + 5
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   14           DEC     A
   \   00005D   6010         JZ      ??ParseframeData_1
   \   00005F   24FD         ADD     A,#-0x3
   \   000061   601A         JZ      ??ParseframeData_2
   \   000063   14           DEC     A
   \   000064   604D         JZ      ??ParseframeData_3
   \   000066   14           DEC     A
   \   000067   7003         JNZ     $+5
   \   000069   02....       LJMP    ??ParseframeData_4 & 0xFFFF
   \   00006C   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    601              {
    602                  case FUN_CODE_CHECK_ALL_DATA://È¡ËùÓÐ´«¸ÐÆ÷Êý¾Ý
    603                      packDataAndSend(FUN_CODE_UPDATA_ALL_DATA, (uint8*)&endDevInfo, sizeof(DeviceDataInfo));
   \                     ??ParseframeData_1:
   \   00006F                ; Setup parameters for call to function packDataAndSend
   \   00006F   7C1E         MOV     R4,#0x1e
   \   000071   7A..         MOV     R2,#endDevInfo & 0xff
   \   000073   7B..         MOV     R3,#(endDevInfo >> 8) & 0xff
   \   000075   7902         MOV     R1,#0x2
   \   000077   12....       LCALL   ??packDataAndSend?relay
    604                      break;
   \   00007A   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    605          
    606                  case ZIGBEE_FUN_CODE_CTRL_LAMP://¿ØÖÆÖÕ¶ËÉÏµÆ,
    607                      addr=data[3];
   \                     ??ParseframeData_2:
   \   00007D   8E82         MOV     DPL,R6
   \   00007F   8F83         MOV     DPH,R7
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   FE           MOV     R6,A
    608                      if(addr>MAX_DEVICE) break;
   \   000086   C3           CLR     C
   \   000087   9407         SUBB    A,#0x7
   \   000089   4003         JC      $+5
   \   00008B   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    609                      if(addr==0) break;
   \   00008E   EE           MOV     A,R6
   \   00008F   7003         JNZ     $+5
   \   000091   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    610                      
    611                      sendDataToEnd(endDevAddr[addr-1],SAMPLEAPP_END2,&data[4],1);//µÆ½ÓÔÚÖÕ¶Ë2ÉÏ
   \   000094                ; Setup parameters for call to function sendDataToEnd
   \   000094   78..         MOV     R0,#?V0 + 2
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   7901         MOV     R1,#0x1
   \   00009B   7C03         MOV     R4,#0x3
   \   00009D   7D00         MOV     R5,#0x0
   \   00009F   EE           MOV     A,R6
   \   0000A0   C3           CLR     C
   \   0000A1   33           RLC     A
   \   0000A2   FA           MOV     R2,A
   \   0000A3   E4           CLR     A
   \   0000A4   33           RLC     A
   \   0000A5   FB           MOV     R3,A
   \   0000A6   74..         MOV     A,#(endDevAddr + 254) & 0xff
   \   0000A8   2A           ADD     A,R2
   \   0000A9   F582         MOV     DPL,A
   \   0000AB   74..         MOV     A,#((endDevAddr - 2) >> 8) & 0xff
   \   0000AD   3B           ADDC    A,R3
   \   0000AE   F583         MOV     DPH,A
   \   0000B0   02....       LJMP    ??ParseframeData_5 & 0xFFFF
    612                      break;
    613                  case ZIGBEE_FUN_CODE_STEP://¿ØÖÆÖÕ¶ËÉÏµÄ²½½øµç»ú
    614                      addr=data[3];
   \                     ??ParseframeData_3:
   \   0000B3   8E82         MOV     DPL,R6
   \   0000B5   8F83         MOV     DPH,R7
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   FE           MOV     R6,A
    615                      if(addr>MAX_DEVICE) break;
   \   0000BC   C3           CLR     C
   \   0000BD   9407         SUBB    A,#0x7
   \   0000BF   4003         JC      $+5
   \   0000C1   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    616                      if(addr==0) break;
   \   0000C4   EE           MOV     A,R6
   \   0000C5   7003         JNZ     $+5
   \   0000C7   02....       LJMP    ??ParseframeData_0 & 0xFFFF
    617          
    618                     {
    619                      uint8 buff[30]={0};    
   \   0000CA   85..82       MOV     DPL,?XSP + 0
   \   0000CD   85..83       MOV     DPH,?XSP + 1
   \   0000D0   AC82         MOV     R4,DPL
   \   0000D2   AD83         MOV     R5,DPH
   \   0000D4   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   0000D7   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   0000DA   741E         MOV     A,#0x1e
   \   0000DC   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    620          
    621                      //·§Öµ
    622                      sprintf(buff, "%02d,%04x", addr,endDevAddr[addr-1]);
                                     ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   0000DF   8E82         MOV     DPL,R6
   \   0000E1   8582..       MOV     ?V0 + 4,DPL
   \   0000E4   F5..         MOV     ?V0 + 5,A
   \   0000E6   EE           MOV     A,R6
   \   0000E7   C3           CLR     C
   \   0000E8   33           RLC     A
   \   0000E9   F8           MOV     R0,A
   \   0000EA   E4           CLR     A
   \   0000EB   33           RLC     A
   \   0000EC   F9           MOV     R1,A
   \   0000ED   74..         MOV     A,#(endDevAddr + 254) & 0xff
   \   0000EF   28           ADD     A,R0
   \   0000F0   FE           MOV     R6,A
   \   0000F1   74..         MOV     A,#((endDevAddr - 2) >> 8) & 0xff
   \   0000F3   39           ADDC    A,R1
   \   0000F4   FF           MOV     R7,A
   \   0000F5                ; Setup parameters for call to function sprintf
   \   0000F5   8E82         MOV     DPL,R6
   \   0000F7   8F83         MOV     DPH,R7
   \   0000F9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000FC   78..         MOV     R0,#?V0 + 4
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000101   7C..         MOV     R4,#`?<Constant "%02d,%04x">` & 0xff
   \   000103   7D..         MOV     R5,#(`?<Constant "%02d,%04x">` >> 8) & 0xff
   \   000105   7404         MOV     A,#0x4
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   AA82         MOV     R2,DPL
   \   00010C   AB83         MOV     R3,DPH
   \   00010E   12....       LCALL   ??sprintf?relay
   \   000111   7404         MOV     A,#0x4
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
    623                      HalLcdWriteString( buff, HAL_LCD_LINE_3 );
                                                ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000116                ; Setup parameters for call to function HalLcdWriteString
   \   000116   7903         MOV     R1,#0x3
   \   000118   85..82       MOV     DPL,?XSP + 0
   \   00011B   85..83       MOV     DPH,?XSP + 1
   \   00011E   AA82         MOV     R2,DPL
   \   000120   AB83         MOV     R3,DPH
   \   000122   12....       LCALL   ??HalLcdWriteString?relay
    624          
    625                      }
    626                     
    627                      sendDataToEnd(endDevAddr[addr-1], SAMPLEAPP_END4,&data[4],1);//²½½øµç»ú½ÓÔÚÖÕ¶Ë4ÉÏ
   \   000125                ; Setup parameters for call to function sendDataToEnd
   \   000125   78..         MOV     R0,#?V0 + 2
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012A   7901         MOV     R1,#0x1
   \   00012C   7C05         MOV     R4,#0x5
   \   00012E   8079         SJMP    ??ParseframeData_6
    628                      break;
    629                  case ZIGBEE_FUN_CODE_END1:
    630                      
    631                      addr=data[3];
   \                     ??ParseframeData_4:
   \   000130   8E82         MOV     DPL,R6
   \   000132   8F83         MOV     DPH,R7
   \   000134   A3           INC     DPTR
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   E0           MOVX    A,@DPTR
   \   000138   FE           MOV     R6,A
    632                      if(addr>MAX_DEVICE) break;
   \   000139   C3           CLR     C
   \   00013A   9407         SUBB    A,#0x7
   \   00013C   507E         JNC     ??ParseframeData_0
    633                      if(addr==0) break;
   \   00013E   EE           MOV     A,R6
   \   00013F   607B         JZ      ??ParseframeData_0
    634          
    635                     {
    636                      uint8 buff[30]={0};    
   \   000141   85..82       MOV     DPL,?XSP + 0
   \   000144   85..83       MOV     DPH,?XSP + 1
   \   000147   AC82         MOV     R4,DPL
   \   000149   AD83         MOV     R5,DPH
   \   00014B   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   00014E   7582..       MOV     DPL,#`?<Constant {0}>_2` & 0xff
   \   000151   741E         MOV     A,#0x1e
   \   000153   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    637          
    638                      //·§Öµ
    639                      sprintf(buff, "%02d,%04x", addr,endDevAddr[addr-1]);
                                     ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000156   8E82         MOV     DPL,R6
   \   000158   8582..       MOV     ?V0 + 4,DPL
   \   00015B   F5..         MOV     ?V0 + 5,A
   \   00015D   EE           MOV     A,R6
   \   00015E   C3           CLR     C
   \   00015F   33           RLC     A
   \   000160   F8           MOV     R0,A
   \   000161   E4           CLR     A
   \   000162   33           RLC     A
   \   000163   F9           MOV     R1,A
   \   000164   74..         MOV     A,#(endDevAddr + 254) & 0xff
   \   000166   28           ADD     A,R0
   \   000167   F8           MOV     R0,A
   \   000168   74..         MOV     A,#((endDevAddr - 2) >> 8) & 0xff
   \   00016A   39           ADDC    A,R1
   \   00016B   F9           MOV     R1,A
   \   00016C   E8           MOV     A,R0
   \   00016D   FE           MOV     R6,A
   \   00016E   E9           MOV     A,R1
   \   00016F   FF           MOV     R7,A
   \   000170                ; Setup parameters for call to function sprintf
   \   000170   8E82         MOV     DPL,R6
   \   000172   8F83         MOV     DPH,R7
   \   000174   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000177   78..         MOV     R0,#?V0 + 4
   \   000179   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00017C   7C..         MOV     R4,#`?<Constant "%02d,%04x">` & 0xff
   \   00017E   7D..         MOV     R5,#(`?<Constant "%02d,%04x">` >> 8) & 0xff
   \   000180   7404         MOV     A,#0x4
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   AA82         MOV     R2,DPL
   \   000187   AB83         MOV     R3,DPH
   \   000189   12....       LCALL   ??sprintf?relay
   \   00018C   7404         MOV     A,#0x4
   \   00018E   12....       LCALL   ?DEALLOC_XSTACK8
    640                      HalLcdWriteString( buff, HAL_LCD_LINE_3 );
                                                ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000191                ; Setup parameters for call to function HalLcdWriteString
   \   000191   7903         MOV     R1,#0x3
   \   000193   85..82       MOV     DPL,?XSP + 0
   \   000196   85..83       MOV     DPH,?XSP + 1
   \   000199   AA82         MOV     R2,DPL
   \   00019B   AB83         MOV     R3,DPH
   \   00019D   12....       LCALL   ??HalLcdWriteString?relay
    641          
    642                      }
    643                    sendDataToEnd(endDevAddr[addr-1], SAMPLEAPP_END1,&data[4],3);
   \   0001A0                ; Setup parameters for call to function sendDataToEnd
   \   0001A0   78..         MOV     R0,#?V0 + 2
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   7903         MOV     R1,#0x3
   \   0001A7   7C02         MOV     R4,#0x2
   \                     ??ParseframeData_6:
   \   0001A9   7D00         MOV     R5,#0x0
   \   0001AB   8E82         MOV     DPL,R6
   \   0001AD   8F83         MOV     DPH,R7
   \                     ??ParseframeData_5:
   \   0001AF   E0           MOVX    A,@DPTR
   \   0001B0   FA           MOV     R2,A
   \   0001B1   A3           INC     DPTR
   \   0001B2   E0           MOVX    A,@DPTR
   \   0001B3   FB           MOV     R3,A
   \   0001B4   12....       LCALL   ??sendDataToEnd?relay
   \   0001B7   7402         MOV     A,#0x2
   \   0001B9   12....       LCALL   ?DEALLOC_XSTACK8
    644                      break;
    645                  default:
    646                      break;
    647              }
   \                     ??ParseframeData_0:
   \   0001BC   02....       LJMP    ?Subroutine2 & 0xFFFF
    648          }
    649          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    650          void sendDataToEnd(uint16 shortAddr, uint16 clusterId, uint8* data, uint8 len)
   \                     sendDataToEnd:
    651          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7418         MOV     A,#0x18
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine8 & 0xFFFF
    652              afAddrType_t Tx_DstAddr;
    653          
    654              if(shortAddr==0)
   \                     ??CrossCallReturnLabel_10:
   \   000014   EA           MOV     A,R2
   \   000015   4B           ORL     A,R3
   \   000016   7016         JNZ     ??sendDataToEnd_0
    655              {
    656                  //Èç¹ûÃ»ÓÐ¶ÌµØÖ·£¬Ê¹ÓÃ¹ã²¥
    657                  Tx_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000018   7408         MOV     A,#0x8
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   740F         MOV     A,#0xf
   \   00001F   F0           MOVX    @DPTR,A
    658                  Tx_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000020   7409         MOV     A,#0x9
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine6 & 0xFFFF
    659                  Tx_DstAddr.addr.shortAddr = 0xffff;            //¹ã²¥
    660              }
   \                     ??CrossCallReturnLabel_19:
   \   000028   74FF         MOV     A,#-0x1
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   8014         SJMP    ??sendDataToEnd_1
    661              else
    662              {
    663                  //µã²¥
    664                  Tx_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??sendDataToEnd_0:
   \   00002E   7408         MOV     A,#0x8
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7402         MOV     A,#0x2
   \   000035   F0           MOVX    @DPTR,A
    665                  Tx_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000036   7409         MOV     A,#0x9
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   12....       LCALL   ?Subroutine6 & 0xFFFF
    666                  Tx_DstAddr.addr.shortAddr = shortAddr;           //µã²¥
    667              }
   \                     ??CrossCallReturnLabel_20:
   \   00003E   EA           MOV     A,R2
   \   00003F   F0           MOVX    @DPTR,A
   \   000040   A3           INC     DPTR
   \   000041   EB           MOV     A,R3
   \                     ??sendDataToEnd_1:
   \   000042   F0           MOVX    @DPTR,A
    668          
    669          
    670          
    671              if ( AF_DataRequest( &Tx_DstAddr, &SampleApp_epDesc,
    672                                 clusterId,
    673                                 len,
    674                                 data,
    675                                 &SampleApp_TransID,
    676                                 AF_DISCV_ROUTE,
    677                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000043                ; Setup parameters for call to function AF_DataRequest
   \   000043   75..1E       MOV     ?V0 + 2,#0x1e
   \   000046   78..         MOV     R0,#?V0 + 2
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004B   75....       MOV     ?V0 + 2,#SampleApp_TransID & 0xff
   \   00004E   75....       MOV     ?V0 + 3,#(SampleApp_TransID >> 8) & 0xff
   \   000051   78..         MOV     R0,#?V0 + 2
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   8E..         MOV     ?V0 + 0,R6
   \   00005D   75..00       MOV     ?V0 + 1,#0x0
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000065   8C..         MOV     ?V0 + 0,R4
   \   000067   8D..         MOV     ?V0 + 1,R5
   \   000069   78..         MOV     R0,#?V0 + 0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006E   7920         MOV     R1,#0x20
   \   000070   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000072   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000074   7409         MOV     A,#0x9
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   12....       LCALL   ??AF_DataRequest?relay
   \   000080   7409         MOV     A,#0x9
   \   000082   12....       LCALL   ?DEALLOC_XSTACK8
    678              {
    679              }
    680              else
    681              {
    682              // Error occurred in request to send.
    683              }
    684          }
   \   000085   740C         MOV     A,#0xc
   \   000087   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008A   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7414         MOV     A,#0x14
   \   000002                REQUIRE ??Subroutine13_0
   \   000002                ; // Fall through to label ??Subroutine13_0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CheckSum?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CheckSum

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packDataAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packDataAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_CallBack?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_CallBack

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??unpackData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    unpackData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ParseframeData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ParseframeData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??sendDataToEnd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendDataToEnd

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp_Init">`:
   \   000000   53616D70     DB "SampleApp_Init"
   \            6C654170
   \            705F496E
   \            697400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "7CCC8204">`:
   \   000000   37434343     DB "7CCC8204"
   \            38323034
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02d,%02x,%02x,%02d,%04x">`:
   \   000000   25303264     DB "%02d,%02x,%02x,%02d,%04x"
   \            2C253032
   \            782C2530
   \            32782C25
   \            3032642C
   \            25303478
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%02d,%04x">`:
   \   000000   25303264     DB "%02d,%04x"
   \            2C253034
   \            7800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      
    685          
    686          /*********************************************************************
    687          *********************************************************************/

   Maximum stack usage in bytes:

     Function                    ISTACK PSTACK XSTACK
     --------                    ------ ------ ------
     CheckSum                        0      0     54
     ParseframeData                  2      0     57
       -> CheckSum                   0      0     88
       -> packDataAndSend            0      0     88
       -> sendDataToEnd              0      0     92
       -> sprintf                    0      0     96
       -> HalLcdWriteString          0      0     88
       -> sendDataToEnd              0      0     92
       -> sprintf                    0      0     96
       -> HalLcdWriteString          0      0     88
       -> sendDataToEnd              0      0     92
     SampleApp_HandleKeys            1      0     21
       -> packDataAndSend            0      0     18
       -> packDataAndSend            0      0     18
     SampleApp_Init                  0      0     14
       -> MT_UartInit                0      0     22
       -> MT_UartRegisterTaskID      0      0     22
       -> HalUARTWrite               0      0     22
       -> afRegister                 0      0     22
       -> RegisterForKeys            0      0     22
       -> osal_memcpy                0      0     28
       -> aps_AddGroup               0      0     22
       -> HalLcdWriteString          0      0     22
     SampleApp_MessageMSGCB          2      0     66
       -> sprintf                    0      0    108
       -> HalLcdWriteString          0      0     88
       -> packDataAndSend            0      0     88
       -> osal_memcpy                0      0     94
     SampleApp_ProcessEvent          0      0     12
       -> osal_msg_receive           0      0     24
       -> osal_msg_deallocate        0      0     24
       -> osal_msg_receive           0      0     24
       -> SampleApp_HandleKeys       0      0     24
       -> SampleApp_MessageMSGCB     0      0     24
       -> packDataAndSend            0      0     24
       -> osal_start_timerEx         0      0     24
     SerialApp_CallBack              0      0      9
       -> osal_memset                0      0     18
       -> HalUARTRead                0      0     18
       -> unpackData                 0      0     18
     packDataAndSend                 0      0     62
       -> osal_memset                0      0     30
       -> osal_memcpy                0      0     36
       -> CheckSum                   0      0     30
       -> HalUARTWrite               0      0     30
     sendDataToEnd                   0      0     79
       -> AF_DataRequest             0      0     66
     unpackData                      0      0     18
       -> ParseframeData             0      0     18


   Segment part sizes:

     Function/Label                         Bytes
     --------------                         -----
     SerialApp_RX_Buff                        81
     SerialApp_RX_Len                          1
     SerialApp_TX_Buff                        81
     SerialApp_TX_Len                          1
     SampleApp_ClusterList                    12
     SampleApp_SimpleDesc                     12
     SampleApp_epDesc                          6
     SampleApp_TaskID                          1
     SampleApp_NwkState                        1
     SampleApp_TransID                         1
     SampleApp_Periodic_DstAddr               12
     SampleApp_Flash_DstAddr                  12
     SampleApp_P2P_DstAddr                    12
     SampleApp_Group                          18
     SampleAppPeriodicCounter                  1
     SampleAppFlashCounter                     1
     endDevInfo                               30
     endDevAddr                               12
     SampleApp_Init                          198
     SampleApp_ProcessEvent                  149
     ?Subroutine0                              5
     SampleApp_HandleKeys                     95
     ?Subroutine1                              5
     ?Subroutine7                             11
     SampleApp_MessageMSGCB                  371
     ?Subroutine2                             10
     ?Subroutine9                              5
     ?Subroutine5                              7
     ?Subroutine11                             4
     ?Subroutine12                            14
     ?Subroutine4                              5
     ?Subroutine3                              5
     ?Subroutine10                             7
     ?Subroutine8                              8
     ??Subroutine13_0                          8
     CheckSum                                 39
     packDataAndSend                         117
     SerialApp_CallBack                       52
     unpackData                               20
     ParseframeData                          447
     sendDataToEnd                           141
     ?Subroutine6                              2
     ??SampleApp_Init?relay                    6
     ??SampleApp_ProcessEvent?relay            6
     ??SampleApp_HandleKeys?relay              6
     ??SampleApp_MessageMSGCB?relay            6
     ??CheckSum?relay                          6
     ??packDataAndSend?relay                   6
     ??SerialApp_CallBack?relay                6
     ??unpackData?relay                        6
     ??ParseframeData?relay                    6
     ??sendDataToEnd?relay                     6
     ?<Constant "SampleApp_Init">             15
     ?<Constant "Group 1">                     8
     ?<Constant "SampleApp">                  10
     ?<Constant "7CCC8204">                    9
     ?<Constant {0}>                          30
     ?<Constant "%02d,%02x,%02x,%02d,%04x">   25
     ?<Constant {0}>_1                        30
     ?<Constant "%02d,%04x">                  10
     ?<Constant {0}>_2                        30

 
 1 725 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
   191 bytes in segment XDATA_ROM_C
   271 bytes in segment XDATA_Z
 
 1 785 bytes of CODE  memory
   191 bytes of CONST memory
   271 bytes of XDATA memory

Errors: none
Warnings: 12
