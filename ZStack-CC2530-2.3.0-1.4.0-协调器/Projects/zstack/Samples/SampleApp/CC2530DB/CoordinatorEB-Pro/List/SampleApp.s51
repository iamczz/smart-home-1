///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        08/Nov/2015  17:40:39 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\Source\SampleApp.c                /
//    Command line       =  -f E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³ /
//                          \ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2530 /
//                          DB\f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f      /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ /
//                          f8wConfig.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0   /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFF00                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\work\zigbee\taobao\work /
//                          \WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­ /
//                          µ÷Æ÷\Projects\zstack\Samples\SampleApp\Source\Sam /
//                          pleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D  /
//                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                   /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\  /
//                          -lA E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ /
//                          ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\Li /
//                          st\ --diag_suppress Pe001,Pa010 -o                /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\   /
//                          -e --debug --core=plain --dptr=16,1               /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³ /
//                          \ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack /
//                          \Samples\SampleApp\CC2530DB\ -I                   /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\SOURCE\ -I            /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ /
//                           -I E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ /
//                          ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MT\ -I E:\work\zigbee\taobao\work\WIFI-ZigB /
//                          ee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Proje /
//                          cts\zstack\Samples\SampleApp\CC2530DB\..\..\..\.. /
//                          \..\COMPONENTS\HAL\INCLUDE\ -I                    /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\HAL\TARGET\CC2530EB\ -I                         /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\OSAL\MCU\CCSOC\ -I E:\work\zigbee\taobao\work\W /
//                          IFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷ /
//                          Æ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I           /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\AF\ -I E:\work\zigbee\taobao\work\WIFI-Zi /
//                          gBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Pro /
//                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ /
//                          ..\..\COMPONENTS\STACK\NWK\ -I                    /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\SEC\ -I E:\work\zigbee\taobao\work\WIFI-Z /
//                          igBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SAPI\ -I                  /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\STACK\SYS\ -I E:\work\zigbee\taobao\work\WIFI-Z /
//                          igBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Pr /
//                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\ZDO\ -I                   /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\ZMAC\F8W\ -I E:\work\zigbee\taobao\work\WIFI-Zi /
//                          gBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Pro /
//                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ /
//                          ..\..\COMPONENTS\ZMAC\ -I                         /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\SERVICES\SADDR\ -I E:\work\zigbee\taobao\work\W /
//                          IFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷ /
//                          Æ÷\Projects\zstack\Samples\SampleApp\CC2530DB\..\ /
//                          ..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I         /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\INCLUDE\ -I E:\work\zigbee\taobao\work\WIFI /
//                          -ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\ /
//                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ /
//                          ..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I            /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\LOW_LEVEL\srf04\ -I                         /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT /
//                          S\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz           /
//    List file          =  E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZS /
//                          tack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Sa /
//                          mples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\S /
//                          ampleApp.s51                                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??CheckSum?relay
        FUNCTION ??CheckSum?relay,0203H
        PUBLIC ??ParseframeData?relay
        FUNCTION ??ParseframeData?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SerialApp_CallBack?relay
        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC ??packDataAndSend?relay
        FUNCTION ??packDataAndSend?relay,0203H
        PUBLIC ??sendDataToEnd?relay
        FUNCTION ??sendDataToEnd?relay,0203H
        PUBLIC ??unpackData?relay
        FUNCTION ??unpackData?relay,0203H
        PUBLIC CheckSum
        FUNCTION CheckSum,0203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ParseframeData
        FUNCTION ParseframeData,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 48, STACK
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 54, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC SerialApp_CallBack
        FUNCTION SerialApp_CallBack,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC endDevAddr
        PUBLIC endDevInfo
        PUBLIC packDataAndSend
        FUNCTION packDataAndSend,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        PUBLIC sendDataToEnd
        FUNCTION sendDataToEnd,021203H
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC unpackData
        FUNCTION unpackData,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
HalUARTWrite        SYMBOL "HalUARTWrite"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
sprintf             SYMBOL "sprintf"
osal_memset         SYMBOL "osal_memset"
HalUARTRead         SYMBOL "HalUARTRead"
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
CheckSum            SYMBOL "CheckSum"
??CheckSum?relay    SYMBOL "?relay", CheckSum
ParseframeData      SYMBOL "ParseframeData"
??ParseframeData?relay SYMBOL "?relay", ParseframeData
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SerialApp_CallBack  SYMBOL "SerialApp_CallBack"
??SerialApp_CallBack?relay SYMBOL "?relay", SerialApp_CallBack
packDataAndSend     SYMBOL "packDataAndSend"
??packDataAndSend?relay SYMBOL "?relay", packDataAndSend
sendDataToEnd       SYMBOL "sendDataToEnd"
??sendDataToEnd?relay SYMBOL "?relay", sendDataToEnd
unpackData          SYMBOL "unpackData"
??unpackData?relay  SYMBOL "?relay", unpackData

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H

// E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-Ð­µ÷Æ÷\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "MT_UART.h"
//   75 #include "MT_APP.h"
//   76 #include "MT.h"
//   77 #include "stdio.h"
//   78 
//   79 /*********************************************************************
//   80  * MACROS
//   81  */
//   82 
//   83 
//   84 #if !defined( SERIAL_APP_PORT )
//   85 #define SERIAL_APP_PORT  0
//   86 #endif
//   87 
//   88 
//   89 
//   90 //½Ó½Ð´®¿ÚÊý¾Ý»º³å
//   91 #define SERIAL_APP_RX_MAX  80

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 static uint8 SerialApp_RX_Buff[SERIAL_APP_RX_MAX+1];
SerialApp_RX_Buff:
        DS 81
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   93 static uint8 SerialApp_RX_Len;
SerialApp_RX_Len:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   94 
//   95 //½âÎö´®¿ÚÊý¾ÝµÄ»º³å
//   96 #define SERIAL_APP_PARSE_MAX  80
//   97 static uint8 SerialApp_PARSE_Buff[SERIAL_APP_PARSE_MAX+1];
//   98 static uint8 SerialApp_PARSE_Len;
//   99 
//  100 //·¢ËÍµÄÊý¾Ý³¤¶È
//  101 #define SERIAL_APP_TX_MAX  80

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  102 static uint8 SerialApp_TX_Buff[SERIAL_APP_TX_MAX+1];
SerialApp_TX_Buff:
        DS 81
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  103 static uint8 SerialApp_TX_Len;
SerialApp_TX_Len:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  104 
//  105 
//  106 /*********************************************************************
//  107  * CONSTANTS
//  108  */
//  109 
//  110 /*********************************************************************
//  111  * TYPEDEFS
//  112  */
//  113 
//  114 /*********************************************************************
//  115  * GLOBAL VARIABLES
//  116  */
//  117 
//  118 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  119 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
        DW 5
        DW 6
//  120 {
//  121   SERIALAPP_CONNECTREQ_CLUSTER,//ÓÃÓÚÉÏ´«ÖÕ¶Ë¶ÌµØÖ·
//  122   SAMPLEAPP_END1,
//  123   SAMPLEAPP_END2,
//  124   SAMPLEAPP_END3,
//  125   SAMPLEAPP_END4,
//  126   SAMPLEAPP_END5
//  127 };
//  128 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  129 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 6
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 6
        DATA16
        DW SampleApp_ClusterList
//  130 {
//  131   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  132   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  133   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  134   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  135   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  136   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  137   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  138   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  139   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  140 };
//  141 
//  142 // This is the Endpoint/Interface description.  It is defined here, but
//  143 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  144 // in the structure here and make it a "const" (in code space).  The
//  145 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  147 
//  148 /*********************************************************************
//  149  * EXTERNAL VARIABLES
//  150  */
//  151 
//  152 /*********************************************************************
//  153  * EXTERNAL FUNCTIONS
//  154  */
//  155 
//  156 /*********************************************************************
//  157  * LOCAL VARIABLES
//  158  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  159 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  160                           // This variable will be received when
//  161                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  162 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  163 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  165 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  168 afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  169 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  170 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  171 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  172 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  173 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  174 
//  175 
//  176 //Ð­µ÷Æ÷±£´æËùÓÐÖÕ¶ËµÄÊý¾Ý

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  177 DeviceDataInfo  endDevInfo;
endDevInfo:
        DS 30
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  178 uint16 endDevAddr[MAX_DEVICE]={0};
endDevAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  179 
//  180 /*********************************************************************
//  181  * LOCAL FUNCTIONS
//  182  */
//  183 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  184 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  185 void SampleApp_SendPeriodicMessage( void );
//  186 void SerialApp_CallBack(uint8 port, uint8 event);
//  187 void unpackData(uint8* data, uint8 len);
//  188 void ParseframeData(uint8* data, uint8 len);
//  189 void packDataAndSend(uint8 fc, uint8* data, uint8 len);
//  190 void sendDataToEnd(uint16 shortAddr, uint16 clusterId, uint8* data, uint8 len);
//  191 
//  192 /*********************************************************************
//  193  * NETWORK LAYER CALLBACKS
//  194  */
//  195 
//  196 /*********************************************************************
//  197  * PUBLIC FUNCTIONS
//  198  */
//  199 
//  200 /*********************************************************************
//  201  * @fn      SampleApp_Init
//  202  *
//  203  * @brief   Initialization function for the Generic App Task.
//  204  *          This is called during initialization and should contain
//  205  *          any application specific initialization (ie. hardware
//  206  *          initialization/setup, table initialization, power up
//  207  *          notificaiton ... ).
//  208  *
//  209  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  210  *                    used to send messages and set timers.
//  211  *
//  212  * @return  none
//  213  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  215 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  216   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  217   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  218   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  219   
//  220   MT_UartInit();                  //´®¿Ú³õÊ¼»¯
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  221   MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  222     HalUARTWrite(0,"SampleApp_Init", 14);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "SampleApp_Init">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp_Init">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  223 
//  224   
//  225   // Device hardware initialization can be added here or in main() (Zmain.c).
//  226   // If the hardware is application specific - add it here.
//  227   // If the hardware is other parts of the device add it in main().
//  228 
//  229  #if defined ( BUILD_ALL_DEVICES )
//  230   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  231   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  232   // together - if they are - we will start up a coordinator. Otherwise,
//  233   // the device will start as a router.
//  234   if ( readCoordinatorJumper() )
//  235     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;dd
//  236   else
//  237     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  238 #endif // BUILD_ALL_DEVICES
//  239 
//  240 #if defined ( HOLD_AUTO_START )
//  241   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  242   //  from starting the device and wait for the application to
//  243   //  start the device.
//  244   ZDOInitDevice(0);ee
//  245 #endif
//  246 
//  247   // Setup for the periodic message's destination address
//  248   // Broadcast to everyone
//  249   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  250   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  251   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  252 
//  253   // Setup for the flash command's destination address - Group 1
//  254   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  255   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  256   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  257   
//  258   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  259   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  260   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  261 
//  262   // Fill out the endpoint description.
//  263   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  264   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  265   SampleApp_epDesc.simpleDesc
//  266             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  267   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  268 
//  269   // Register the endpoint description with the AF
//  270   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  271 
//  272   // Register for all key events - This app will handle all key events
//  273   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  274 
//  275   // By default, all devices start out in Group 1
//  276   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  277   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  278   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  279 
//  280 #if defined ( LCD_SUPPORTED )
//  281   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  282 #endif
//  283 }
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
//  284 
//  285 /*********************************************************************
//  286  * @fn      SampleApp_ProcessEvent
//  287  *
//  288  * @brief   Generic Application Task event processor.  This function
//  289  *          is called to process all events for the task.  Events
//  290  *          include timers, messages and any other user defined events.
//  291  *
//  292  * @param   task_id  - The OSAL assigned task ID.
//  293  * @param   events - events to process.  This is a bit map and can
//  294  *                   contain more than one event.
//  295  *
//  296  * @return  none
//  297  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  298 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  299 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_MessageMSGCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, packDataAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  300   afIncomingMSGPacket_t *MSGpkt;
//  301   (void)task_id;  // Intentionally unreferenced parameter
//  302 
//  303   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  304   {
//  305     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  306     while ( MSGpkt )
//  307     {
//  308       switch ( MSGpkt->hdr.event )
//  309       {
//  310         // Received when a key is pressed
//  311         case KEY_CHANGE:
//  312           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  313           break;
//  314 
//  315         // Received when a messages is received (OTA) for this endpoint
//  316         case AF_INCOMING_MSG_CMD:
//  317           SampleApp_MessageMSGCB( MSGpkt );
//  318           break;
//  319 
//  320         // Received whenever the device changes state in the network
//  321         case ZDO_STATE_CHANGE:
//  322           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  323           if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  324                  (SampleApp_NwkState == DEV_ROUTER)
//  325               || (SampleApp_NwkState == DEV_END_DEVICE) )
//  326           {
//  327           }
//  328           else
//  329           {
//  330             // Device is no longer in the network
//  331           }
//  332           break;
//  333 
//  334         default:
//  335           break;
//  336       }
//  337 
//  338       // Release the memory
//  339       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  340 
//  341       // Next - if one is available
//  342       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??SampleApp_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SampleApp_ProcessEvent_5
        ADD     A,#0x5a
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_3
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??SampleApp_ProcessEvent_3
??SampleApp_ProcessEvent_5:
        ; Setup parameters for call to function SampleApp_MessageMSGCB
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??SampleApp_MessageMSGCB?relay
        SJMP    ??SampleApp_ProcessEvent_3
//  343     }
//  344 
//  345     // return unprocessed events
//  346     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_7
//  347   }
//  348 
//  349   // Send a message out - This event is generated by a timer
//  350   //  (setup in SampleApp_Init()).
//  351   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_8
//  352   {
//  353 
//  354     packDataAndSend(FUN_CODE_UPDATA_ALL_DATA, (uint8*)&endDevInfo, sizeof(DeviceDataInfo));
        ; Setup parameters for call to function packDataAndSend
        MOV     R4,#0x1e
        MOV     R2,#endDevInfo & 0xff
        MOV     R3,#(endDevInfo >> 8) & 0xff
        MOV     R1,#0x2
        LCALL   ??packDataAndSend?relay
//  355   
//  356     osal_start_timerEx( SampleApp_TaskID,
//  357                   SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  358                   SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  359 
//  360     
//  361     // return unprocessed events
//  362     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,?V0 + 0
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??SampleApp_ProcessEvent_7
//  363   }
//  364 
//  365   // Discard unknown events
//  366   return 0;
??SampleApp_ProcessEvent_8:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock1
??SampleApp_ProcessEvent_7:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  367 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  368 
//  369 /*********************************************************************
//  370  * Event Generation Functions
//  371  */
//  372 /*********************************************************************
//  373  * @fn      SampleApp_HandleKeys
//  374  *
//  375  * @brief   Handles all key events for this device.
//  376  *
//  377  * @param   shift - true if in shift/alt.
//  378  * @param   keys - bit field for key events. Valid entries:
//  379  *                 HAL_KEY_SW_2
//  380  *                 HAL_KEY_SW_1
//  381  *
//  382  * @return  none
//  383  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  384 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  385 {
        FUNCALL SampleApp_HandleKeys, packDataAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, packDataAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  386   (void)shift;  // Intentionally unreferenced parameter
//  387   
//  388   if ( keys & HAL_KEY_SW_1 )
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_HandleKeys_0
//  389   {
//  390     /* This key sends the Flash Command is sent to Group 1.
//  391      * This device will not receive the Flash Command from this
//  392      * device (even if it belongs to group 1).
//  393      */
//  394         packDataAndSend(FUN_CODE_UPDATA_RFID, "7CCC8204", 8);
        ; Setup parameters for call to function packDataAndSend
        MOV     R4,#0x8
        MOV     R2,#`?<Constant "7CCC8204">` & 0xff
        MOV     R3,#(`?<Constant "7CCC8204">` >> 8) & 0xff
        MOV     R1,#0x3
        LCALL   ??packDataAndSend?relay
//  395   }
//  396 
//  397   if ( keys & HAL_KEY_SW_6 )
??SampleApp_HandleKeys_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.5
        JNC     ??SampleApp_HandleKeys_1
//  398   {
//  399     /* The Flashr Command is sent to Group 1.
//  400      * This key toggles this device in and out of group 1.
//  401      * If this device doesn't belong to group 1, this application
//  402      * will not receive the Flash command sent to group 1.
//  403      */
//  404     int i;
//  405     
//  406     endDevInfo.end1_light=1;
        MOV     DPTR,#endDevInfo
        MOV     A,#0x1
        LCALL   ?Subroutine7 & 0xFFFF
//  407     endDevInfo.end1_temp=2;
//  408     endDevInfo.end1_hum=3;
//  409 
//  410 
//  411     endDevInfo.end2_people=4;
//  412     endDevInfo.end2_mq2=5;
??CrossCallReturnLabel_6:
        INC     DPTR
        INC     A
        LCALL   ?Subroutine7 & 0xFFFF
//  413     endDevInfo.end2_temp=6;
//  414     endDevInfo.end2_hum=7;
//  415     endDevInfo.end2_lamp=8;
//  416 
//  417     for(i=0; i<22; i++)
??CrossCallReturnLabel_7:
        MOV     R0,#0x0
        MOV     R1,#0x0
//  418     {
//  419         endDevInfo.gpsData[i]=9+i;
??SampleApp_HandleKeys_2:
        MOV     A,R0
        ADD     A,#0x9
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#(endDevInfo + 8) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((endDevInfo + 8) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  420     }
        MOV     A,R0
        ADD     A,#0x1
        INC     R0
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x16
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??SampleApp_HandleKeys_2
//  421 
//  422     packDataAndSend(FUN_CODE_UPDATA_ALL_DATA, (uint8*)&endDevInfo, 30);
        ; Setup parameters for call to function packDataAndSend
        MOV     R4,#0x1e
        MOV     R2,#endDevInfo & 0xff
        MOV     R3,#(endDevInfo >> 8) & 0xff
        MOV     R1,#0x2
        LCALL   ??packDataAndSend?relay
        CFI EndBlock cfiBlock3
//  423 
//  424   }
//  425 }
??SampleApp_HandleKeys_1:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond5 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI Block cfiCond6 Using cfiCommon0
        CFI (cfiCond6) NoFunction
        CFI (cfiCond6) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond6) CFA_SP SP+0
        CFI (cfiCond6) CFA_XSP16 add(XSP16, 9)
        CFI Block cfiPicker7 Using cfiCommon1
        CFI (cfiPicker7) NoFunction
        CFI (cfiPicker7) Picker
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond5
        CFI EndBlock cfiCond6
        CFI EndBlock cfiPicker7
//  426 
//  427 
//  428 
//  429 /*********************************************************************
//  430  * @fn      SampleApp_MessageMSGCB
//  431  *
//  432  * @brief   Data message processor callback.  This function processes
//  433  *          any incoming data - probably from other devices.  So, based
//  434  *          on cluster ID, perform the intended action.
//  435  *
//  436  * @param   none
//  437  *
//  438  * @return  none
//  439  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  440 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  441 {
        FUNCALL SampleApp_MessageMSGCB, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 54, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 54, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, packDataAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_MessageMSGCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  442     uint16 flashTime;
//  443 
//  444     switch ( pkt->clusterId )
        MOV     A,R2
        ADD     A,#0x21
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SampleApp_MessageMSGCB>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        5
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_3
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_4
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SampleApp_MessageMSGCB_5
        CODE
//  445     {
//  446         case SERIALAPP_CONNECTREQ_CLUSTER://±£´æÖÕ¶ËµÄ¶ÌµØÖ·
//  447             uint8 addr=pkt->cmd.Data[0]-1;
??SampleApp_MessageMSGCB_1:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        DEC     A
        MOV     R0,A
//  448             if(addr>=MAX_DEVICE) break;
        CLR     C
        SUBB    A,#0x6
        JC      $+5
        LJMP    ??SampleApp_MessageMSGCB_0 & 0xFFFF
//  449             endDevAddr[addr]=BUILD_UINT16(pkt->cmd.Data[2], pkt->cmd.Data[1]);
        MOV     DPL,R0
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,#0x0
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#endDevAddr & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(endDevAddr >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     DPL,R2
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        MOV     DPL,R4
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,?V0 + 4
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ??Subroutine13_0 & 0xFFFF
//  450 
//  451             {
//  452                 uint8 buff[30]={0};    
??CrossCallReturnLabel_21:
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  453 
//  454                 //·§Öµ
//  455                 sprintf(buff, "%02d,%02x,%02x,%02d,%04x", 
//  456                 pkt->cmd.Data[0],pkt->cmd.Data[1],pkt->cmd.Data[2],addr,endDevAddr[addr]);
        ; Setup parameters for call to function sprintf
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 50)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 52)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 54)
        MOV     R4,#`?<Constant "%02d,%02x,%02x,%02d,%04x">` & 0xff
        MOV     R5,#(`?<Constant "%02d,%02x,%02x,%02d,%04x">` >> 8) & 0xff
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  457                 HalLcdWriteString( buff, HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  458             }
//  459             
//  460         break;
        SJMP    ??SampleApp_MessageMSGCB_0
//  461         case SAMPLEAPP_END1:
//  462             endDevInfo.end1_temp=pkt->cmd.Data[1];//ÎÂ¶È
??SampleApp_MessageMSGCB_2:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     DPTR,#endDevInfo + 1
        LCALL   ?Subroutine5 & 0xFFFF
//  463             endDevInfo.end1_hum=pkt->cmd.Data[2];//Êª¶È
??CrossCallReturnLabel_4:
        MOV     DPTR,#endDevInfo + 2
        LCALL   ?Subroutine3 & 0xFFFF
//  464             endDevInfo.end1_light=pkt->cmd.Data[3];  //¹âÕÕ              
??CrossCallReturnLabel_0:
        MOV     DPTR,#endDevInfo
??SampleApp_MessageMSGCB_6:
        MOVX    @DPTR,A
//  465         break;
        SJMP    ??SampleApp_MessageMSGCB_0
//  466         case SAMPLEAPP_END2:
//  467             endDevInfo.end2_temp=pkt->cmd.Data[1]; //ÎÂ¶È
??SampleApp_MessageMSGCB_3:
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     DPTR,#endDevInfo + 5
        LCALL   ?Subroutine5 & 0xFFFF
//  468             endDevInfo.end2_hum=pkt->cmd.Data[2]; //Êª¶È
??CrossCallReturnLabel_5:
        MOV     DPTR,#endDevInfo + 6
        LCALL   ?Subroutine3 & 0xFFFF
//  469             endDevInfo.end2_mq2=pkt->cmd.Data[3];//ÆøÌå
??CrossCallReturnLabel_1:
        MOV     DPTR,#endDevInfo + 4
        LCALL   ?Subroutine4 & 0xFFFF
//  470             endDevInfo.end2_people=pkt->cmd.Data[4]; //ÈËÌå
??CrossCallReturnLabel_2:
        MOVX    A,@DPTR
        MOV     DPTR,#endDevInfo + 3
        LCALL   ?Subroutine4 & 0xFFFF
//  471             endDevInfo.end2_lamp=pkt->cmd.Data[5];//¼ÌµçÆ÷£¬¼´µÆµÄ×´Ì¬
??CrossCallReturnLabel_3:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#endDevInfo + 7
        SJMP    ??SampleApp_MessageMSGCB_6
//  472         break;
//  473         case SAMPLEAPP_END3:
//  474             //RFIDÉÏ´«²»±£´æ£¬Ö±½ÓÉÏ´«ÊÖ»ú»òÕßPC
//  475             packDataAndSend(FUN_CODE_UPDATA_RFID, pkt->cmd.Data, pkt->cmd.DataLength);
??SampleApp_MessageMSGCB_4:
        ; Setup parameters for call to function packDataAndSend
        MOV     A,R2
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,#0x3
        LCALL   ??packDataAndSend?relay
//  476         break;
        SJMP    ??SampleApp_MessageMSGCB_0
//  477         case SAMPLEAPP_END4:
//  478             //²½½øµç»úÃ»ÓÐÊý¾ÝÉÏ´«
//  479         break;
//  480         case SAMPLEAPP_END5:
//  481             osal_memcpy(endDevInfo.gpsData, pkt->cmd.Data,22);//ÖÕ¶ËÉÏ´«µÄGPS¹²22¸ö×Ö½Ú
??SampleApp_MessageMSGCB_5:
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,#0x16
        MOV     R5,#0x0
        MOV     R2,#(endDevInfo + 8) & 0xff
        MOV     R3,#((endDevInfo + 8) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        CFI EndBlock cfiBlock8
//  482         break;
//  483     }
//  484 }
??SampleApp_MessageMSGCB_0:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_16:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker15 Using cfiCommon1
        CFI (cfiPicker15) NoFunction
        CFI (cfiPicker15) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_15:
        INC     DPTR
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond16 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_12
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond18 Using cfiCommon0
        CFI (cfiCond18) NoFunction
        CFI (cfiCond18) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_4
        CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond18) CFA_SP SP+0
        CFI (cfiCond18) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond19 Using cfiCommon0
        CFI (cfiCond19) NoFunction
        CFI (cfiCond19) Conditional ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_5
        CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond19) CFA_SP SP+0
        CFI (cfiCond19) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker20 Using cfiCommon1
        CFI (cfiPicker20) NoFunction
        CFI (cfiPicker20) Picker
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_18:
        RET
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiCond18
        CFI EndBlock cfiCond19
        CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
        CFI Block cfiCond21 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_16, ??CrossCallReturnLabel_12
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_4
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_15, ??CrossCallReturnLabel_5
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_2
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_3
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_0
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_17, ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_1
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker29 Using cfiCommon1
        CFI (cfiPicker29) NoFunction
        CFI (cfiPicker29) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        RET
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond30 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker32 Using cfiCommon1
        CFI (cfiPicker32) NoFunction
        CFI (cfiPicker32) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_13:
        INC     DPTR
        RET
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond33 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker35 Using cfiCommon1
        CFI (cfiPicker35) NoFunction
        CFI (cfiPicker35) Picker
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_14:
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiPicker35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond36 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_13, ??CrossCallReturnLabel_3
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond38 Using cfiCommon0
        CFI (cfiCond38) NoFunction
        CFI (cfiCond38) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_0
        CFI (cfiCond38) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond38) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond38) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond38) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond38) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond38) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond38) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond38) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond38) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond38) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond38) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond38) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond38) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond38) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond38) CFA_SP SP+0
        CFI (cfiCond38) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_14, ??CrossCallReturnLabel_1
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker40 Using cfiCommon1
        CFI (cfiPicker40) NoFunction
        CFI (cfiPicker40) Picker
        MOVX    @DPTR,A
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_17:
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiPicker40
//  485 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  486 uint8 CheckSum(uint8 *pdata, uint8 len)
CheckSum:
        CFI Block cfiBlock41 Using cfiCommon0
        CFI Function CheckSum
        CODE
//  487 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  488 	uint8 i;
//  489 	uint8 check_sum=0;
        MOV     R1,#0x0
//  490 
//  491 	for(i=0; i<len; i++)
        MOV     R0,#0x0
        SJMP    ??CheckSum_0
//  492 	{
//  493 		check_sum += pdata[i];
??CheckSum_1:
        MOV     ?V0 + 0,R0
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        ADD     A,R1
        MOV     R1,A
//  494 	}
        INC     R0
??CheckSum_0:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??CheckSum_1
//  495 	return check_sum;
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock41
//  496 }
//  497 
//  498 //Êý¾Ý´ò°ü·¢ËÍ
//  499 /**
//  500 *fc:¹¦ÄÜÂë
//  501 *data:ÉÏ´«µÄÊý¾Ý
//  502 *len:Êý¾Ý³¤¶È
//  503 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  504 void packDataAndSend(uint8 fc, uint8* data, uint8 len)
packDataAndSend:
        CFI Block cfiBlock42 Using cfiCommon0
        CFI Function packDataAndSend
        CODE
//  505 {
        FUNCALL packDataAndSend, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packDataAndSend, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packDataAndSend, CheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL packDataAndSend, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 1,R4
//  506     osal_memset(SerialApp_TX_Buff, 0, SERIAL_APP_TX_MAX+1);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x51
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#SerialApp_TX_Buff & 0xff
        MOV     R3,#(SerialApp_TX_Buff >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  507 
//  508     //Êý¾Ý°ü³¤¶È
//  509     SerialApp_TX_Buff[0]=3+len;
        MOV     A,#0x3
        ADD     A,?V0 + 1
        MOV     ?V0 + 2,A
        MOV     DPTR,#SerialApp_TX_Buff
        MOVX    @DPTR,A
//  510 
//  511     //¹¦ÄÜÂë
//  512     SerialApp_TX_Buff[2]=fc;
        MOV     A,?V0 + 0
        MOV     DPTR,#SerialApp_TX_Buff + 2
        MOVX    @DPTR,A
//  513 
//  514     //·¢ËÍµÄÊý¾Ý
//  515     if(len>0)
        MOV     A,?V0 + 1
        JZ      ??packDataAndSend_0
//  516     {
//  517         osal_memcpy(SerialApp_TX_Buff+3, data, len);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 4,?V0 + 1
        MOV     R4,?V0 + 4
        MOV     R5,#0x0
        MOV     R2,#(SerialApp_TX_Buff + 3) & 0xff
        MOV     R3,#((SerialApp_TX_Buff + 3) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
//  518     }
//  519 
//  520     //Ð£ÑéºÍ
//  521     SerialApp_TX_Buff[1]=CheckSum(SerialApp_TX_Buff+2, len+1);
??packDataAndSend_0:
        ; Setup parameters for call to function CheckSum
        MOV     A,#0x1
        ADD     A,?V0 + 1
        MOV     R1,A
        MOV     R2,#(SerialApp_TX_Buff + 2) & 0xff
        MOV     R3,#((SerialApp_TX_Buff + 2) >> 8) & 0xff
        LCALL   ??CheckSum?relay
        MOV     A,R1
        MOV     DPTR,#SerialApp_TX_Buff + 1
        MOVX    @DPTR,A
//  522 
//  523     //·¢ËÍ³¤¶È
//  524     SerialApp_TX_Len=3+len;
        MOV     A,?V0 + 2
        MOV     DPTR,#SerialApp_TX_Len
        MOVX    @DPTR,A
//  525     HalUARTWrite(0,SerialApp_TX_Buff, SerialApp_TX_Len);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#SerialApp_TX_Buff & 0xff
        MOV     R3,#(SerialApp_TX_Buff >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  526  //   HalUARTWrite(0,"\r\n", 2);//Êý¾Ý°ü½áÎ²
//  527 }
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock42
//  528 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  529 void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock43 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  530 {
        FUNCALL SerialApp_CallBack, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_CallBack, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_CallBack, unpackData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  531     (void)port;
//  532 
//  533     if(port==SERIAL_APP_PORT)//´®¿Ú0Êý¾Ý
        JNZ     ??SerialApp_CallBack_0
//  534     {
//  535         osal_memset(SerialApp_RX_Buff, 0, SERIAL_APP_RX_MAX+1);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x51
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#SerialApp_RX_Buff & 0xff
        MOV     R3,#(SerialApp_RX_Buff >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  536         SerialApp_RX_Len = HalUARTRead(SERIAL_APP_PORT, SerialApp_RX_Buff, 
//  537         SERIAL_APP_RX_MAX);
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#SerialApp_RX_Buff & 0xff
        MOV     R3,#(SerialApp_RX_Buff >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SerialApp_RX_Len
        MOVX    @DPTR,A
//  538         if(SerialApp_RX_Len>0)
        JZ      ??SerialApp_CallBack_0
//  539         {
//  540             unpackData(SerialApp_RX_Buff, SerialApp_RX_Len);
        ; Setup parameters for call to function unpackData
        MOV     R1,A
        MOV     R2,#SerialApp_RX_Buff & 0xff
        MOV     R3,#(SerialApp_RX_Buff >> 8) & 0xff
        LCALL   ??unpackData?relay
//  541         }
//  542     }
//  543 }
??SerialApp_CallBack_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock43
//  544 
//  545 //ÕÒ³öÒ»Ö¡Êý¾Ý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  546 void unpackData(uint8* data, uint8 len)
unpackData:
        CFI Block cfiBlock44 Using cfiCommon0
        CFI Function unpackData
        CODE
//  547 {
        FUNCALL unpackData, ParseframeData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  548     int16 i=0;
//  549     if(data==NULL) return;
        MOV     A,R2
        ORL     A,R3
        JZ      ??unpackData_0
//  550     if(len==0) return;
        MOV     A,R6
        JZ      ??unpackData_0
//  551 
//  552     ParseframeData(data, len);
        ; Setup parameters for call to function ParseframeData
        LCALL   ??ParseframeData?relay
//  553     return;
??unpackData_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock44
//  554 
//  555     
//  556 	for(i=0; i<len; i++)
//  557 	{
//  558 		if(data[i]=='\r')
//  559 		{
//  560 			if(SerialApp_PARSE_Len>0) ParseframeData(SerialApp_PARSE_Buff, SerialApp_PARSE_Len);
//  561 
//  562 			memset(SerialApp_PARSE_Buff, 0, SERIAL_APP_PARSE_MAX+1);
//  563 			SerialApp_PARSE_Len=0;
//  564 		}
//  565 		else if(data[i]=='\n')
//  566 		{
//  567 			if(SerialApp_PARSE_Len>0) ParseframeData(SerialApp_PARSE_Buff, SerialApp_PARSE_Len);
//  568 			
//  569 			memset(SerialApp_PARSE_Buff, 0, SERIAL_APP_PARSE_MAX+1);
//  570 			SerialApp_PARSE_Len=0;
//  571 		}
//  572 		else
//  573 		{
//  574 			SerialApp_PARSE_Buff[SerialApp_PARSE_Len]=data[i];
//  575 			SerialApp_PARSE_Len++;	
//  576 		}
//  577 	}    
//  578 }
//  579 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  580 void ParseframeData(uint8* data, uint8 len)
ParseframeData:
        CFI Block cfiBlock45 Using cfiCommon0
        CFI Function ParseframeData
        CODE
//  581 {
        FUNCALL ParseframeData, CheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParseframeData, packDataAndSend
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParseframeData, sendDataToEnd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParseframeData, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParseframeData, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParseframeData, sendDataToEnd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParseframeData, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParseframeData, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ParseframeData, sendDataToEnd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 46, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 46, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  582     uint8 dataLen=0;
//  583     uint8 fc=0;
//  584     uint8 addr=0;
//  585     
//  586     if(data==NULL) return;
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ParseframeData_0 & 0xFFFF
//  587     if(len==0) return;
        MOV     A,R1
        JNZ     $+5
        LJMP    ??ParseframeData_0 & 0xFFFF
//  588 
//  589     //³¤¶È²»Ò»ÖÂ
//  590     if(data[0]!=len) return;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R1
        XRL     A,R0
        JZ      $+5
        LJMP    ??ParseframeData_0 & 0xFFFF
//  591 
//  592     //Ð£ÑéºÍ²»Ò»ÖÂ
//  593     dataLen=data[0]-2;
//  594     if(data[1]!=CheckSum(&data[2], dataLen)) return;
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        ; Setup parameters for call to function CheckSum
        MOV     A,#-0x2
        ADD     A,R0
        MOV     R1,A
        INC     R2
        INC     R2
        MOV     R3,?V0 + 5
        LCALL   ??CheckSum?relay
        MOV     A,R1
        MOV     R0,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      $+5
        LJMP    ??ParseframeData_0 & 0xFFFF
//  595 
//  596     //¹¦ÄÜÂë
//  597     fc=data[2];
//  598 
//  599     //·Ö·¢´¦Àí
//  600     switch(fc)
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        DEC     A
        JZ      ??ParseframeData_1
        ADD     A,#-0x3
        JZ      ??ParseframeData_2
        DEC     A
        JZ      ??ParseframeData_3
        DEC     A
        JNZ     $+5
        LJMP    ??ParseframeData_4 & 0xFFFF
        LJMP    ??ParseframeData_0 & 0xFFFF
//  601     {
//  602         case FUN_CODE_CHECK_ALL_DATA://È¡ËùÓÐ´«¸ÐÆ÷Êý¾Ý
//  603             packDataAndSend(FUN_CODE_UPDATA_ALL_DATA, (uint8*)&endDevInfo, sizeof(DeviceDataInfo));
??ParseframeData_1:
        ; Setup parameters for call to function packDataAndSend
        MOV     R4,#0x1e
        MOV     R2,#endDevInfo & 0xff
        MOV     R3,#(endDevInfo >> 8) & 0xff
        MOV     R1,#0x2
        LCALL   ??packDataAndSend?relay
//  604             break;
        LJMP    ??ParseframeData_0 & 0xFFFF
//  605 
//  606         case ZIGBEE_FUN_CODE_CTRL_LAMP://¿ØÖÆÖÕ¶ËÉÏµÆ,
//  607             addr=data[3];
??ParseframeData_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  608             if(addr>MAX_DEVICE) break;
        CLR     C
        SUBB    A,#0x7
        JC      $+5
        LJMP    ??ParseframeData_0 & 0xFFFF
//  609             if(addr==0) break;
        MOV     A,R6
        JNZ     $+5
        LJMP    ??ParseframeData_0 & 0xFFFF
//  610             
//  611             sendDataToEnd(endDevAddr[addr-1],SAMPLEAPP_END2,&data[4],1);//µÆ½ÓÔÚÖÕ¶Ë2ÉÏ
        ; Setup parameters for call to function sendDataToEnd
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,#0x1
        MOV     R4,#0x3
        MOV     R5,#0x0
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,#(endDevAddr + 254) & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#((endDevAddr - 2) >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        LJMP    ??ParseframeData_5 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 44)
//  612             break;
//  613         case ZIGBEE_FUN_CODE_STEP://¿ØÖÆÖÕ¶ËÉÏµÄ²½½øµç»ú
//  614             addr=data[3];
??ParseframeData_3:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  615             if(addr>MAX_DEVICE) break;
        CLR     C
        SUBB    A,#0x7
        JC      $+5
        LJMP    ??ParseframeData_0 & 0xFFFF
//  616             if(addr==0) break;
        MOV     A,R6
        JNZ     $+5
        LJMP    ??ParseframeData_0 & 0xFFFF
//  617 
//  618            {
//  619             uint8 buff[30]={0};    
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  620 
//  621             //·§Öµ
//  622             sprintf(buff, "%02d,%04x", addr,endDevAddr[addr-1]);
        MOV     DPL,R6
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,A
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(endDevAddr + 254) & 0xff
        ADD     A,R0
        MOV     R6,A
        MOV     A,#((endDevAddr - 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#`?<Constant "%02d,%04x">` & 0xff
        MOV     R5,#(`?<Constant "%02d,%04x">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  623             HalLcdWriteString( buff, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  624 
//  625             }
//  626            
//  627             sendDataToEnd(endDevAddr[addr-1], SAMPLEAPP_END4,&data[4],1);//²½½øµç»ú½ÓÔÚÖÕ¶Ë4ÉÏ
        ; Setup parameters for call to function sendDataToEnd
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,#0x1
        MOV     R4,#0x5
        SJMP    ??ParseframeData_6
        CFI CFA_XSP16 add(XSP16, 44)
//  628             break;
//  629         case ZIGBEE_FUN_CODE_END1:
//  630             
//  631             addr=data[3];
??ParseframeData_4:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  632             if(addr>MAX_DEVICE) break;
        CLR     C
        SUBB    A,#0x7
        JNC     ??ParseframeData_0
//  633             if(addr==0) break;
        MOV     A,R6
        JZ      ??ParseframeData_0
//  634 
//  635            {
//  636             uint8 buff[30]={0};    
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_2` & 0xff
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  637 
//  638             //·§Öµ
//  639             sprintf(buff, "%02d,%04x", addr,endDevAddr[addr-1]);
        MOV     DPL,R6
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,A
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#(endDevAddr + 254) & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#((endDevAddr - 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        ; Setup parameters for call to function sprintf
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?PUSH_XSTACK8_X_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 48)
        MOV     R4,#`?<Constant "%02d,%04x">` & 0xff
        MOV     R5,#(`?<Constant "%02d,%04x">` >> 8) & 0xff
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  640             HalLcdWriteString( buff, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  641 
//  642             }
//  643           sendDataToEnd(endDevAddr[addr-1], SAMPLEAPP_END1,&data[4],3);
        ; Setup parameters for call to function sendDataToEnd
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 46)
        MOV     R1,#0x3
        MOV     R4,#0x2
??ParseframeData_6:
        MOV     R5,#0x0
        MOV     DPL,R6
        MOV     DPH,R7
??ParseframeData_5:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??sendDataToEnd?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  644             break;
//  645         default:
//  646             break;
//  647     }
??ParseframeData_0:
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock45
//  648 }
//  649 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  650 void sendDataToEnd(uint16 shortAddr, uint16 clusterId, uint8* data, uint8 len)
sendDataToEnd:
        CFI Block cfiBlock46 Using cfiCommon0
        CFI Function sendDataToEnd
        CODE
//  651 {
        FUNCALL sendDataToEnd, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     R6,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine8 & 0xFFFF
//  652     afAddrType_t Tx_DstAddr;
//  653 
//  654     if(shortAddr==0)
??CrossCallReturnLabel_10:
        MOV     A,R2
        ORL     A,R3
        JNZ     ??sendDataToEnd_0
//  655     {
//  656         //Èç¹ûÃ»ÓÐ¶ÌµØÖ·£¬Ê¹ÓÃ¹ã²¥
//  657         Tx_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  658         Tx_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
//  659         Tx_DstAddr.addr.shortAddr = 0xffff;            //¹ã²¥
//  660     }
??CrossCallReturnLabel_19:
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??sendDataToEnd_1
//  661     else
//  662     {
//  663         //µã²¥
//  664         Tx_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
??sendDataToEnd_0:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  665         Tx_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
//  666         Tx_DstAddr.addr.shortAddr = shortAddr;           //µã²¥
//  667     }
??CrossCallReturnLabel_20:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
??sendDataToEnd_1:
        MOVX    @DPTR,A
//  668 
//  669 
//  670 
//  671     if ( AF_DataRequest( &Tx_DstAddr, &SampleApp_epDesc,
//  672                        clusterId,
//  673                        len,
//  674                        data,
//  675                        &SampleApp_TransID,
//  676                        AF_DISCV_ROUTE,
//  677                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 2,#SampleApp_TransID & 0xff
        MOV     ?V0 + 3,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 24)
//  678     {
//  679     }
//  680     else
//  681     {
//  682     // Error occurred in request to send.
//  683     }
//  684 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond49 Using cfiCommon0
        CFI (cfiCond49) NoFunction
        CFI (cfiCond49) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond49) CFA_SP SP+0
        CFI (cfiCond49) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker50 Using cfiCommon1
        CFI (cfiPicker50) NoFunction
        CFI (cfiPicker50) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiCond49
        CFI EndBlock cfiPicker50

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond51 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond52 Using cfiCommon0
        CFI (cfiCond52) NoFunction
        CFI (cfiCond52) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond52) CFA_SP SP+0
        CFI (cfiCond52) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker53 Using cfiCommon1
        CFI (cfiPicker53) NoFunction
        CFI (cfiPicker53) Picker
        MOV     A,#0x14
        CFI EndBlock cfiCond51
        CFI EndBlock cfiCond52
        CFI EndBlock cfiPicker53
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond54 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond55 Using cfiCommon0
        CFI (cfiCond55) NoFunction
        CFI (cfiCond55) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond55) CFA_SP SP+0
        CFI (cfiCond55) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiCond56 Using cfiCommon0
        CFI (cfiCond56) NoFunction
        CFI (cfiCond56) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond56) CFA_SP SP+0
        CFI (cfiCond56) CFA_XSP16 add(XSP16, 24)
        CFI Block cfiPicker57 Using cfiCommon1
        CFI (cfiPicker57) NoFunction
        CFI (cfiPicker57) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond54
        CFI EndBlock cfiCond55
        CFI EndBlock cfiCond56
        CFI EndBlock cfiPicker57

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CheckSum?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    CheckSum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??packDataAndSend?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    packDataAndSend

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??unpackData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    unpackData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ParseframeData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    ParseframeData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??sendDataToEnd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    sendDataToEnd

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp_Init">`:
        DB "SampleApp_Init"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "7CCC8204">`:
        DB "7CCC8204"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%02d,%02x,%02x,%02d,%04x">`:
        DB "%02d,%02x,%02x,%02d,%04x"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "%02d,%04x">`:
        DB "%02d,%04x"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        END
//  685 
//  686 /*********************************************************************
//  687 *********************************************************************/
// 
// 1 725 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//   191 bytes in segment XDATA_ROM_C
//   271 bytes in segment XDATA_Z
// 
// 1 785 bytes of CODE  memory
//   191 bytes of CONST memory
//   271 bytes of XDATA memory
//
//Errors: none
//Warnings: 12
