###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         07/Nov/2015  00:39:14 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c           #
#    Command line       =  -f E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ #
#                          ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wRouter.cfg (-DCPU32MHZ                  #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg (-DSECURE=0                     #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c -D        #
#                          ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC    #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\  #
#                          -lA E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³ #
#                          \ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Li #
#                          st\ --diag_suppress Pe001,Pa010 -o                 #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\   #
#                          -e --debug --core=plain --dptr=16,1                #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ #
#                          ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\ -I              #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I       #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\ -I E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀ #
#                          íÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MT\ -I E:\work\zigbee\taobao\work\ #
#                          WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë #
#                          4-²½½øµç»ú\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I      #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\ -I                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\ -I                          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\ -I E:\work\zigbee\taobao\work #
#                          \WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶ #
#                          Ë4-²½½øµç»ú\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I        #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\ -I E:\work\zigbee\taobao\work\WI #
#                          FI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4- #
#                          ²½½øµç»ú\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\ -I E:\work\zigbee\taobao\work\W #
#                          IFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4 #
#                          -²½½øµç»ú\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I         #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\ -I E:\work\zigbee\taobao\work\WI #
#                          FI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4- #
#                          ²½½øµç»ú\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I           #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\ -I E:\work\zigbee\taobao\work\WIFI-Zi #
#                          gBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµ #
#                          ç»ú\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\ -I                          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\ -I E:\work\zigbee\taobao\work\ #
#                          WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë #
#                          4-²½½øµç»ú\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\ -I                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz       #
#    List file          =  E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\S #
#                          ampleApp.lst                                       #
#    Object file        =  E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\Sa #
#                          mpleApp.r51                                        #
#                                                                             #
#                                                                             #
###############################################################################

E:\work\zigbee\taobao\work\WIFI-ZigBee¹ÜÀíÏµÍ³\ZStack-CC2530-2.3.0-1.4.0-ÖÕ¶Ë4-²½½øµç»ú\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "stdio.h"
     78          
     79          /*********************************************************************
     80           * MACROS
     81           */
     82          
     83          /*********************************************************************
     84           * CONSTANTS
     85           */
     86          
     87          /*********************************************************************
     88           * TYPEDEFS
     89           */
     90          
     91          /*********************************************************************
     92           * GLOBAL VARIABLES
     93           */
     94          
     95          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     96          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0500         DW 5
   \   00000A   0600         DW 6
     97          {
     98            SERIALAPP_CONNECTREQ_CLUSTER,//ÓÃÓÚÉÏ´«ÖÕ¶Ë¶ÌµØÖ·
     99            SAMPLEAPP_END1,
    100            SAMPLEAPP_END2,
    101            SAMPLEAPP_END3,
    102            SAMPLEAPP_END4,
    103            SAMPLEAPP_END5
    104          };
    105          

   \                                 In  segment XDATA_ROM_C, align 1
    106          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    107          {
    108            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    109            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    110            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    111            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    112            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    115            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    116            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    117          };
    118          
    119          // This is the Endpoint/Interface description.  It is defined here, but
    120          // filled-in in SampleApp_Init().  Another way to go would be to fill
    121          // in the structure here and make it a "const" (in code space).  The
    122          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    124          
    125          /*********************************************************************
    126           * EXTERNAL VARIABLES
    127           */
    128          
    129          /*********************************************************************
    130           * EXTERNAL FUNCTIONS
    131           */
    132          
    133          /*********************************************************************
    134           * LOCAL VARIABLES
    135           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    137                                    // This variable will be received when
    138                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    151          
    152          
    153          ///////////////////²½½øµç»ú¶¨Òå/////////////////////////////
    154          //**********************ÕýÏòÐý×ªÏàÐò±í*****************************

   \                                 In  segment XDATA_I, align 1, keep-with-next
    155          uint8 FFW[8]={0x80,0xc0,0x40,0x60,0x20,0x30,0x10,0x90};
   \                     FFW:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for FFW>`
   \   000008                REQUIRE __INIT_XDATA_I
    156          //**********************·´ÏòÐý×ªÏàÐò±í*****************************

   \                                 In  segment XDATA_I, align 1, keep-with-next
    157          uint8 REV[8]={0x90,0x10,0x30,0x20,0x60,0x40,0xc0,0x80};
   \                     REV:
   \   000000                DS 8
   \   000008                REQUIRE `?<Initializer for REV>`
   \   000008                REQUIRE __INIT_XDATA_I
    158          
    159          
    160          //---------------------------------------------------------------------
    161          //±ê×¼°æ²»Í¬µÄÖÕ¶ËÐèÒªÐÞ¸Ä´ËID,ÓÃÓÚÊ¶±ðÐ­µ÷Æ÷·¢¹ýÀ´µÄÊý¾Ý£¬IDÏàÍ¬Ôò´¦Àí
    162          //×¨Òµ°æ×Ô¶¯´ÓFlash»ñµÃµØÖ·£¬ËùÓÐÖÕ¶Ë¹Ì¼þÏàÍ¬£¬ÊÊºÏÁ¿²ú

   \                                 In  segment XDATA_I, align 1, keep-with-next
    163          static uint16 EndDeviceID = 0x0004; //ÖÕ¶ËID£¬·Ç³£ÖØÒª
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for EndDeviceID>`
   \   000002                REQUIRE __INIT_XDATA_I
    164          
    165          
    166          
    167          /*********************************************************************
    168           * LOCAL FUNCTIONS
    169           */
    170          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    171          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    172          void SampleApp_SendPeriodicMessage( void );
    173          void SerialApp_DeviceConnect();
    174          
    175          /*********************************************************************
    176           * NETWORK LAYER CALLBACKS
    177           */
    178          
    179          /*********************************************************************
    180           * PUBLIC FUNCTIONS
    181           */
    182          
    183          /*********************************************************************
    184           * @fn      SampleApp_Init
    185           *
    186           * @brief   Initialization function for the Generic App Task.
    187           *          This is called during initialization and should contain
    188           *          any application specific initialization (ie. hardware
    189           *          initialization/setup, table initialization, power up
    190           *          notificaiton ... ).
    191           *
    192           * @param   task_id - the ID assigned by OSAL.  This ID should be
    193           *                    used to send messages and set timers.
    194           *
    195           * @return  none
    196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    197          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    198          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    199            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    200            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    201            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    202            
    203            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    204            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    205          
    206              
    207          	P0SEL &= 0x0f;  //P0_4¡¢P0_5¡¢P0_6¡¢P0_7ÅäÖÃ³ÉÍ¨ÓÃio
   \   00001E   53F30F       ANL     0xf3,#0xf
    208          	P0DIR |= 0xF0; //P0_4¡¢P0_5¡¢P0_6¡¢P0_7¶¨ÒåÎªÊä³ö
   \   000021   43FDF0       ORL     0xfd,#0xf0
    209            
    210            // Device hardware initialization can be added here or in main() (Zmain.c).
    211            // If the hardware is application specific - add it here.
    212            // If the hardware is other parts of the device add it in main().
    213          
    214           #if defined ( BUILD_ALL_DEVICES )
    215            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    216            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    217            // together - if they are - we will start up a coordinator. Otherwise,
    218            // the device will start as a router.
    219            if ( readCoordinatorJumper() )
    220              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;dd
    221            else
    222              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    223          #endif // BUILD_ALL_DEVICES
    224          
    225          #if defined ( HOLD_AUTO_START )
    226            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    227            //  from starting the device and wait for the application to
    228            //  start the device.
    229            ZDOInitDevice(0);ee
    230          #endif
    231          
    232            // Setup for the periodic message's destination address
    233            // Broadcast to everyone
    234            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000024   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000027   740F         MOV     A,#0xf
   \   000029   F0           MOVX    @DPTR,A
    235            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   A3           INC     DPTR
   \   00002B   7414         MOV     A,#0x14
   \   00002D   F0           MOVX    @DPTR,A
    236            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   F0           MOVX    @DPTR,A
    237          
    238            // Setup for the flash command's destination address - Group 1
    239            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000036   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000039   7401         MOV     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
    240            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003C   A3           INC     DPTR
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    241            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
    242            
    243            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000049   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   00004C   7402         MOV     A,#0x2
   \   00004E   F0           MOVX    @DPTR,A
    244            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004F   A3           INC     DPTR
   \   000050   7414         MOV     A,#0x14
   \   000052   F0           MOVX    @DPTR,A
    245            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000053   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   F0           MOVX    @DPTR,A
    246          
    247            // Fill out the endpoint description.
    248            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    249            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000060   A3           INC     DPTR
   \   000061   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000067   F0           MOVX    @DPTR,A
    250            SampleApp_epDesc.simpleDesc
    251                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006F   F0           MOVX    @DPTR,A
    252            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000070   A3           INC     DPTR
   \   000071   E4           CLR     A
   \   000072   F0           MOVX    @DPTR,A
    253          
    254            // Register the endpoint description with the AF
    255            afRegister( &SampleApp_epDesc );
   \   000073                ; Setup parameters for call to function afRegister
   \   000073   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000075   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000077   12....       LCALL   ??afRegister?relay
    256          
    257            // Register for all key events - This app will handle all key events
    258            RegisterForKeys( SampleApp_TaskID );
   \   00007A                ; Setup parameters for call to function RegisterForKeys
   \   00007A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??RegisterForKeys?relay
    259          
    260            // By default, all devices start out in Group 1
    261            SampleApp_Group.ID = 0x0001;
   \   000082   90....       MOV     DPTR,#SampleApp_Group
   \   000085   7401         MOV     A,#0x1
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
    262            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000098   7C07         MOV     R4,#0x7
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A0   12....       LCALL   ??osal_memcpy?relay
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    263            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A8                ; Setup parameters for call to function aps_AddGroup
   \   0000A8   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AA   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AC   7914         MOV     R1,#0x14
   \   0000AE   12....       LCALL   ??aps_AddGroup?relay
    264          
    265          #if defined ( LCD_SUPPORTED )
    266            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B1                ; Setup parameters for call to function HalLcdWriteString
   \   0000B1   7901         MOV     R1,#0x1
   \   0000B3   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B5   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B7   12....       LCALL   ??HalLcdWriteString?relay
    267          #endif
    268          }
   \   0000BA   7F03         MOV     R7,#0x3
   \   0000BC   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000BF                REQUIRE P0SEL
   \   0000BF                REQUIRE P0DIR
    269          
    270          /*********************************************************************
    271           * @fn      SampleApp_ProcessEvent
    272           *
    273           * @brief   Generic Application Task event processor.  This function
    274           *          is called to process all events for the task.  Events
    275           *          include timers, messages and any other user defined events.
    276           *
    277           * @param   task_id  - The OSAL assigned task ID.
    278           * @param   events - events to process.  This is a bit map and can
    279           *                   contain more than one event.
    280           *
    281           * @return  none
    282           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    283          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    284          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    285            afIncomingMSGPacket_t *MSGpkt;
    286            (void)task_id;  // Intentionally unreferenced parameter
    287          
    288            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   605A         JZ      ??SampleApp_ProcessEvent_0
    289            {
    290              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8019         SJMP    ??SampleApp_ProcessEvent_1
    291              while ( MSGpkt )
    292              {
    293                switch ( MSGpkt->hdr.event )
    294                {
    295                  // Received when a key is pressed
    296                  case KEY_CHANGE:
    297                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    298                    break;
    299          
    300                  // Received when a messages is received (OTA) for this endpoint
    301                  case AF_INCOMING_MSG_CMD:
    302                    SampleApp_MessageMSGCB( MSGpkt );
    303                    break;
    304          
    305                  // Received whenever the device changes state in the network
    306                  case ZDO_STATE_CHANGE:
    307                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    308                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    309                           (SampleApp_NwkState == DEV_ROUTER)
    310                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7003         JNZ     ??SampleApp_ProcessEvent_4
    311                    {
    312          
    313                      SerialApp_DeviceConnect();//ÉÏ´«ÖÕ¶ËµÄ¶ÌµØÖ·
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function SerialApp_DeviceConnect
   \   00001E   12....       LCALL   ??SerialApp_DeviceConnect?relay
    314                      
    315                      // Start sending the periodic message in a regular interval.
    316          //            osal_start_timerEx( SampleApp_TaskID,
    317          //                              SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    318          //                              SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
    319                    }
    320                    else
    321                    {
    322                      // Device is no longer in the network
    323                    }
    324                    break;
    325          
    326                  default:
    327                    break;
    328                }
    329          
    330                // Release the memory
    331                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000021                ; Setup parameters for call to function osal_msg_deallocate
   \   000021   AA..         MOV     R2,?V0 + 0
   \   000023   AB..         MOV     R3,?V0 + 1
   \   000025   12....       LCALL   ??osal_msg_deallocate?relay
    332          
    333                // Next - if one is available
    334                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000028                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000028   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   F9           MOV     R1,A
   \   00002D   12....       LCALL   ??osal_msg_receive?relay
   \   000030   8A..         MOV     ?V0 + 0,R2
   \   000032   8B..         MOV     ?V0 + 1,R3
   \   000034   E5..         MOV     A,?V0 + 0
   \   000036   45..         ORL     A,?V0 + 1
   \   000038   6025         JZ      ??SampleApp_ProcessEvent_5
   \   00003A   85..82       MOV     DPL,?V0 + 0
   \   00003D   85..83       MOV     DPH,?V0 + 1
   \   000040   E0           MOVX    A,@DPTR
   \   000041   2440         ADD     A,#0x40
   \   000043   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000045   24EF         ADD     A,#-0x11
   \   000047   60C6         JZ      ??SampleApp_ProcessEvent_2
   \   000049   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   00004B                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   85..82       MOV     DPL,?V0 + 0
   \   000053   85..83       MOV     DPH,?V0 + 1
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00005D   80C2         SJMP    ??SampleApp_ProcessEvent_4
    335              }
    336          
    337              // return unprocessed events
    338              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00005F   EE           MOV     A,R6
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000064   FB           MOV     R3,A
   \   000065   8020         SJMP    ??SampleApp_ProcessEvent_8
    339            }
    340          
    341            // Send a message out - This event is generated by a timer
    342            //  (setup in SampleApp_Init()).
    343            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000067   EE           MOV     A,R6
   \   000068   A2E0         MOV     C,0xE0 /* A   */.0
   \   00006A   5017         JNC     ??SampleApp_ProcessEvent_9
    344            {
    345              // Send the periodic message
    346          
    347          
    348              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    349                  100 );
   \   00006C                ; Setup parameters for call to function osal_start_timerEx
   \   00006C   7C64         MOV     R4,#0x64
   \   00006E   7D00         MOV     R5,#0x0
   \   000070   7A01         MOV     R2,#0x1
   \   000072   7B00         MOV     R3,#0x0
   \   000074   90....       MOV     DPTR,#SampleApp_TaskID
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F9           MOV     R1,A
   \   000079   12....       LCALL   ??osal_start_timerEx?relay
    350            
    351          
    352              // return unprocessed events
    353              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   00007C   EE           MOV     A,R6
   \   00007D   6401         XRL     A,#0x1
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   80E1         SJMP    ??SampleApp_ProcessEvent_7
    354            }
    355          
    356            // Discard unknown events
    357            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   000083   7A00         MOV     R2,#0x0
   \   000085   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   000087                REQUIRE ?Subroutine0
   \   000087                ; // Fall through to label ?Subroutine0
    358          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    359          
    360          /*********************************************************************
    361           * Event Generation Functions
    362           */
    363          /*********************************************************************
    364           * @fn      SampleApp_HandleKeys
    365           *
    366           * @brief   Handles all key events for this device.
    367           *
    368           * @param   shift - true if in shift/alt.
    369           * @param   keys - bit field for key events. Valid entries:
    370           *                 HAL_KEY_SW_2
    371           *                 HAL_KEY_SW_1
    372           *
    373           * @return  none
    374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    375          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    376          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    377            (void)shift;  // Intentionally unreferenced parameter
    378            
    379            if ( keys & HAL_KEY_SW_1 )
    380            {
    381              /* This key sends the Flash Command is sent to Group 1.
    382               * This device will not receive the Flash Command from this
    383               * device (even if it belongs to group 1).
    384               */
    385            }
    386          
    387            if ( keys & HAL_KEY_SW_2 )
   \   000006   A2E1         MOV     C,0xE0 /* A   */.1
   \   000008   5024         JNC     ??SampleApp_HandleKeys_0
    388            {
    389              /* The Flashr Command is sent to Group 1.
    390               * This key toggles this device in and out of group 1.
    391               * If this device doesn't belong to group 1, this application
    392               * will not receive the Flash command sent to group 1.
    393               */
    394              aps_Group_t *grp;
    395              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    396              if ( grp )
   \   00000A                ; Setup parameters for call to function aps_FindGroup
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   7914         MOV     R1,#0x14
   \   000010   12....       LCALL   ??aps_FindGroup?relay
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V0 + 1
   \   000018   600B         JZ      ??SampleApp_HandleKeys_1
    397              {
    398                // Remove from the group
    399                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   00001A                ; Setup parameters for call to function aps_RemoveGroup
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   7914         MOV     R1,#0x14
   \   000020   12....       LCALL   ??aps_RemoveGroup?relay
   \   000023   8009         SJMP    ??SampleApp_HandleKeys_0
    400              }
    401              else
    402              {
    403                // Add to the flash group
    404                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_1:
   \   000025                ; Setup parameters for call to function aps_AddGroup
   \   000025   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000027   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000029   7914         MOV     R1,#0x14
   \   00002B   12....       LCALL   ??aps_AddGroup?relay
    405              }
    406            }
    407          }
   \                     ??SampleApp_HandleKeys_0:
   \   00002E                REQUIRE ?Subroutine1
   \   00002E                ; // Fall through to label ?Subroutine1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    408          
    409          /*********************************************************************
    410           * @fn      SampleApp_MessageMSGCB
    411           *
    412           * @brief   Data message processor callback.  This function processes
    413           *          any incoming data - probably from other devices.  So, based
    414           *          on cluster ID, perform the intended action.
    415           *
    416           * @param   none
    417           *
    418           * @return  none
    419           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    420          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    421          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    422              uint16 flashTime;
                            ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    423          
    424              switch ( pkt->clusterId )
    425              {
    426              case SAMPLEAPP_END4:
    427                  {
    428                      if(pkt->cmd.Data[0]==1)//Õý×ª
    429                      {
    430                      }
    431                      else if(pkt->cmd.Data[0]==2)//·´×ª
    432                      {
    433                      }
    434                      else if(pkt->cmd.Data[0]==3)//¼ÓËÙ
    435                      {
    436                      }
    437                      else if(pkt->cmd.Data[0]==4)//¼õËÙ
    438                      {
    439                      }
    440                      else//Í£Ö¹
    441                      {
    442                      }
    443                  }
    444                break;
    445              default:break;
    446            }
    447          }
   \   000000   02....       LJMP    ?BRET
    448          
    449          
    450          //**********************²½½øµç»úÕý×ª******************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    451          void motor_up(float n)
   \                     motor_up:
    452          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    453            unsigned char i;
    454            unsigned int j;
    455            int movie_count=(int)(8*64*n);
   \   00000D   90....       MOV     DPTR,#__Constant_44000000
   \   000010   78..         MOV     R0,#?V0 + 4
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   79..         MOV     R1,#?V0 + 4
   \   000019   12....       LCALL   ?FLT_MUL
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?FLT_TO_L
   \   000021   85....       MOV     ?V0 + 2,?V0 + 0
   \   000024   85....       MOV     ?V0 + 3,?V0 + 1
    456            for (j=0; j<movie_count; j++)
   \   000027   7E00         MOV     R6,#0x0
   \   000029   7F00         MOV     R7,#0x0
   \   00002B   801B         SJMP    ??motor_up_0
    457            {
    458              for (i=0; i<8; i++)
   \                     ??motor_up_1:
   \   00002D   75..00       MOV     ?V0 + 4,#0x0
    459              {
    460                P0 = FFW[i];
   \                     ??motor_up_2:
   \   000030   85....       MOV     ?V0 + 0,?V0 + 4
   \   000033   74..         MOV     A,#FFW & 0xff
   \   000035   25..         ADD     A,?V0 + 0
   \   000037   F582         MOV     DPL,A
   \   000039   74..         MOV     A,#(FFW >> 8) & 0xff
   \   00003B   12....       LCALL   ?Subroutine3 & 0xFFFF
    461                Delay_ms(2);
                       ^
Warning[Pe223]: function "Delay_ms" declared implicitly
    462              }
    463            }
   \                     ??CrossCallReturnLabel_0:
   \   00003E   40F0         JC      ??motor_up_2
   \   000040   EE           MOV     A,R6
   \   000041   2401         ADD     A,#0x1
   \   000043   0E           INC     R6
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   FF           MOV     R7,A
   \                     ??motor_up_0:
   \   000048   C3           CLR     C
   \   000049   EE           MOV     A,R6
   \   00004A   95..         SUBB    A,?V0 + 2
   \   00004C   EF           MOV     A,R7
   \   00004D   95..         SUBB    A,?V0 + 3
   \   00004F   40DC         JC      ??motor_up_1
    464          }
   \   000051                REQUIRE ?Subroutine2
   \   000051                REQUIRE _A_P0
   \   000051                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F580         MOV     0x80,A
   \   000007                ; Setup parameters for call to function Delay_ms
   \   000007                ; Setup parameters for call to function Delay_ms
   \   000007   7A02         MOV     R2,#0x2
   \   000009   7B00         MOV     R3,#0x0
   \   00000B   12....       LCALL   ??Delay_ms?relay
   \   00000E   05..         INC     ?V0 + 4
   \   000010   E5..         MOV     A,?V0 + 4
   \   000012   C3           CLR     C
   \   000013   9408         SUBB    A,#0x8
   \   000015   22           RET
    465          
    466          //*********************²½½øµç»ú·´×ª********************************

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    467          void motor_down(float n)
   \                     motor_down:
    468          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
    469            unsigned char i;
    470            unsigned int j;
    471            int movie_count=(int)(8*64*n);
   \   00000D   90....       MOV     DPTR,#__Constant_44000000
   \   000010   78..         MOV     R0,#?V0 + 4
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   79..         MOV     R1,#?V0 + 4
   \   000019   12....       LCALL   ?FLT_MUL
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?FLT_TO_L
   \   000021   85....       MOV     ?V0 + 2,?V0 + 0
   \   000024   85....       MOV     ?V0 + 3,?V0 + 1
    472            for (j=0; j<movie_count; j++)
   \   000027   7E00         MOV     R6,#0x0
   \   000029   7F00         MOV     R7,#0x0
   \   00002B   801B         SJMP    ??motor_down_0
    473            {
    474              for (i=0; i<8; i++)
   \                     ??motor_down_1:
   \   00002D   75..00       MOV     ?V0 + 4,#0x0
    475              {
    476                P0 = REV[i];
   \                     ??motor_down_2:
   \   000030   85....       MOV     ?V0 + 0,?V0 + 4
   \   000033   74..         MOV     A,#REV & 0xff
   \   000035   25..         ADD     A,?V0 + 0
   \   000037   F582         MOV     DPL,A
   \   000039   74..         MOV     A,#(REV >> 8) & 0xff
   \   00003B   12....       LCALL   ?Subroutine3 & 0xFFFF
    477                Delay_ms(2);
                       ^
Warning[Pe223]: function "Delay_ms" declared implicitly
    478              }
    479            }
   \                     ??CrossCallReturnLabel_1:
   \   00003E   40F0         JC      ??motor_down_2
   \   000040   EE           MOV     A,R6
   \   000041   2401         ADD     A,#0x1
   \   000043   0E           INC     R6
   \   000044   EF           MOV     A,R7
   \   000045   3400         ADDC    A,#0x0
   \   000047   FF           MOV     R7,A
   \                     ??motor_down_0:
   \   000048   C3           CLR     C
   \   000049   EE           MOV     A,R6
   \   00004A   95..         SUBB    A,?V0 + 2
   \   00004C   EF           MOV     A,R7
   \   00004D   95..         SUBB    A,?V0 + 3
   \   00004F   40DC         JC      ??motor_down_1
    480          }
   \   000051   80..         SJMP    ?Subroutine2
   \   000053                REQUIRE _A_P0
    481          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    482          uint8 Contrl_Step_motor(int state, float count)
   \                     Contrl_Step_motor:
    483          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   12....       LCALL   ?L_MOV_X
    484          	if(state>0)
   \   00000F   C3           CLR     C
   \   000010   EA           MOV     A,R2
   \   000011   9401         SUBB    A,#0x1
   \   000013   EB           MOV     A,R3
   \   000014   9400         SUBB    A,#0x0
   \   000016   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000018   65D0         XRL     A,PSW
   \   00001A   33           RLC     A
   \   00001B   AA..         MOV     R2,?V0 + 0
   \   00001D   AB..         MOV     R3,?V0 + 1
   \   00001F   AC..         MOV     R4,?V0 + 2
   \   000021   AD..         MOV     R5,?V0 + 3
   \   000023   4005         JC      ??Contrl_Step_motor_0
    485          	{
    486          		motor_down(count);
   \   000025                ; Setup parameters for call to function motor_down
   \   000025   12....       LCALL   ??motor_down?relay
   \   000028   8003         SJMP    ??Contrl_Step_motor_1
    487          	}
    488          	else
    489          	{
    490          		motor_up(count);
   \                     ??Contrl_Step_motor_0:
   \   00002A                ; Setup parameters for call to function motor_up
   \   00002A   12....       LCALL   ??motor_up?relay
    491          	}
    492          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "Contrl_Step_motor"
   \                     ??Contrl_Step_motor_1:
   \   00002D   02....       LJMP    ?Subroutine0 & 0xFFFF
    493          
    494          //°ÑÖÕ¶ËµØÖ·ÉÏ´«·þÎñÆ÷

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    495          void  SerialApp_DeviceConnect()
   \                     SerialApp_DeviceConnect:
    496          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    497            uint16 nwkAddr;
    498            uint16 parentNwkAddr;
                          ^
Warning[Pe177]: variable "parentNwkAddr" was declared but never referenced
    499            char buff[5] = {0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    500            afAddrType_t SerialApp_TxAddr;
    501            
    502            nwkAddr = NLME_GetShortAddr();
   \   00001F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001F   12....       LCALL   ??NLME_GetShortAddr?relay
    503          //  parentNwkAddr = NLME_GetCoordShortAddr();
    504            
    505            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000022   740D         MOV     A,#0xd
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
    506            SerialApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   740E         MOV     A,#0xe
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7414         MOV     A,#0x14
   \   000031   F0           MOVX    @DPTR,A
    507            SerialApp_TxAddr.addr.shortAddr = 0x0;
   \   000032   7405         MOV     A,#0x5
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
    508          
    509            buff[0] = EndDeviceID;
   \   00003B   90....       MOV     DPTR,#EndDeviceID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   F0           MOVX    @DPTR,A
    510            buff[1] = HI_UINT16( nwkAddr );
   \   000046   7401         MOV     A,#0x1
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   EB           MOV     A,R3
   \   00004C   F0           MOVX    @DPTR,A
    511            buff[2] = LO_UINT16( nwkAddr );
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   EA           MOV     A,R2
   \   000053   F0           MOVX    @DPTR,A
    512            
    513            if ( AF_DataRequest( &SerialApp_TxAddr, &SampleApp_epDesc,
    514                                 SERIALAPP_CONNECTREQ_CLUSTER,
    515                                 3,
    516                                 (uint8*)buff,
    517                                 &SampleApp_TransID, 
    518                                 0, 
    519                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000054                ; Setup parameters for call to function AF_DataRequest
   \   000054   75..1E       MOV     ?V0 + 0,#0x1e
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00005F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7403         MOV     A,#0x3
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   8582..       MOV     ?V0 + 0,DPL
   \   00006F   8583..       MOV     ?V0 + 1,DPH
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   75..03       MOV     ?V0 + 0,#0x3
   \   00007A   75..00       MOV     ?V0 + 1,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   75..01       MOV     ?V0 + 0,#0x1
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7900         MOV     R1,#0x0
   \   00008C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00008E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000090   740E         MOV     A,#0xe
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
   \   000099   12....       LCALL   ??AF_DataRequest?relay
   \   00009C   7409         MOV     A,#0x9
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    520            {
    521            }
    522            else
    523            {
    524              // Error occurred in request to send.
    525            }
    526          }
   \   0000A1   7411         MOV     A,#0x11
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for FFW>`:
   \   000000   80           DB 128
   \   000001   C0           DB 192
   \   000002   40           DB 64
   \   000003   60           DB 96
   \   000004   20           DB 32
   \   000005   30           DB 48
   \   000006   10           DB 16
   \   000007   90           DB 144

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for REV>`:
   \   000000   90           DB 144
   \   000001   10           DB 16
   \   000002   30           DB 48
   \   000003   20           DB 32
   \   000004   60           DB 96
   \   000005   40           DB 64
   \   000006   C0           DB 192
   \   000007   80           DB 128

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EndDeviceID>`:
   \   000000   0400         DW 4

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??motor_up?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    motor_up

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??motor_down?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    motor_down

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Contrl_Step_motor?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Contrl_Step_motor

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_DeviceConnect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_DeviceConnect

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_44000000:
   \   000000   00000044     DD 44000000H
    527          
    528          /*********************************************************************
    529          *********************************************************************/

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     Contrl_Step_motor                0      0     16
       -> motor_down                  0      0     24
       -> motor_up                    0      0     24
     SampleApp_HandleKeys             0      0     22
       -> aps_FindGroup               0      0     20
       -> aps_RemoveGroup             0      0     20
       -> aps_AddGroup                0      0     20
     SampleApp_Init                   0      0     14
       -> MT_UartInit                 0      0     22
       -> MT_UartRegisterTaskID       0      0     22
       -> afRegister                  0      0     22
       -> RegisterForKeys             0      0     22
       -> osal_memcpy                 0      0     28
       -> aps_AddGroup                0      0     22
       -> HalLcdWriteString           0      0     22
     SampleApp_MessageMSGCB           0      0      0
     SampleApp_ProcessEvent           0      0     12
       -> osal_msg_receive            0      0     24
       -> SerialApp_DeviceConnect     0      0     24
       -> osal_msg_deallocate         0      0     24
       -> osal_msg_receive            0      0     24
       -> SampleApp_HandleKeys        0      0     24
       -> osal_start_timerEx          0      0     24
     SerialApp_DeviceConnect          2      0     48
       -> NLME_GetShortAddr           0      0     54
       -> AF_DataRequest              0      0     72
     motor_down                       0      0     28
       -> Delay_ms                    0      0     32
     motor_up                         0      0     28
       -> Delay_ms                    0      0     32


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     _A_P0                              1
     P0SEL                              1
     P0DIR                              1
     SampleApp_ClusterList             12
     SampleApp_SimpleDesc              12
     SampleApp_epDesc                   6
     SampleApp_TaskID                   1
     SampleApp_NwkState                 1
     SampleApp_TransID                  1
     SampleApp_Periodic_DstAddr        12
     SampleApp_Flash_DstAddr           12
     SampleApp_P2P_DstAddr             12
     SampleApp_Group                   18
     SampleAppPeriodicCounter           1
     SampleAppFlashCounter              1
     FFW                                8
     REV                                8
     EndDeviceID                        2
     SampleApp_Init                   191
     SampleApp_ProcessEvent           135
     ?Subroutine0                       5
     SampleApp_HandleKeys              46
     ?Subroutine1                       5
     SampleApp_MessageMSGCB             3
     motor_up                          81
     ?Subroutine2                       5
     ?Subroutine3                      22
     motor_down                        83
     Contrl_Step_motor                 48
     SerialApp_DeviceConnect          169
     ?<Initializer for FFW>             8
     ?<Initializer for REV>             8
     ?<Initializer for EndDeviceID>     2
     ??SampleApp_Init?relay             6
     ??SampleApp_ProcessEvent?relay     6
     ??SampleApp_HandleKeys?relay       6
     ??SampleApp_MessageMSGCB?relay     6
     ??motor_up?relay                   6
     ??motor_down?relay                 6
     ??Contrl_Step_motor?relay          6
     ??SerialApp_DeviceConnect?relay    6
     ?<Constant "Group 1">              8
     ?<Constant "SampleApp">           10
     ?<Constant {0}>                    5
     __Constant_44000000                4

 
 793 bytes in segment BANKED_CODE
  48 bytes in segment BANK_RELAYS
   3 bytes in segment SFR_AN
  18 bytes in segment XDATA_I
  18 bytes in segment XDATA_ID
  51 bytes in segment XDATA_ROM_C
  65 bytes in segment XDATA_Z
 
 859 bytes of CODE  memory
  47 bytes of CONST memory (+ 4 bytes shared)
   0 bytes of DATA  memory (+ 3 bytes shared)
  83 bytes of XDATA memory

Errors: none
Warnings: 5
