###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         08/Nov/2015  16:12:40 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\Source\SampleApp.c               #
#    Command line       =  -f E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ #
#                          ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC253 #
#                          0DB\f8wEndev.cfg (-DCPU32MHZ -DROOT=__near_func    #
#                          -DBLINK_LEDS) -f E:\work\zigbee\taobao\work\WIFI-Z #
#                          igBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0        #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\Source\SampleApp.c -D ZIGBEEPRO  #
#                          -D NWK_AUTO_POLL -D ZTOOL_P1 -D xMT_TASK -D        #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          LCD_SUPPORTED=DEBUG -lC E:\work\zigbee\taobao\work #
#                          \WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂ #
#                          À3-rfid\Projects\zstack\Samples\SampleApp\CC2530DB #
#                          \EndDeviceEB-Pro\List\ -lA                         #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\   #
#                          --diag_suppress Pe001,Pa010 -o                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\    #
#                          -e --debug --core=plain --dptr=16,1                #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ #
#                          ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zsta #
#                          ck\Samples\SampleApp\CC2530DB\ -I                  #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\SOURCE\ -I           #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB #
#                          \ -I E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ #
#                          ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\MT\ -I E:\work\zigbee\taobao\work\WIFI-Zig #
#                          Beeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\..\..\.. #
#                          \..\..\COMPONENTS\HAL\INCLUDE\ -I                  #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\HAL\TARGET\CC2530EB\ -I                         #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\OSAL\MCU\CCSOC\ -I E:\work\zigbee\taobao\work\W #
#                          IFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3 #
#                          -rfid\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\STACK\AF\ -I E:\work\zigbee\taobao\work\WIFI-Zi #
#                          gBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\COMPONENTS\STACK\NWK\ -I                   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\STACK\SEC\ -I E:\work\zigbee\taobao\work\WIFI-Z #
#                          igBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\STACK\SAPI\ -I                 #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\STACK\SYS\ -I E:\work\zigbee\taobao\work\WIFI-Z #
#                          igBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\..\ #
#                          ..\..\..\COMPONENTS\STACK\ZDO\ -I                  #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\ZMAC\F8W\ -I E:\work\zigbee\taobao\work\WIFI-Zi #
#                          gBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\COMPONENTS\ZMAC\ -I                        #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\SERVICES\SADDR\ -I E:\work\zigbee\taobao\work\W #
#                          IFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3 #
#                          -rfid\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I        #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\MAC\INCLUDE\ -I E:\work\zigbee\taobao\work\WIFI #
#                          -ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rf #
#                          id\Projects\zstack\Samples\SampleApp\CC2530DB\..\. #
#                          .\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I           #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\MAC\LOW_LEVEL\srf04\ -I                         #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPONEN #
#                          TS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz           #
#    List file          =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\List\Sa #
#                          mpleApp.lst                                        #
#    Object file        =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj\Sam #
#                          pleApp.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "stdio.h"
     78          #include "mfrc522.h"
     79          
     80          /*********************************************************************
     81           * MACROS
     82           */
     83          
     84          /*********************************************************************
     85           * CONSTANTS
     86           */
     87          
     88          /*********************************************************************
     89           * TYPEDEFS
     90           */
     91          
     92          /*********************************************************************
     93           * GLOBAL VARIABLES
     94           */
     95          
     96          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     97          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0500         DW 5
   \   00000A   0600         DW 6
     98          {
     99            SERIALAPP_CONNECTREQ_CLUSTER,//”√”⁄…œ¥´÷’∂À∂Ãµÿ÷∑
    100            SAMPLEAPP_END1,
    101            SAMPLEAPP_END2,
    102            SAMPLEAPP_END3,
    103            SAMPLEAPP_END4,
    104            SAMPLEAPP_END5
    105          };
    106          

   \                                 In  segment XDATA_ROM_C, align 1
    107          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    108          {
    109            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    110            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    111            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    112            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    113            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    114            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    115            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    116            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    117            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    118          };
    119          
    120          // This is the Endpoint/Interface description.  It is defined here, but
    121          // filled-in in SampleApp_Init().  Another way to go would be to fill
    122          // in the structure here and make it a "const" (in code space).  The
    123          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    124          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    125          
    126          /*********************************************************************
    127           * EXTERNAL VARIABLES
    128           */
    129          
    130          /*********************************************************************
    131           * EXTERNAL FUNCTIONS
    132           */
    133          
    134          /*********************************************************************
    135           * LOCAL VARIABLES
    136           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138                                    // This variable will be received when
    139                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    143          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          afAddrType_t SampleApp_Periodic_DstAddr; //π„≤•
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_Flash_DstAddr;    //◊È≤•
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          afAddrType_t SampleApp_P2P_DstAddr;      //µ„≤•
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    147          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    149          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    152          
    153          
    154          /////////////////////////////rfid∂®“Â////////////////////
    155          
    156          //M1ø®µƒƒ≥“ªøÈ–¥Œ™»Áœ¬∏Ò Ω£¨‘Ú∏√øÈŒ™«Æ∞¸£¨ø…Ω” ’ø€øÓ∫Õ≥‰÷µ√¸¡Ó
    157          //4◊÷Ω⁄Ω∂Ó£®µÕ◊÷Ω⁄‘⁄«∞£©£´4◊÷Ω⁄Ω∂Ó»°∑¥£´4◊÷Ω⁄Ω∂Ó£´1◊÷Ω⁄øÈµÿ÷∑£´1
    158          //◊÷Ω⁄øÈµÿ÷∑»°∑¥£´1◊÷Ω⁄øÈµÿ÷∑£´1◊÷Ω⁄øÈµÿ÷∑»°∑¥ 

   \                                 In  segment XDATA_I, align 1, keep-with-next
    159          unsigned char data2[4]  = {0x12,0,0,0};
   \                     data2:
   \   000000                DS 4
   \   000004                REQUIRE `?<Initializer for data2>`
   \   000004                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    160          unsigned char DefaultKey[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; 
   \                     DefaultKey:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for DefaultKey>`
   \   000006                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          unsigned char g_ucTempbuf[20];    
   \                     g_ucTempbuf:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    162          unsigned char MLastSelectedSnr[4];
   \                     MLastSelectedSnr:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    163          unsigned char RevBuffer[30];  
   \                     RevBuffer:
   \   000000                DS 30
   \   00001E                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    164          unsigned char SerBuffer[20]; 
   \                     SerBuffer:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165          unsigned char CmdValid; 
   \                     CmdValid:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          unsigned char waitCommData=1;
   \                     waitCommData:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for waitCommData>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    167          uint8 sendRfiddata=1;  // «∑Ò∑¢ÀÕRFID ˝æ›
   \                     sendRfiddata:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for sendRfiddata>`
   \   000001                REQUIRE __INIT_XDATA_I
    168          
    169          //---------------------------------------------------------------------
    170          //±Í◊º∞Ê≤ªÕ¨µƒ÷’∂À–Ë“™–ﬁ∏ƒ¥ÀID,”√”⁄ ∂±–≠µ˜∆˜∑¢π˝¿¥µƒ ˝æ›£¨IDœ‡Õ¨‘Ú¥¶¿Ì
    171          //◊®“µ∞Ê◊‘∂Ø¥”FlashªÒµ√µÿ÷∑£¨À˘”–÷’∂ÀπÃº˛œ‡Õ¨£¨  ∫œ¡ø≤˙

   \                                 In  segment XDATA_I, align 1, keep-with-next
    172          static uint16 EndDeviceID = 0x0003; //÷’∂ÀID£¨∑«≥£÷ÿ“™
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for EndDeviceID>`
   \   000002                REQUIRE __INIT_XDATA_I
    173          
    174          
    175          
    176          /*********************************************************************
    177           * LOCAL FUNCTIONS
    178           */
    179          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    180          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    181          void SampleApp_SendPeriodicMessage( void );
    182          void SerialApp_DeviceConnect();
    183          void SerialApp_Rfid_Message( void );
    184          
    185          /*********************************************************************
    186           * NETWORK LAYER CALLBACKS
    187           */
    188          
    189          /*********************************************************************
    190           * PUBLIC FUNCTIONS
    191           */
    192          
    193          /*********************************************************************
    194           * @fn      SampleApp_Init
    195           *
    196           * @brief   Initialization function for the Generic App Task.
    197           *          This is called during initialization and should contain
    198           *          any application specific initialization (ie. hardware
    199           *          initialization/setup, table initialization, power up
    200           *          notificaiton ... ).
    201           *
    202           * @param   task_id - the ID assigned by OSAL.  This ID should be
    203           *                    used to send messages and set timers.
    204           *
    205           * @return  none
    206           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    207          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    208          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    209            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    210            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    211            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    212            
    213            MT_UartInit();                  //¥Æø⁄≥ı ºªØ
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    214            MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    215          
    216              P0DIR |= 0xF0; //P0_4°¢P0_5°¢P0_6°¢P0_7∂®“ÂŒ™ ‰≥ˆ
   \   00001E   43FDF0       ORL     0xfd,#0xf0
    217              P1DIR |= 0x01;//p1_0 ‰≥ˆ
   \   000021   43FE01       ORL     0xfe,#0x1
    218          
    219              P0 |= 0xF0; //P0_4°¢P0_5°¢P0_6°¢P0_7 ‰≥ˆ1
   \   000024   4380F0       ORL     0x80,#0xf0
    220              P1 |= 0x01; //P1_0 ‰≥ˆ∏ﬂµÁ∆Ω
   \   000027   D290         SETB    0x90.0
    221          
    222              P0SEL &= ~0x40;                  //…Ë÷√P0.6ø⁄Œ™∆’Õ®IO
   \   000029   53F3BF       ANL     0xf3,#0xbf
    223              P0DIR &= ~0x40;                  //…Ë÷√P0.6Œ™ ‰»Î
   \   00002C   53FDBF       ANL     0xfd,#0xbf
    224          
    225              P1SEL &= ~0x02;                  //…Ë÷√P11ø⁄Œ™∆’Õ®IO
   \   00002F   53F4FD       ANL     0xf4,#0xfd
    226              P1DIR |= 0x02;                  //…Ë÷√P11Œ™ ‰≥ˆ
   \   000032   43FE02       ORL     0xfe,#0x2
    227              
    228              P0_7=1;
   \   000035   D287         SETB    0x80.7
    229              
    230              CmdValid=0; 
   \   000037   90....       MOV     DPTR,#CmdValid
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
    231          
    232              PcdReset();
   \   00003C                ; Setup parameters for call to function PcdReset
   \   00003C   12....       LCALL   ??PcdReset?relay
    233              PcdAntennaOff(); 
   \   00003F                ; Setup parameters for call to function PcdAntennaOff
   \   00003F   12....       LCALL   ??PcdAntennaOff?relay
    234              PcdAntennaOn();  
   \   000042                ; Setup parameters for call to function PcdAntennaOn
   \   000042   12....       LCALL   ??PcdAntennaOn?relay
    235              M500PcdConfigISOType( 'A' );
   \   000045                ; Setup parameters for call to function M500PcdConfigISOType
   \   000045   7941         MOV     R1,#0x41
   \   000047   12....       LCALL   ??M500PcdConfigISOType?relay
    236          
    237          
    238            
    239            // Device hardware initialization can be added here or in main() (Zmain.c).
    240            // If the hardware is application specific - add it here.
    241            // If the hardware is other parts of the device add it in main().
    242          
    243           #if defined ( BUILD_ALL_DEVICES )
    244            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    245            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    246            // together - if they are - we will start up a coordinator. Otherwise,
    247            // the device will start as a router.
    248            if ( readCoordinatorJumper() )
    249              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;dd
    250            else
    251              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    252          #endif // BUILD_ALL_DEVICES
    253          
    254          #if defined ( HOLD_AUTO_START )
    255            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    256            //  from starting the device and wait for the application to
    257            //  start the device.
    258            ZDOInitDevice(0);ee
    259          #endif
    260          
    261            // Setup for the periodic message's destination address
    262            // Broadcast to everyone
    263            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00004A   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00004D   740F         MOV     A,#0xf
   \   00004F   F0           MOVX    @DPTR,A
    264            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000050   A3           INC     DPTR
   \   000051   7414         MOV     A,#0x14
   \   000053   F0           MOVX    @DPTR,A
    265            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000054   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000057   74FF         MOV     A,#-0x1
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   F0           MOVX    @DPTR,A
    266          
    267            // Setup for the flash command's destination address - Group 1
    268            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00005C   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00005F   7401         MOV     A,#0x1
   \   000061   F0           MOVX    @DPTR,A
    269            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000062   A3           INC     DPTR
   \   000063   7414         MOV     A,#0x14
   \   000065   F0           MOVX    @DPTR,A
    270            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000066   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000069   7401         MOV     A,#0x1
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
    271            
    272            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µ„≤• 
   \   00006F   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000072   7402         MOV     A,#0x2
   \   000074   F0           MOVX    @DPTR,A
    273            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000075   A3           INC     DPTR
   \   000076   7414         MOV     A,#0x14
   \   000078   F0           MOVX    @DPTR,A
    274            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //∑¢∏¯–≠µ˜∆˜
   \   000079   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00007C   E4           CLR     A
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   F0           MOVX    @DPTR,A
    275          
    276            // Fill out the endpoint description.
    277            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000080   90....       MOV     DPTR,#SampleApp_epDesc
   \   000083   7414         MOV     A,#0x14
   \   000085   F0           MOVX    @DPTR,A
    278            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000086   A3           INC     DPTR
   \   000087   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00008D   F0           MOVX    @DPTR,A
    279            SampleApp_epDesc.simpleDesc
    280                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00008E   A3           INC     DPTR
   \   00008F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000095   F0           MOVX    @DPTR,A
    281            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000096   A3           INC     DPTR
   \   000097   E4           CLR     A
   \   000098   F0           MOVX    @DPTR,A
    282          
    283            // Register the endpoint description with the AF
    284            afRegister( &SampleApp_epDesc );
   \   000099                ; Setup parameters for call to function afRegister
   \   000099   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00009B   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00009D   12....       LCALL   ??afRegister?relay
    285          
    286            // Register for all key events - This app will handle all key events
    287            RegisterForKeys( SampleApp_TaskID );
   \   0000A0                ; Setup parameters for call to function RegisterForKeys
   \   0000A0   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   F9           MOV     R1,A
   \   0000A5   12....       LCALL   ??RegisterForKeys?relay
    288          
    289            // By default, all devices start out in Group 1
    290            SampleApp_Group.ID = 0x0001;
   \   0000A8   90....       MOV     DPTR,#SampleApp_Group
   \   0000AB   7401         MOV     A,#0x1
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   E4           CLR     A
   \   0000B0   F0           MOVX    @DPTR,A
    291            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000B4   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000B7   F5..         MOV     ?V0 + 2,A
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   7C07         MOV     R4,#0x7
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000C4   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000C6   12....       LCALL   ??osal_memcpy?relay
   \   0000C9   7403         MOV     A,#0x3
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
    292            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000CE                ; Setup parameters for call to function aps_AddGroup
   \   0000CE   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000D0   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000D2   7914         MOV     R1,#0x14
   \   0000D4   12....       LCALL   ??aps_AddGroup?relay
    293          
    294          #if defined ( LCD_SUPPORTED )
    295            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000D7                ; Setup parameters for call to function HalLcdWriteString
   \   0000D7   7901         MOV     R1,#0x1
   \   0000D9   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000DB   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000DD   12....       LCALL   ??HalLcdWriteString?relay
    296          #endif
    297          }
   \   0000E0                REQUIRE ?Subroutine0
   \   0000E0                REQUIRE P0DIR
   \   0000E0                REQUIRE P1DIR
   \   0000E0                REQUIRE _A_P0
   \   0000E0                REQUIRE _A_P1
   \   0000E0                REQUIRE P0SEL
   \   0000E0                REQUIRE P1SEL
   \   0000E0                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    298          
    299          /*********************************************************************
    300           * @fn      SampleApp_ProcessEvent
    301           *
    302           * @brief   Generic Application Task event processor.  This function
    303           *          is called to process all events for the task.  Events
    304           *          include timers, messages and any other user defined events.
    305           *
    306           * @param   task_id  - The OSAL assigned task ID.
    307           * @param   events - events to process.  This is a bit map and can
    308           *                   contain more than one event.
    309           *
    310           * @return  none
    311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    312          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    313          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    314            afIncomingMSGPacket_t *MSGpkt;
    315            (void)task_id;  // Intentionally unreferenced parameter
    316          
    317            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   606A         JZ      ??SampleApp_ProcessEvent_0
    318            {
    319              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8029         SJMP    ??SampleApp_ProcessEvent_1
    320              while ( MSGpkt )
    321              {
    322                switch ( MSGpkt->hdr.event )
    323                {
    324                  // Received when a key is pressed
    325                  case KEY_CHANGE:
    326                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    327                    break;
    328          
    329                  // Received when a messages is received (OTA) for this endpoint
    330                  case AF_INCOMING_MSG_CMD:
    331                    SampleApp_MessageMSGCB( MSGpkt );
    332                    break;
    333          
    334                  // Received whenever the device changes state in the network
    335                  case ZDO_STATE_CHANGE:
    336                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    337                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    338                           (SampleApp_NwkState == DEV_ROUTER)
    339                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7013         JNZ     ??SampleApp_ProcessEvent_4
    340                    {
    341                      SerialApp_DeviceConnect();//…œ¥´÷’∂Àµƒ∂Ãµÿ÷∑            
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function SerialApp_DeviceConnect
   \   00001E   12....       LCALL   ??SerialApp_DeviceConnect?relay
    342                      // Start sending the periodic message in a regular interval.
    343                      osal_start_timerEx( SampleApp_TaskID,
    344                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    345                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   7CD0         MOV     R4,#-0x30
   \   000023   7D07         MOV     R5,#0x7
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay
    346                    }
    347                    else
    348                    {
    349                      // Device is no longer in the network
    350                    }
    351                    break;
    352          
    353                  default:
    354                    break;
    355                }
    356          
    357                // Release the memory
    358                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000031                ; Setup parameters for call to function osal_msg_deallocate
   \   000031   AA..         MOV     R2,?V0 + 0
   \   000033   AB..         MOV     R3,?V0 + 1
   \   000035   12....       LCALL   ??osal_msg_deallocate?relay
    359          
    360                // Next - if one is available
    361                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000038   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_receive?relay
   \   000040   8A..         MOV     ?V0 + 0,R2
   \   000042   8B..         MOV     ?V0 + 1,R3
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   6025         JZ      ??SampleApp_ProcessEvent_5
   \   00004A   85..82       MOV     DPL,?V0 + 0
   \   00004D   85..83       MOV     DPH,?V0 + 1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   2440         ADD     A,#0x40
   \   000053   6006         JZ      ??SampleApp_ProcessEvent_6
   \   000055   24EF         ADD     A,#-0x11
   \   000057   60B6         JZ      ??SampleApp_ProcessEvent_2
   \   000059   80D6         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   00005B                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   85..82       MOV     DPL,?V0 + 0
   \   000063   85..83       MOV     DPH,?V0 + 1
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   F9           MOV     R1,A
   \   00006A   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006D   80C2         SJMP    ??SampleApp_ProcessEvent_4
    362              }
    363          
    364              // return unprocessed events
    365              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00006F   EE           MOV     A,R6
   \   000070   FA           MOV     R2,A
   \   000071   EF           MOV     A,R7
   \   000072   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_7:
   \   000074   FB           MOV     R3,A
   \   000075   8023         SJMP    ??SampleApp_ProcessEvent_8
    366            }
    367          
    368            // Send a message out - This event is generated by a timer
    369            //  (setup in SampleApp_Init()).
    370            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000077   EE           MOV     A,R6
   \   000078   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007A   501A         JNC     ??SampleApp_ProcessEvent_9
    371            {
    372              // Send the periodic message
    373          
    374              SerialApp_Rfid_Message();
   \   00007C                ; Setup parameters for call to function SerialApp_Rfid_Message
   \   00007C   12....       LCALL   ??SerialApp_Rfid_Message?relay
    375          
    376              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    377                  100 );
   \   00007F                ; Setup parameters for call to function osal_start_timerEx
   \   00007F   7C64         MOV     R4,#0x64
   \   000081   7D00         MOV     R5,#0x0
   \   000083   7A01         MOV     R2,#0x1
   \   000085   7B00         MOV     R3,#0x0
   \   000087   90....       MOV     DPTR,#SampleApp_TaskID
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??osal_start_timerEx?relay
    378          
    379              // return unprocessed events
    380              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   00008F   EE           MOV     A,R6
   \   000090   6401         XRL     A,#0x1
   \   000092   FA           MOV     R2,A
   \   000093   EF           MOV     A,R7
   \   000094   80DE         SJMP    ??SampleApp_ProcessEvent_7
    381            }
    382          
    383            // Discard unknown events
    384            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   000096   7A00         MOV     R2,#0x0
   \   000098   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_8:
   \   00009A   7F04         MOV     R7,#0x4
   \   00009C   02....       LJMP    ?BANKED_LEAVE_XDATA
    385          }
    386          
    387          /*********************************************************************
    388           * Event Generation Functions
    389           */
    390          /*********************************************************************
    391           * @fn      SampleApp_HandleKeys
    392           *
    393           * @brief   Handles all key events for this device.
    394           *
    395           * @param   shift - true if in shift/alt.
    396           * @param   keys - bit field for key events. Valid entries:
    397           *                 HAL_KEY_SW_2
    398           *                 HAL_KEY_SW_1
    399           *
    400           * @return  none
    401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    403          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    404            (void)shift;  // Intentionally unreferenced parameter
    405            
    406            if ( keys & HAL_KEY_SW_1 )
    407            {
    408              /* This key sends the Flash Command is sent to Group 1.
    409               * This device will not receive the Flash Command from this
    410               * device (even if it belongs to group 1).
    411               */
    412            }
    413          
    414            if ( keys & HAL_KEY_SW_2 )
   \   000006   A2E1         MOV     C,0xE0 /* A   */.1
   \   000008   5024         JNC     ??SampleApp_HandleKeys_0
    415            {
    416              /* The Flashr Command is sent to Group 1.
    417               * This key toggles this device in and out of group 1.
    418               * If this device doesn't belong to group 1, this application
    419               * will not receive the Flash command sent to group 1.
    420               */
    421              aps_Group_t *grp;
    422              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    423              if ( grp )
   \   00000A                ; Setup parameters for call to function aps_FindGroup
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   7914         MOV     R1,#0x14
   \   000010   12....       LCALL   ??aps_FindGroup?relay
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V0 + 1
   \   000018   600B         JZ      ??SampleApp_HandleKeys_1
    424              {
    425                // Remove from the group
    426                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   00001A                ; Setup parameters for call to function aps_RemoveGroup
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   7914         MOV     R1,#0x14
   \   000020   12....       LCALL   ??aps_RemoveGroup?relay
   \   000023   8009         SJMP    ??SampleApp_HandleKeys_0
    427              }
    428              else
    429              {
    430                // Add to the flash group
    431                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_1:
   \   000025                ; Setup parameters for call to function aps_AddGroup
   \   000025   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000027   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000029   7914         MOV     R1,#0x14
   \   00002B   12....       LCALL   ??aps_AddGroup?relay
    432              }
    433            }
    434          }
   \                     ??SampleApp_HandleKeys_0:
   \   00002E   02....       LJMP    ??Subroutine7_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    435          
    436          
    437          /*********************************************************************
    438           * @fn      SampleApp_MessageMSGCB
    439           *
    440           * @brief   Data message processor callback.  This function processes
    441           *          any incoming data - probably from other devices.  So, based
    442           *          on cluster ID, perform the intended action.
    443           *
    444           * @param   none
    445           *
    446           * @return  none
    447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    449          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    450              uint16 flashTime;
                            ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    451          
    452              switch ( pkt->clusterId )
    453              {
    454              case SAMPLEAPP_END3:
    455                  {
    456                  break;
    457                  }
    458              default:
    459                  break;
    460            }
    461          }
   \   000000   02....       LJMP    ?BRET
    462          
    463          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    464          void iccardcode()
   \                     iccardcode:
    465          {	     
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    466            	unsigned char cmd;
    467          	unsigned char status;
    468          	
    469          	cmd = RevBuffer[0];
    470          	switch(cmd)
   \   000005   90....       MOV     DPTR,#RevBuffer + 1
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   FA           MOV     R2,A
   \   00000D   90....       MOV     DPTR,#RevBuffer
   \   000010   E0           MOVX    A,@DPTR
   \   000011   14           DEC     A
   \   000012   6034         JZ      ??iccardcode_0
   \   000014   14           DEC     A
   \   000015   6038         JZ      ??iccardcode_1
   \   000017   14           DEC     A
   \   000018   605B         JZ      ??iccardcode_2
   \   00001A   14           DEC     A
   \   00001B   7003         JNZ     $+5
   \   00001D   02....       LJMP    ??iccardcode_3 & 0xFFFF
   \   000020   14           DEC     A
   \   000021   7003         JNZ     $+5
   \   000023   02....       LJMP    ??iccardcode_4 & 0xFFFF
   \   000026   14           DEC     A
   \   000027   6041         JZ      ??iccardcode_5
   \   000029   14           DEC     A
   \   00002A   603E         JZ      ??iccardcode_5
   \   00002C   14           DEC     A
   \   00002D   7003         JNZ     $+5
   \   00002F   02....       LJMP    ??iccardcode_6 & 0xFFFF
   \   000032   14           DEC     A
   \   000033   7003         JNZ     $+5
   \   000035   02....       LJMP    ??iccardcode_7 & 0xFFFF
   \   000038   14           DEC     A
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??iccardcode_8 & 0xFFFF
   \   00003E   24FE         ADD     A,#-0x2
   \   000040   7003         JNZ     $+5
   \   000042   02....       LJMP    ??iccardcode_9 & 0xFFFF
   \   000045   02....       LJMP    ??iccardcode_10 & 0xFFFF
    471           	{
    472          		case 1:     // Halt the card     //÷’÷πø®µƒ≤Ÿ◊˜
    473          			status= PcdHalt();			
   \                     ??iccardcode_0:
   \   000048                ; Setup parameters for call to function PcdHalt
   \   000048   12....       LCALL   ??PcdHalt?relay
   \                     ??iccardcode_11:
   \   00004B   E9           MOV     A,R1
   \   00004C   FE           MOV     R6,A
   \   00004D   801B         SJMP    ??iccardcode_5
    474          			RevBuffer[0]=1;
    475          			RevBuffer[1]=status;
    476          			break;			
    477          		case 2:     // Request,Anticoll,Select,return CardType(2 bytes)+CardSerialNo(4 bytes)
    478          			        // —∞ø®£¨∑¿≥ÂÕª£¨—°‘Òø®    ∑µªÿø®¿‡–Õ£®2 bytes£©+ ø®œµ¡–∫≈(4 bytes)
    479          			status= PcdRequest(RevBuffer[1],&RevBuffer[2]);
   \                     ??iccardcode_1:
   \   00004F                ; Setup parameters for call to function PcdRequest
   \   00004F   7A..         MOV     R2,#(RevBuffer + 2) & 0xff
   \   000051   7B..         MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
   \   000053   12....       LCALL   ??PcdRequest?relay
   \   000056   E9           MOV     A,R1
   \   000057   FE           MOV     R6,A
    480          			if(status!=0)
   \   000058   6053         JZ      ??iccardcode_12
    481          			{
    482          				status= PcdRequest(RevBuffer[1],&RevBuffer[2]);
   \   00005A                ; Setup parameters for call to function PcdRequest
   \   00005A   7A..         MOV     R2,#(RevBuffer + 2) & 0xff
   \   00005C   7B..         MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
   \   00005E   90....       MOV     DPTR,#RevBuffer + 1
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F9           MOV     R1,A
   \   000063   12....       LCALL   ??PcdRequest?relay
   \   000066   E9           MOV     A,R1
   \   000067   FE           MOV     R6,A
    483          				if(status!=0)				
   \   000068   6043         JZ      ??iccardcode_12
    484          				{
    485          					RevBuffer[0]=1;	
   \                     ??iccardcode_5:
   \   00006A   90....       MOV     DPTR,#RevBuffer
   \                     ??iccardcode_13:
   \   00006D   7401         MOV     A,#0x1
   \                     ??iccardcode_14:
   \   00006F   F0           MOVX    @DPTR,A
    486          					RevBuffer[1]=status;
   \   000070   EE           MOV     A,R6
   \   000071   A3           INC     DPTR
   \   000072   02....       LJMP    ??iccardcode_15 & 0xFFFF
    487          					break;
    488          				}
    489          			}  
    490          			RevBuffer[0]=3;	
    491          			RevBuffer[1]=status;
    492          			break;
    493          			
    494          		case 3:                         // ∑¿≥ÂÕª ∂¡ø®µƒœµ¡–∫≈ MLastSelectedSnr
    495          			status = PcdAnticoll(&RevBuffer[2]);
   \                     ??iccardcode_2:
   \   000075                ; Setup parameters for call to function PcdAnticoll
   \   000075   7A..         MOV     R2,#(RevBuffer + 2) & 0xff
   \   000077   7B..         MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
   \   000079   12....       LCALL   ??PcdAnticoll?relay
   \   00007C   E9           MOV     A,R1
   \   00007D   FE           MOV     R6,A
    496          			if(status!=0)
   \   00007E   70EA         JNZ     ??iccardcode_5
    497          			{
    498          				RevBuffer[0]=1;	
    499          				RevBuffer[1]=status;
    500          				break;
    501          			}
    502          			memcpy(MLastSelectedSnr,&RevBuffer[2],4);
                 			^
Warning[Pe223]: function "memcpy" declared implicitly
   \   000080                ; Setup parameters for call to function memcpy
   \   000080   75..04       MOV     ?V0 + 0,#0x4
   \   000083   75..00       MOV     ?V0 + 1,#0x0
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   7C..         MOV     R4,#(RevBuffer + 2) & 0xff
   \   00008D   7D..         MOV     R5,#((RevBuffer + 2) >> 8) & 0xff
   \   00008F   7A..         MOV     R2,#MLastSelectedSnr & 0xff
   \   000091   7B..         MOV     R3,#(MLastSelectedSnr >> 8) & 0xff
   \   000093   12....       LCALL   ??memcpy?relay
   \   000096   7402         MOV     A,#0x2
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
    503          			RevBuffer[0]=5;
   \   00009B   90....       MOV     DPTR,#RevBuffer
   \   00009E   7405         MOV     A,#0x5
   \   0000A0   805F         SJMP    ??iccardcode_16
    504          			RevBuffer[1]=status;
    505          			break;	
    506          		case 4:		                    // —°‘Òø® Select Card
    507          			status=PcdSelect(MLastSelectedSnr);
   \                     ??iccardcode_3:
   \   0000A2                ; Setup parameters for call to function PcdSelect
   \   0000A2   7A..         MOV     R2,#MLastSelectedSnr & 0xff
   \   0000A4   7B..         MOV     R3,#(MLastSelectedSnr >> 8) & 0xff
   \   0000A6   12....       LCALL   ??PcdSelect?relay
   \   0000A9   E9           MOV     A,R1
   \   0000AA   FE           MOV     R6,A
    508          			if(status!=MI_OK)
   \   0000AB   70BD         JNZ     ??iccardcode_5
   \                     ??iccardcode_12:
   \   0000AD   90....       MOV     DPTR,#RevBuffer
   \   0000B0   7403         MOV     A,#0x3
   \   0000B2   80BB         SJMP    ??iccardcode_14
    509          			{
    510          				RevBuffer[0]=1;	
    511          				RevBuffer[1]=status;
    512          				break;
    513          			}
    514          			RevBuffer[0]=3;
    515          			RevBuffer[1]=status;			
    516          			break;
    517          		case 5:	    // Key loading into the MF RC500's EEPROM
    518                      status = PcdAuthState(RevBuffer[1], RevBuffer[3], DefaultKey, MLastSelectedSnr);// –£—Èø®√‹¬Î
   \                     ??iccardcode_4:
   \   0000B4                ; Setup parameters for call to function PcdAuthState
   \   0000B4   75....       MOV     ?V0 + 0,#MLastSelectedSnr & 0xff
   \   0000B7   75....       MOV     ?V0 + 1,#(MLastSelectedSnr >> 8) & 0xff
   \   0000BA   78..         MOV     R0,#?V0 + 0
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BF   7C..         MOV     R4,#DefaultKey & 0xff
   \   0000C1   7D..         MOV     R5,#(DefaultKey >> 8) & 0xff
   \   0000C3   90....       MOV     DPTR,#RevBuffer + 3
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   FA           MOV     R2,A
   \   0000C8   12....       LCALL   ??PcdAuthState?relay
   \   0000CB   7402         MOV     A,#0x2
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0   02....       LJMP    ??iccardcode_11 & 0xFFFF
    519          			RevBuffer[0]=1;
    520          			RevBuffer[1]=status;			
    521          			break;							
    522          		case 6: 
    523          			RevBuffer[0]=1;
    524          			RevBuffer[1]=status;			
    525          			break;				
    526          		case 7:     
    527              		RevBuffer[0]=1;
    528          			RevBuffer[1]=status;			
    529          			break;
    530          		case 8:     // Read the mifare card
    531          		            // ∂¡ø®
    532          			status=PcdRead(RevBuffer[1],&RevBuffer[2]);
   \                     ??iccardcode_6:
   \   0000D3                ; Setup parameters for call to function PcdRead
   \   0000D3   7A..         MOV     R2,#(RevBuffer + 2) & 0xff
   \   0000D5   7B..         MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
   \   0000D7   12....       LCALL   ??PcdRead?relay
   \   0000DA   E9           MOV     A,R1
   \   0000DB   FE           MOV     R6,A
    533          			if(status==0)
   \   0000DC   90....       MOV     DPTR,#RevBuffer
   \   0000DF   708C         JNZ     ??iccardcode_13
    534          			{RevBuffer[0]=17;}
   \   0000E1   7411         MOV     A,#0x11
   \   0000E3   808A         SJMP    ??iccardcode_14
    535          			else
    536          			{RevBuffer[0]=1;}
    537          			RevBuffer[1]=status;			
    538          			break;
    539          		case 9:     // Write the mifare card
    540          		            // –¥ø®  œ¬‘ÿ√‹¬Î
    541          			status=PcdWrite(RevBuffer[1],&RevBuffer[2]);
   \                     ??iccardcode_7:
   \   0000E5                ; Setup parameters for call to function PcdWrite
   \   0000E5   7A..         MOV     R2,#(RevBuffer + 2) & 0xff
   \   0000E7   7B..         MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
   \   0000E9   12....       LCALL   ??PcdWrite?relay
   \   0000EC   02....       LJMP    ??iccardcode_11 & 0xFFFF
    542          			RevBuffer[0]=1;
    543          			RevBuffer[1]=status;			
    544          			break;
    545          		case 10:
    546                      	PcdValue(RevBuffer[1],RevBuffer[2],&RevBuffer[3]);
   \                     ??iccardcode_8:
   \   0000EF                ; Setup parameters for call to function PcdValue
   \   0000EF   7C..         MOV     R4,#(RevBuffer + 3) & 0xff
   \   0000F1   7D..         MOV     R5,#((RevBuffer + 3) >> 8) & 0xff
   \   0000F3   12....       LCALL   ??PcdValue?relay
   \   0000F6   02....       LJMP    ??iccardcode_5 & 0xFFFF
    547          			RevBuffer[0]=1;	
    548          			RevBuffer[1]=status;
    549          			break;
    550          		case 12:    // ≤Œ ˝…Ë÷√
    551          		    PcdBakValue(RevBuffer[1], RevBuffer[2]);
   \                     ??iccardcode_9:
   \   0000F9                ; Setup parameters for call to function PcdBakValue
   \   0000F9   12....       LCALL   ??PcdBakValue?relay
    552          			RevBuffer[0]=1;	//contact
   \   0000FC   90....       MOV     DPTR,#RevBuffer
   \   0000FF   7401         MOV     A,#0x1
   \                     ??iccardcode_16:
   \   000101   F0           MOVX    @DPTR,A
    553          			RevBuffer[1]=0;
   \   000102   A3           INC     DPTR
   \   000103   E4           CLR     A
   \                     ??iccardcode_15:
   \   000104   F0           MOVX    @DPTR,A
    554          			break;		
    555          	}
    556          }
   \                     ??iccardcode_10:
   \   000105   02....       LJMP    ??Subroutine7_0 & 0xFFFF
    557          
    558          //BCD◊™ASC¬Î±Ì

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    559          char NumberToLetter(unsigned char number)
   \                     NumberToLetter:
    560          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   F8           MOV     R0,A
    561              char buff[]="0123456789ABCDEF";
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   AC82         MOV     R4,DPL
   \   000014   AD83         MOV     R5,DPH
   \   000016   7583..       MOV     DPH,#(`?<Constant "0123456789ABCDEF">` >> 8) & 0xff
   \   000019   7582..       MOV     DPL,#`?<Constant "0123456789ABCDEF">` & 0xff
   \   00001C   7411         MOV     A,#0x11
   \   00001E   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    562          
    563              if(number>15) return 0;
   \   000021   E8           MOV     A,R0
   \   000022   C3           CLR     C
   \   000023   9410         SUBB    A,#0x10
   \   000025   4004         JC      ??NumberToLetter_0
   \   000027   7900         MOV     R1,#0x0
   \   000029   8016         SJMP    ??NumberToLetter_1
    564          
    565              return buff[number];
   \                     ??NumberToLetter_0:
   \   00002B   88..         MOV     ?V0 + 0,R0
   \   00002D   85..82       MOV     DPL,?XSP + 0
   \   000030   85..83       MOV     DPH,?XSP + 1
   \   000033   E582         MOV     A,DPL
   \   000035   25..         ADD     A,?V0 + 0
   \   000037   F582         MOV     DPL,A
   \   000039   E583         MOV     A,DPH
   \   00003B   3400         ADDC    A,#0x0
   \   00003D   F583         MOV     DPH,A
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F9           MOV     R1,A
   \                     ??NumberToLetter_1:
   \   000041   02....       LJMP    ?Subroutine1 & 0xFFFF
    566          
    567          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7411         MOV     A,#0x11
   \   000002                REQUIRE ??Subroutine6_0
   \   000002                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine7_0
   \   000003                ; // Fall through to label ??Subroutine7_0
    568          
    569          //LCD∫Õ¥Æø⁄œ‘ æRFID–≈œ¢

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    570          void PrintfRfidCard(uint8* data, int len)
   \                     PrintfRfidCard:
    571          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    572              char card_buff[20]={0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    573          
    574              if(data[0]!=0)
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   E0           MOVX    A,@DPTR
   \   000024   604F         JZ      ??PrintfRfidCard_0
    575              {
    576                  sprintf(card_buff, "ID:%s", data);
   \   000026                ; Setup parameters for call to function sprintf
   \   000026   8A..         MOV     ?V0 + 0,R2
   \   000028   8B..         MOV     ?V0 + 1,R3
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   7C..         MOV     R4,#`?<Constant "ID:%s">` & 0xff
   \   000031   7D..         MOV     R5,#(`?<Constant "ID:%s">` >> 8) & 0xff
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   AA82         MOV     R2,DPL
   \   00003A   AB83         MOV     R3,DPH
   \   00003C   12....       LCALL   ??sprintf?relay
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
    577                  HalLcdWriteString( card_buff, HAL_LCD_LINE_3 );
   \   000044                ; Setup parameters for call to function HalLcdWriteString
   \   000044   7903         MOV     R1,#0x3
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??HalLcdWriteString?relay
    578                  HalUARTWrite (0, (uint8 *)card_buff, strlen(card_buff));
                                                              ^
Warning[Pe223]: function "strlen" declared implicitly
   \   000053                ; Setup parameters for call to function HalUARTWrite
   \   000053                ; Setup parameters for call to function strlen
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   AA82         MOV     R2,DPL
   \   00005B   AB83         MOV     R3,DPH
   \   00005D   12....       LCALL   ??strlen?relay
   \   000060   EA           MOV     A,R2
   \   000061   FC           MOV     R4,A
   \   000062   EB           MOV     A,R3
   \   000063   FD           MOV     R5,A
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   AA82         MOV     R2,DPL
   \   00006C   AB83         MOV     R3,DPH
   \   00006E   7900         MOV     R1,#0x0
   \   000070   12....       LCALL   ??HalUARTWrite?relay
   \   000073   8012         SJMP    ??PrintfRfidCard_1
    579              }
    580              else
    581              {
    582                  HalLcdWriteString( "", HAL_LCD_LINE_3 );
   \                     ??PrintfRfidCard_0:
   \   000075                ; Setup parameters for call to function HalLcdWriteString
   \   000075   7903         MOV     R1,#0x3
   \   000077   7A..         MOV     R2,#`?<Constant "">` & 0xff
   \   000079   7B..         MOV     R3,#(`?<Constant "">` >> 8) & 0xff
   \   00007B   12....       LCALL   ??HalLcdWriteString?relay
    583                  HalLcdWriteString( "", HAL_LCD_LINE_4 );
   \   00007E                ; Setup parameters for call to function HalLcdWriteString
   \   00007E   7904         MOV     R1,#0x4
   \   000080   7A..         MOV     R2,#`?<Constant "">` & 0xff
   \   000082   7B..         MOV     R3,#(`?<Constant "">` >> 8) & 0xff
   \   000084   12....       LCALL   ??HalLcdWriteString?relay
    584              }
    585          }
   \                     ??PrintfRfidCard_1:
   \   000087   7414         MOV     A,#0x14
   \   000089   80..         SJMP    ??Subroutine6_0
    586          
    587          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    588          void buzzerOn()
   \                     buzzerOn:
    589          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    590            P0_7=0;
   \   000004   C287         CLR     0x80.7
    591            MicroWait(10000);
   \   000006                ; Setup parameters for call to function Onboard_wait
   \   000006   12....       LCALL   ?Subroutine2 & 0xFFFF
    592            MicroWait(10000);
    593            MicroWait(10000);
    594            MicroWait(10000);
    595            MicroWait(10000);
    596            MicroWait(10000);
   \                     ??CrossCallReturnLabel_0:
   \   000009                ; Setup parameters for call to function Onboard_wait
   \   000009   12....       LCALL   ?Subroutine2 & 0xFFFF
    597            MicroWait(10000);
    598            MicroWait(10000);
    599            MicroWait(10000);
    600            MicroWait(10000);
    601            P0_7=1;
   \                     ??CrossCallReturnLabel_1:
   \   00000C   D287         SETB    0x80.7
    602          }
   \   00000E   D083         POP     DPH
   \   000010   D082         POP     DPL
   \   000012   02....       LJMP    ?BRET
   \   000015                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7A10         MOV     R2,#0x10
   \   000002   7B27         MOV     R3,#0x27
   \   000004   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000007   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00000A   12....       LCALL   ??Onboard_wait?relay
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ??Onboard_wait?relay
   \   000003                ; Setup parameters for call to function Onboard_wait
   \   000003                ; Setup parameters for call to function Onboard_wait
   \   000003                ; Setup parameters for call to function Onboard_wait
   \   000003                ; Setup parameters for call to function Onboard_wait
   \   000003   7A10         MOV     R2,#0x10
   \   000005   7B27         MOV     R3,#0x27
   \   000007   12....       LCALL   ??Onboard_wait?relay
   \   00000A                ; Setup parameters for call to function Onboard_wait
   \   00000A                ; Setup parameters for call to function Onboard_wait
   \   00000A                ; Setup parameters for call to function Onboard_wait
   \   00000A                ; Setup parameters for call to function Onboard_wait
   \   00000A   7A10         MOV     R2,#0x10
   \   00000C   7B27         MOV     R3,#0x27
   \   00000E   22           RET
    603          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    604          void SerialApp_Rfid_Message( void )
   \                     SerialApp_Rfid_Message:
    605          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    606          
    607              uint8 SendBuf[10]={0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   00001A   740A         MOV     A,#0xa
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    608              uint8 error=0;
    609              
    610              //—∞ø®√¸¡Ó
    611              RevBuffer[0]=0x02;
   \   00001F   90....       MOV     DPTR,#RevBuffer
   \   000022   7402         MOV     A,#0x2
   \   000024   F0           MOVX    @DPTR,A
    612              RevBuffer[1]=0x26;
   \   000025   A3           INC     DPTR
   \   000026   7426         MOV     A,#0x26
   \   000028   12....       LCALL   ?Subroutine3 & 0xFFFF
    613          
    614               // —∞ø®
    615              iccardcode();
    616          
    617              if(RevBuffer[1]==0)//—∞ø®≥…π¶
   \                     ??CrossCallReturnLabel_2:
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??SerialApp_Rfid_Message_0 & 0xFFFF
    618              {
    619                  //∂¡ø®√¸¡Ó
    620            //      SendBuf[0]=RevBuffer[2];  //data
    621            //      SendBuf[1]=RevBuffer[3];  //data        
    622          
    623                  //’“µΩø®
    624                  //∂¡ø®
    625                  RevBuffer[0]=0x03;
   \   000030   90....       MOV     DPTR,#RevBuffer
   \   000033   7403         MOV     A,#0x3
   \   000035   12....       LCALL   ?Subroutine3 & 0xFFFF
    626                  iccardcode();
    627          
    628                  if(RevBuffer[1]==0)
   \                     ??CrossCallReturnLabel_3:
   \   000038   6003         JZ      $+5
   \   00003A   02....       LJMP    ??SerialApp_Rfid_Message_0 & 0xFFFF
    629                  {
    630                      //∂¡ø®≥…π¶
    631                      //º«¬ºø®ID
    632          
    633                      for(int i=0; i<4; i++)
   \   00003D   75..00       MOV     ?V0 + 0,#0x0
   \   000040   75..00       MOV     ?V0 + 1,#0x0
    634                      {
    635                          unsigned char temp= RevBuffer[2+i];
   \                     ??SerialApp_Rfid_Message_1:
   \   000043   74..         MOV     A,#(RevBuffer + 2) & 0xff
   \   000045   25..         ADD     A,?V0 + 0
   \   000047   F582         MOV     DPL,A
   \   000049   74..         MOV     A,#((RevBuffer + 2) >> 8) & 0xff
   \   00004B   35..         ADDC    A,?V0 + 1
   \   00004D   F583         MOV     DPH,A
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   F5..         MOV     ?V0 + 2,A
    636                          SendBuf[i*2]=NumberToLetter((temp>>4)&0x0f);
   \   000052   E5..         MOV     A,?V0 + 0
   \   000054   C3           CLR     C
   \   000055   33           RLC     A
   \   000056   F8           MOV     R0,A
   \   000057   E5..         MOV     A,?V0 + 1
   \   000059   33           RLC     A
   \   00005A   F9           MOV     R1,A
   \   00005B   85..82       MOV     DPL,?XSP + 0
   \   00005E   85..83       MOV     DPH,?XSP + 1
   \   000061   E582         MOV     A,DPL
   \   000063   28           ADD     A,R0
   \   000064   FE           MOV     R6,A
   \   000065   E583         MOV     A,DPH
   \   000067   39           ADDC    A,R1
   \   000068   FF           MOV     R7,A
   \   000069                ; Setup parameters for call to function NumberToLetter
   \   000069   E5..         MOV     A,?V0 + 2
   \   00006B   C4           SWAP    A
   \   00006C   540F         ANL     A,#0xf
   \   00006E   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000071   F0           MOVX    @DPTR,A
    637                          SendBuf[i*2+1]=NumberToLetter(temp&0x0f);
   \   000072                ; Setup parameters for call to function NumberToLetter
   \   000072   740F         MOV     A,#0xf
   \   000074   55..         ANL     A,?V0 + 2
   \   000076   12....       LCALL   ?Subroutine4 & 0xFFFF
    638                      }
   \                     ??CrossCallReturnLabel_5:
   \   000079   A3           INC     DPTR
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   2401         ADD     A,#0x1
   \   00007F   F5..         MOV     ?V0 + 0,A
   \   000081   E5..         MOV     A,?V0 + 1
   \   000083   3400         ADDC    A,#0x0
   \   000085   F5..         MOV     ?V0 + 1,A
   \   000087   C3           CLR     C
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   9404         SUBB    A,#0x4
   \   00008C   E5..         MOV     A,?V0 + 1
   \   00008E   9400         SUBB    A,#0x0
   \   000090   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000092   65D0         XRL     A,PSW
   \   000094   33           RLC     A
   \   000095   40AC         JC      ??SerialApp_Rfid_Message_1
    639                      
    640                  }
    641                  else
    642                  {
    643                      error=1;
    644                  }
    645              }
    646              else
    647              {
    648                  error=1;
    649              }
    650          
    651              if(error>0)
    652              {
    653                  sendRfiddata=1;
    654                  SendBuf[0]=0;
    655                  PrintfRfidCard(SendBuf, 6);
    656              }
    657              else if(sendRfiddata==1)
   \   000097   90....       MOV     DPTR,#sendRfiddata
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   6401         XRL     A,#0x1
   \   00009D   7061         JNZ     ??SerialApp_Rfid_Message_2
    658              {
    659                  // ‰≥ˆœ‘ æ
    660                  PrintfRfidCard(SendBuf, 8);
   \   00009F                ; Setup parameters for call to function PrintfRfidCard
   \   00009F   7C08         MOV     R4,#0x8
   \   0000A1   7D00         MOV     R5,#0x0
   \   0000A3   85..82       MOV     DPL,?XSP + 0
   \   0000A6   85..83       MOV     DPH,?XSP + 1
   \   0000A9   AA82         MOV     R2,DPL
   \   0000AB   AB83         MOV     R3,DPH
   \   0000AD   12....       LCALL   ??PrintfRfidCard?relay
    661                  sendRfiddata=0;
   \   0000B0   90....       MOV     DPTR,#sendRfiddata
   \   0000B3   E4           CLR     A
   \   0000B4   F0           MOVX    @DPTR,A
    662           
    663                  //∑¢ÀÕ∏¯–≠µ˜∆˜
    664                  if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    665                                     SAMPLEAPP_END3,
    666                                     8,
    667                                     SendBuf,
    668                                     &SampleApp_TransID,
    669                                     AF_DISCV_ROUTE,
    670                                     AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   0000B5                ; Setup parameters for call to function AF_DataRequest
   \   0000B5   75..1E       MOV     ?V0 + 0,#0x1e
   \   0000B8   78..         MOV     R0,#?V0 + 0
   \   0000BA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BD   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   0000C0   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C8   7403         MOV     A,#0x3
   \   0000CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CD   8582..       MOV     ?V0 + 0,DPL
   \   0000D0   8583..       MOV     ?V0 + 1,DPH
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D8   75..08       MOV     ?V0 + 0,#0x8
   \   0000DB   75..00       MOV     ?V0 + 1,#0x0
   \   0000DE   78..         MOV     R0,#?V0 + 0
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   75..04       MOV     ?V0 + 0,#0x4
   \   0000E6   78..         MOV     R0,#?V0 + 0
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000EB   7920         MOV     R1,#0x20
   \   0000ED   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000EF   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000F1   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   0000F3   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   0000F5   12....       LCALL   ??AF_DataRequest?relay
   \   0000F8   7409         MOV     A,#0x9
   \   0000FA   12....       LCALL   ?DEALLOC_XSTACK8
    671                  {
    672                      
    673                  }
    674                  else
    675                  {
    676                  // Error occurred in request to send.
    677                  }    
    678                  
    679                  buzzerOn();
   \   0000FD                ; Setup parameters for call to function buzzerOn
   \   0000FD   12....       LCALL   ??buzzerOn?relay
    680              }
    681          }
   \                     ??SerialApp_Rfid_Message_2:
   \   000100   740A         MOV     A,#0xa
   \   000102   12....       LCALL   ?DEALLOC_XSTACK8
   \   000105   02....       LJMP    ?Subroutine0 & 0xFFFF
   \                     ??SerialApp_Rfid_Message_0:
   \   000108   90....       MOV     DPTR,#sendRfiddata
   \   00010B   7401         MOV     A,#0x1
   \   00010D   F0           MOVX    @DPTR,A
   \   00010E   85..82       MOV     DPL,?XSP + 0
   \   000111   85..83       MOV     DPH,?XSP + 1
   \   000114   E4           CLR     A
   \   000115   F0           MOVX    @DPTR,A
   \   000116                ; Setup parameters for call to function PrintfRfidCard
   \   000116   7C06         MOV     R4,#0x6
   \   000118   FD           MOV     R5,A
   \   000119   AA82         MOV     R2,DPL
   \   00011B   AB83         MOV     R3,DPH
   \   00011D   12....       LCALL   ??PrintfRfidCard?relay
   \   000120   80DE         SJMP    ??SerialApp_Rfid_Message_2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   F9           MOV     R1,A
   \   000001   12....       LCALL   ??NumberToLetter?relay
   \   000004   E9           MOV     A,R1
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function iccardcode
   \   000001                ; Setup parameters for call to function iccardcode
   \   000001   12....       LCALL   ??iccardcode?relay
   \   000004   90....       MOV     DPTR,#RevBuffer + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
    682          
    683          
    684          //∞—÷’∂Àµÿ÷∑…œ¥´∑˛ŒÒ∆˜

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          void  SerialApp_DeviceConnect()
   \                     SerialApp_DeviceConnect:
    686          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    687            uint16 nwkAddr;
    688            uint16 parentNwkAddr;
                          ^
Warning[Pe177]: variable "parentNwkAddr" was declared but never referenced
    689            char buff[5] = {0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>_2` & 0xff
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    690            afAddrType_t SerialApp_TxAddr;
    691            
    692            nwkAddr = NLME_GetShortAddr();
   \   00001F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001F   12....       LCALL   ??NLME_GetShortAddr?relay
    693          //  parentNwkAddr = NLME_GetCoordShortAddr();
    694            
    695            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000022   740D         MOV     A,#0xd
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
    696            SerialApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   740E         MOV     A,#0xe
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7414         MOV     A,#0x14
   \   000031   F0           MOVX    @DPTR,A
    697            SerialApp_TxAddr.addr.shortAddr = 0x0;
   \   000032   7405         MOV     A,#0x5
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
    698          
    699            buff[0] = EndDeviceID;
   \   00003B   90....       MOV     DPTR,#EndDeviceID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   F0           MOVX    @DPTR,A
    700            buff[1] = HI_UINT16( nwkAddr );
   \   000046   7401         MOV     A,#0x1
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   EB           MOV     A,R3
   \   00004C   F0           MOVX    @DPTR,A
    701            buff[2] = LO_UINT16( nwkAddr );
   \   00004D   7402         MOV     A,#0x2
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   EA           MOV     A,R2
   \   000053   F0           MOVX    @DPTR,A
    702            
    703            if ( AF_DataRequest( &SerialApp_TxAddr, &SampleApp_epDesc,
    704                                 SERIALAPP_CONNECTREQ_CLUSTER,
    705                                 3,
    706                                 (uint8*)buff,
    707                                 &SampleApp_TransID, 
    708                                 0, 
    709                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000054                ; Setup parameters for call to function AF_DataRequest
   \   000054   75..1E       MOV     ?V0 + 0,#0x1e
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005C   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   00005F   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   7403         MOV     A,#0x3
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   8582..       MOV     ?V0 + 0,DPL
   \   00006F   8583..       MOV     ?V0 + 1,DPH
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000077   75..03       MOV     ?V0 + 0,#0x3
   \   00007A   75..00       MOV     ?V0 + 1,#0x0
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   75..01       MOV     ?V0 + 0,#0x1
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7900         MOV     R1,#0x0
   \   00008C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00008E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000090   740E         MOV     A,#0xe
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   AA82         MOV     R2,DPL
   \   000097   AB83         MOV     R3,DPH
   \   000099   12....       LCALL   ??AF_DataRequest?relay
   \   00009C   7409         MOV     A,#0x9
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    710            {
    711            }
    712            else
    713            {
    714              // Error occurred in request to send.
    715            }
    716          }
   \   0000A1   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for data2>`:
   \   000000   12           DB 18
   \   000001   00           DB 0
   \   000002   00           DB 0
   \   000003   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for DefaultKey>`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for waitCommData>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for sendRfiddata>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EndDeviceID>`:
   \   000000   0300         DW 3

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??iccardcode?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    iccardcode

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NumberToLetter?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NumberToLetter

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??PrintfRfidCard?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    PrintfRfidCard

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??buzzerOn?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    buzzerOn

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_Rfid_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_Rfid_Message

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_DeviceConnect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_DeviceConnect

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "0123456789ABCDEF">`:
   \   000000   30313233     DB "0123456789ABCDEF"
   \            34353637
   \            38394142
   \            43444546
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   000000       DB 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ID:%s">`:
   \   000000   49443A25     DB "ID:%s"
   \            7300    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "">`:
   \   000000   00           DB ""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_2`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0
    717          /*********************************************************************
    718          *********************************************************************/

   Maximum stack usage in bytes:

     Function                     ISTACK PSTACK XSTACK
     --------                     ------ ------ ------
     NumberToLetter                   2      0     48
     PrintfRfidCard                   2      0     53
       -> sprintf                     0      0     64
       -> HalLcdWriteString           0      0     60
       -> strlen                      0      0     60
       -> HalUARTWrite                0      0     60
       -> HalLcdWriteString           0      0     60
       -> HalLcdWriteString           0      0     60
     SampleApp_HandleKeys             0      0     22
       -> aps_FindGroup               0      0     20
       -> aps_RemoveGroup             0      0     20
       -> aps_AddGroup                0      0     20
     SampleApp_Init                   0      0     14
       -> MT_UartInit                 0      0     22
       -> MT_UartRegisterTaskID       0      0     22
       -> PcdReset                    0      0     22
       -> PcdAntennaOff               0      0     22
       -> PcdAntennaOn                0      0     22
       -> M500PcdConfigISOType        0      0     22
       -> afRegister                  0      0     22
       -> RegisterForKeys             0      0     22
       -> osal_memcpy                 0      0     28
       -> aps_AddGroup                0      0     22
       -> HalLcdWriteString           0      0     22
     SampleApp_MessageMSGCB           0      0      0
     SampleApp_ProcessEvent           0      0     12
       -> osal_msg_receive            0      0     24
       -> SerialApp_DeviceConnect     0      0     24
       -> osal_start_timerEx          0      0     24
       -> osal_msg_deallocate         0      0     24
       -> osal_msg_receive            0      0     24
       -> SampleApp_HandleKeys        0      0     24
       -> SerialApp_Rfid_Message      0      0     24
       -> osal_start_timerEx          0      0     24
     SerialApp_DeviceConnect          2      0     48
       -> NLME_GetShortAddr           0      0     54
       -> AF_DataRequest              0      0     72
     SerialApp_Rfid_Message           2      0     42
       -> iccardcode                  0      0     42
       -> iccardcode                  0      0     42
       -> NumberToLetter              0      0     42
       -> NumberToLetter              0      0     42
       -> PrintfRfidCard              0      0     42
       -> AF_DataRequest              0      0     60
       -> buzzerOn                    0      0     42
       -> PrintfRfidCard              0      0     42
     buzzerOn                         2      0     21
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
       -> Onboard_wait                4      0      0
     iccardcode                       0      0     33
       -> PcdHalt                     0      0     20
       -> PcdRequest                  0      0     20
       -> PcdRequest                  0      0     20
       -> PcdAnticoll                 0      0     20
       -> memcpy                      0      0     24
       -> PcdSelect                   0      0     20
       -> PcdAuthState                0      0     24
       -> PcdRead                     0      0     20
       -> PcdWrite                    0      0     20
       -> PcdValue                    0      0     20
       -> PcdBakValue                 0      0     20


   Segment part sizes:

     Function/Label                  Bytes
     --------------                  -----
     _A_P0                              1
     _A_P1                              1
     P0SEL                              1
     P1SEL                              1
     P0DIR                              1
     P1DIR                              1
     SampleApp_ClusterList             12
     SampleApp_SimpleDesc              12
     SampleApp_epDesc                   6
     SampleApp_TaskID                   1
     SampleApp_NwkState                 1
     SampleApp_TransID                  1
     SampleApp_Periodic_DstAddr        12
     SampleApp_Flash_DstAddr           12
     SampleApp_P2P_DstAddr             12
     SampleApp_Group                   18
     SampleAppPeriodicCounter           1
     SampleAppFlashCounter              1
     data2                              4
     DefaultKey                         6
     g_ucTempbuf                       20
     MLastSelectedSnr                   4
     RevBuffer                         30
     SerBuffer                         20
     CmdValid                           1
     waitCommData                       1
     sendRfiddata                       1
     EndDeviceID                        2
     SampleApp_Init                   224
     ?Subroutine0                       5
     SampleApp_ProcessEvent           159
     SampleApp_HandleKeys              49
     ??Subroutine7_0                    5
     SampleApp_MessageMSGCB             3
     iccardcode                       264
     NumberToLetter                    68
     ?Subroutine1                       2
     ??Subroutine6_0                    3
     PrintfRfidCard                   139
     buzzerOn                          21
     ?Subroutine2                      14
     ?Subroutine5                      15
     SerialApp_Rfid_Message           290
     ?Subroutine4                      10
     ?Subroutine3                       9
     SerialApp_DeviceConnect          164
     ?<Initializer for data2>           4
     ?<Initializer for DefaultKey>      6
     ?<Initializer for waitCommData>    1
     ?<Initializer for sendRfiddata>    1
     ?<Initializer for EndDeviceID>     2
     ??SampleApp_Init?relay             6
     ??SampleApp_ProcessEvent?relay     6
     ??SampleApp_HandleKeys?relay       6
     ??SampleApp_MessageMSGCB?relay     6
     ??iccardcode?relay                 6
     ??NumberToLetter?relay             6
     ??PrintfRfidCard?relay             6
     ??buzzerOn?relay                   6
     ??SerialApp_Rfid_Message?relay     6
     ??SerialApp_DeviceConnect?relay    6
     ?<Constant "Group 1">              8
     ?<Constant "SampleApp">           10
     ?<Constant "0123456789ABCDEF">    17
     ?<Constant {0}>                   20
     ?<Constant "ID:%s">                6
     ?<Constant "">                     1
     ?<Constant {0}>_1                 10
     ?<Constant {0}>_2                  5

 
 1 444 bytes in segment BANKED_CODE
    60 bytes in segment BANK_RELAYS
     6 bytes in segment SFR_AN
    14 bytes in segment XDATA_I
    14 bytes in segment XDATA_ID
   101 bytes in segment XDATA_ROM_C
   140 bytes in segment XDATA_Z
 
 1 518 bytes of CODE  memory
   101 bytes of CONST memory
     0 bytes of DATA  memory (+ 6 bytes shared)
   154 bytes of XDATA memory

Errors: none
Warnings: 4
