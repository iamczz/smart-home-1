///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        07/Nov/2015  00:35:46 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\Source\SampleApp.c            /
//    Command line       =  -f E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥ /
//                          \ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC /
//                          2530DB\f8wRouter.cfg (-DCPU32MHZ                  /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DRTR_NWK -DBLINK_LEDS) -f                     /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC253 /
//                          0DB\f8wConfig.cfg (-DSECURE=0                     /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\work\zigbee\taobao\work /
//                          \WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’ /
//                          ∂À3-rfid\Projects\zstack\Samples\SampleApp\Source /
//                          \SampleApp.c -D ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK  /
//                          -D MT_SYS_FUNC -D MT_ZDO_FUNC -D                  /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\   /
//                          -lA E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ /
//                          ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\z /
//                          stack\Samples\SampleApp\CC2530DB\RouterEB-Pro\Lis /
//                          t\ --diag_suppress Pe001,Pa010 -o                 /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\RouterEB-Pro\Obj\    /
//                          -e --debug --core=plain --dptr=16,1               /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 16   /
//                          -I E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥ /
//                          \ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zs /
//                          tack\Samples\SampleApp\CC2530DB\ -I               /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\SOURCE\ -I        /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI253 /
//                          0DB\ -I E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ /
//                          ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projec /
//                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\ /
//                          ..\COMPONENTS\MT\ -I E:\work\zigbee\taobao\work\W /
//                          IFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À /
//                          3-rfid\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I        /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\HAL\TARGET\CC2530EB\ -I                     /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\OSAL\MCU\CCSOC\ -I                          /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\OSAL\INCLUDE\ -I E:\work\zigbee\taobao\work /
//                          \WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’ /
//                          ∂À3-rfid\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I         /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\STACK\NWK\ -I E:\work\zigbee\taobao\work\WI /
//                          FI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3 /
//                          -rfid\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\STACK\SEC\ -I           /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\STACK\SAPI\ -I E:\work\zigbee\taobao\work\W /
//                          IFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À /
//                          3-rfid\Projects\zstack\Samples\SampleApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SYS\ -I          /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\STACK\ZDO\ -I E:\work\zigbee\taobao\work\WI /
//                          FI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3 /
//                          -rfid\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I            /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\ZMAC\ -I E:\work\zigbee\taobao\work\WIFI-Zi /
//                          gBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid /
//                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\.. /
//                          \..\..\..\COMPONENTS\SERVICES\SADDR\ -I           /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\SERVICES\SDATA\ -I                          /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\INCLUDE\ -I E:\work\zigbee\taobao\work\ /
//                          WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂ /
//                          À3-rfid\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I    /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\LOW_LEVEL\srf04\ -I                     /
//                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMPO /
//                          NENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz       /
//    List file          =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZS /
//                          tack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstac /
//                          k\Samples\SampleApp\CC2530DB\RouterEB-Pro\List\Sa /
//                          mpleApp.s51                                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SampleApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        PUBLIC ??NumberToLetter?relay
        FUNCTION ??NumberToLetter?relay,0203H
        PUBLIC ??PrintfRfidCard?relay
        FUNCTION ??PrintfRfidCard?relay,0203H
        PUBLIC ??SampleApp_HandleKeys?relay
        FUNCTION ??SampleApp_HandleKeys?relay,0203H
        PUBLIC ??SampleApp_Init?relay
        FUNCTION ??SampleApp_Init?relay,0203H
        PUBLIC ??SampleApp_MessageMSGCB?relay
        FUNCTION ??SampleApp_MessageMSGCB?relay,0203H
        PUBLIC ??SampleApp_ProcessEvent?relay
        FUNCTION ??SampleApp_ProcessEvent?relay,0203H
        PUBLIC ??SerialApp_DeviceConnect?relay
        FUNCTION ??SerialApp_DeviceConnect?relay,0203H
        PUBLIC ??SerialApp_Rfid_Message?relay
        FUNCTION ??SerialApp_Rfid_Message?relay,0203H
        PUBLIC ??iccardcode?relay
        FUNCTION ??iccardcode?relay,0203H
        PUBLIC CmdValid
        PUBLIC DefaultKey
        PUBLIC MLastSelectedSnr
        PUBLIC NumberToLetter
        FUNCTION NumberToLetter,0203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBWEAK P0DIR
        PUBWEAK P1DIR
        PUBLIC PrintfRfidCard
        FUNCTION PrintfRfidCard,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 32, STACK
        PUBLIC RevBuffer
        PUBLIC SampleAppFlashCounter
        PUBLIC SampleAppPeriodicCounter
        PUBLIC SampleApp_ClusterList
        PUBLIC SampleApp_Flash_DstAddr
        PUBLIC SampleApp_Group
        PUBLIC SampleApp_HandleKeys
        FUNCTION SampleApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC SampleApp_Init
        FUNCTION SampleApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC SampleApp_MessageMSGCB
        FUNCTION SampleApp_MessageMSGCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC SampleApp_NwkState
        PUBLIC SampleApp_P2P_DstAddr
        PUBLIC SampleApp_Periodic_DstAddr
        PUBLIC SampleApp_ProcessEvent
        FUNCTION SampleApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC SampleApp_SimpleDesc
        PUBLIC SampleApp_TaskID
        PUBLIC SampleApp_TransID
        PUBLIC SampleApp_epDesc
        PUBLIC SerBuffer
        PUBLIC SerialApp_DeviceConnect
        FUNCTION SerialApp_DeviceConnect,021201H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 36, STACK
        PUBLIC SerialApp_Rfid_Message
        FUNCTION SerialApp_Rfid_Message,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBLIC data2
        PUBLIC g_ucTempbuf
        PUBLIC iccardcode
        FUNCTION iccardcode,021201H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC sendRfiddata
        PUBLIC waitCommData
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
MT_UartInit         SYMBOL "MT_UartInit"
MT_UartRegisterTaskID SYMBOL "MT_UartRegisterTaskID"
PcdReset            SYMBOL "PcdReset"
PcdAntennaOff       SYMBOL "PcdAntennaOff"
PcdAntennaOn        SYMBOL "PcdAntennaOn"
M500PcdConfigISOType SYMBOL "M500PcdConfigISOType"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
osal_memcpy         SYMBOL "osal_memcpy"
aps_AddGroup        SYMBOL "aps_AddGroup"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
aps_FindGroup       SYMBOL "aps_FindGroup"
aps_RemoveGroup     SYMBOL "aps_RemoveGroup"
PcdHalt             SYMBOL "PcdHalt"
PcdRequest          SYMBOL "PcdRequest"
PcdAnticoll         SYMBOL "PcdAnticoll"
memcpy              SYMBOL "memcpy"
PcdSelect           SYMBOL "PcdSelect"
PcdAuthState        SYMBOL "PcdAuthState"
PcdRead             SYMBOL "PcdRead"
PcdWrite            SYMBOL "PcdWrite"
PcdValue            SYMBOL "PcdValue"
PcdBakValue         SYMBOL "PcdBakValue"
sprintf             SYMBOL "sprintf"
strlen              SYMBOL "strlen"
HalUARTWrite        SYMBOL "HalUARTWrite"
AF_DataRequest      SYMBOL "AF_DataRequest"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??M500PcdConfigISOType?relay SYMBOL "?relay", M500PcdConfigISOType
??MT_UartInit?relay SYMBOL "?relay", MT_UartInit
??MT_UartRegisterTaskID?relay SYMBOL "?relay", MT_UartRegisterTaskID
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??PcdAntennaOff?relay SYMBOL "?relay", PcdAntennaOff
??PcdAntennaOn?relay SYMBOL "?relay", PcdAntennaOn
??PcdAnticoll?relay SYMBOL "?relay", PcdAnticoll
??PcdAuthState?relay SYMBOL "?relay", PcdAuthState
??PcdBakValue?relay SYMBOL "?relay", PcdBakValue
??PcdHalt?relay     SYMBOL "?relay", PcdHalt
??PcdRead?relay     SYMBOL "?relay", PcdRead
??PcdRequest?relay  SYMBOL "?relay", PcdRequest
??PcdReset?relay    SYMBOL "?relay", PcdReset
??PcdSelect?relay   SYMBOL "?relay", PcdSelect
??PcdValue?relay    SYMBOL "?relay", PcdValue
??PcdWrite?relay    SYMBOL "?relay", PcdWrite
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??aps_AddGroup?relay SYMBOL "?relay", aps_AddGroup
??aps_FindGroup?relay SYMBOL "?relay", aps_FindGroup
??aps_RemoveGroup?relay SYMBOL "?relay", aps_RemoveGroup
??memcpy?relay      SYMBOL "?relay", memcpy
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??sprintf?relay     SYMBOL "?relay", sprintf
??strlen?relay      SYMBOL "?relay", strlen
NumberToLetter      SYMBOL "NumberToLetter"
??NumberToLetter?relay SYMBOL "?relay", NumberToLetter
PrintfRfidCard      SYMBOL "PrintfRfidCard"
??PrintfRfidCard?relay SYMBOL "?relay", PrintfRfidCard
SampleApp_HandleKeys SYMBOL "SampleApp_HandleKeys"
??SampleApp_HandleKeys?relay SYMBOL "?relay", SampleApp_HandleKeys
SampleApp_Init      SYMBOL "SampleApp_Init"
??SampleApp_Init?relay SYMBOL "?relay", SampleApp_Init
SampleApp_MessageMSGCB SYMBOL "SampleApp_MessageMSGCB"
??SampleApp_MessageMSGCB?relay SYMBOL "?relay", SampleApp_MessageMSGCB
SampleApp_ProcessEvent SYMBOL "SampleApp_ProcessEvent"
??SampleApp_ProcessEvent?relay SYMBOL "?relay", SampleApp_ProcessEvent
SerialApp_DeviceConnect SYMBOL "SerialApp_DeviceConnect"
??SerialApp_DeviceConnect?relay SYMBOL "?relay", SerialApp_DeviceConnect
SerialApp_Rfid_Message SYMBOL "SerialApp_Rfid_Message"
??SerialApp_Rfid_Message?relay SYMBOL "?relay", SerialApp_Rfid_Message
iccardcode          SYMBOL "iccardcode"
??iccardcode?relay  SYMBOL "?relay", iccardcode

        EXTERN MT_UartInit
        FUNCTION MT_UartInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_UartRegisterTaskID
        FUNCTION MT_UartRegisterTaskID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdReset
        FUNCTION PcdReset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdAntennaOff
        FUNCTION PcdAntennaOff,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdAntennaOn
        FUNCTION PcdAntennaOn,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN M500PcdConfigISOType
        FUNCTION M500PcdConfigISOType,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_AddGroup
        FUNCTION aps_AddGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_FindGroup
        FUNCTION aps_FindGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aps_RemoveGroup
        FUNCTION aps_RemoveGroup,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdHalt
        FUNCTION PcdHalt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdRequest
        FUNCTION PcdRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdAnticoll
        FUNCTION PcdAnticoll,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN memcpy
        FUNCTION memcpy,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdSelect
        FUNCTION PcdSelect,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdAuthState
        FUNCTION PcdAuthState,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdRead
        FUNCTION PcdRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdWrite
        FUNCTION PcdWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdValue
        FUNCTION PcdValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN PcdBakValue
        FUNCTION PcdBakValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sprintf
        FUNCTION sprintf,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strlen
        FUNCTION strlen,0200H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??M500PcdConfigISOType?relay
        FUNCTION ??M500PcdConfigISOType?relay,00H
        EXTERN ??MT_UartInit?relay
        FUNCTION ??MT_UartInit?relay,00H
        EXTERN ??MT_UartRegisterTaskID?relay
        FUNCTION ??MT_UartRegisterTaskID?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??PcdAntennaOff?relay
        FUNCTION ??PcdAntennaOff?relay,00H
        EXTERN ??PcdAntennaOn?relay
        FUNCTION ??PcdAntennaOn?relay,00H
        EXTERN ??PcdAnticoll?relay
        FUNCTION ??PcdAnticoll?relay,00H
        EXTERN ??PcdAuthState?relay
        FUNCTION ??PcdAuthState?relay,00H
        EXTERN ??PcdBakValue?relay
        FUNCTION ??PcdBakValue?relay,00H
        EXTERN ??PcdHalt?relay
        FUNCTION ??PcdHalt?relay,00H
        EXTERN ??PcdRead?relay
        FUNCTION ??PcdRead?relay,00H
        EXTERN ??PcdRequest?relay
        FUNCTION ??PcdRequest?relay,00H
        EXTERN ??PcdReset?relay
        FUNCTION ??PcdReset?relay,00H
        EXTERN ??PcdSelect?relay
        FUNCTION ??PcdSelect?relay,00H
        EXTERN ??PcdValue?relay
        FUNCTION ??PcdValue?relay,00H
        EXTERN ??PcdWrite?relay
        FUNCTION ??PcdWrite?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??aps_AddGroup?relay
        FUNCTION ??aps_AddGroup?relay,00H
        EXTERN ??aps_FindGroup?relay
        FUNCTION ??aps_FindGroup?relay,00H
        EXTERN ??aps_RemoveGroup?relay
        FUNCTION ??aps_RemoveGroup?relay,00H
        EXTERN ??memcpy?relay
        FUNCTION ??memcpy?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??sprintf?relay
        FUNCTION ??sprintf?relay,00H
        EXTERN ??strlen?relay
        FUNCTION ??strlen?relay,00H

// E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À3-rfid\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
//    1 /**************************************************************************************************
//    2   Filename:       SampleApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Sample Application (no Profile).
//    7 
//    8 
//    9   Copyright 2007 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends it's messages either as broadcast or
//   45   broadcast filtered group messages.  The other (more normal)
//   46   message addressing is unicast.  Most of the other sample
//   47   applications are written to support the unicast message model.
//   48 
//   49   Key control:
//   50     SW1:  Sends a flash command to all devices in Group 1.
//   51     SW2:  Adds/Removes (toggles) this device in and out
//   52           of Group 1.  This will enable and disable the
//   53           reception of the flash command.
//   54 *********************************************************************/
//   55 
//   56 /*********************************************************************
//   57  * INCLUDES
//   58  */
//   59 #include "OSAL.h"
//   60 #include "ZGlobals.h"
//   61 #include "AF.h"
//   62 #include "aps_groups.h"
//   63 #include "ZDApp.h"
//   64 
//   65 #include "SampleApp.h"
//   66 #include "SampleAppHw.h"
//   67 
//   68 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1
//   69 
//   70 /* HAL */
//   71 #include "hal_lcd.h"
//   72 #include "hal_led.h"
//   73 #include "hal_key.h"
//   74 #include "MT_UART.h"
//   75 #include "MT_APP.h"
//   76 #include "MT.h"
//   77 #include "stdio.h"
//   78 #include "mfrc522.h"
//   79 
//   80 /*********************************************************************
//   81  * MACROS
//   82  */
//   83 
//   84 /*********************************************************************
//   85  * CONSTANTS
//   86  */
//   87 
//   88 /*********************************************************************
//   89  * TYPEDEFS
//   90  */
//   91 
//   92 /*********************************************************************
//   93  * GLOBAL VARIABLES
//   94  */
//   95 
//   96 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   97 const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
SampleApp_ClusterList:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4
        DW 5
        DW 6
//   98 {
//   99   SERIALAPP_CONNECTREQ_CLUSTER,//”√”⁄…œ¥´÷’∂À∂Ãµÿ÷∑
//  100   SAMPLEAPP_END1,
//  101   SAMPLEAPP_END2,
//  102   SAMPLEAPP_END3,
//  103   SAMPLEAPP_END4,
//  104   SAMPLEAPP_END5
//  105 };
//  106 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  107 const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
SampleApp_SimpleDesc:
        DB 20
        DATA16
        DW 3848
        DW 1
        DATA8
        DB 0
        DB 6
        DATA16
        DW SampleApp_ClusterList
        DATA8
        DB 6
        DATA16
        DW SampleApp_ClusterList
//  108 {
//  109   SAMPLEAPP_ENDPOINT,              //  int Endpoint;
//  110   SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
//  111   SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  112   SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  113   SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
//  114   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  115   (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
//  116   SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
//  117   (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
//  118 };
//  119 
//  120 // This is the Endpoint/Interface description.  It is defined here, but
//  121 // filled-in in SampleApp_Init().  Another way to go would be to fill
//  122 // in the structure here and make it a "const" (in code space).  The
//  123 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  124 endPointDesc_t SampleApp_epDesc;
SampleApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  125 
//  126 /*********************************************************************
//  127  * EXTERNAL VARIABLES
//  128  */
//  129 
//  130 /*********************************************************************
//  131  * EXTERNAL FUNCTIONS
//  132  */
//  133 
//  134 /*********************************************************************
//  135  * LOCAL VARIABLES
//  136  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
SampleApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  138                           // This variable will be received when
//  139                           // SampleApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 devStates_t SampleApp_NwkState;
SampleApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  141 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 uint8 SampleApp_TransID;  // This is the unique message ID (counter)
SampleApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 afAddrType_t SampleApp_Periodic_DstAddr; //π„≤•
SampleApp_Periodic_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 afAddrType_t SampleApp_Flash_DstAddr;    //◊È≤•
SampleApp_Flash_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 afAddrType_t SampleApp_P2P_DstAddr;      //µ„≤•
SampleApp_P2P_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  147 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 aps_Group_t SampleApp_Group;
SampleApp_Group:
        DS 18
        REQUIRE __INIT_XDATA_Z
//  149 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 uint8 SampleAppPeriodicCounter = 0;
SampleAppPeriodicCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 uint8 SampleAppFlashCounter = 0;
SampleAppFlashCounter:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  152 
//  153 
//  154 /////////////////////////////rfid∂®“Â////////////////////
//  155 
//  156 //M1ø®µƒƒ≥“ªøÈ–¥Œ™»Áœ¬∏Ò Ω£¨‘Ú∏√øÈŒ™«Æ∞¸£¨ø…Ω” ’ø€øÓ∫Õ≥‰÷µ√¸¡Ó
//  157 //4◊÷Ω⁄Ω∂Ó£®µÕ◊÷Ω⁄‘⁄«∞£©£´4◊÷Ω⁄Ω∂Ó»°∑¥£´4◊÷Ω⁄Ω∂Ó£´1◊÷Ω⁄øÈµÿ÷∑£´1
//  158 //◊÷Ω⁄øÈµÿ÷∑»°∑¥£´1◊÷Ω⁄øÈµÿ÷∑£´1◊÷Ω⁄øÈµÿ÷∑»°∑¥ 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  159 unsigned char data2[4]  = {0x12,0,0,0};
data2:
        DATA32
        DS 4
        REQUIRE `?<Initializer for data2>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  160 unsigned char DefaultKey[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; 
DefaultKey:
        DATA8
        DS 6
        REQUIRE `?<Initializer for DefaultKey>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 unsigned char g_ucTempbuf[20];    
g_ucTempbuf:
        DS 20
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  162 unsigned char MLastSelectedSnr[4];
MLastSelectedSnr:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  163 unsigned char RevBuffer[30];  
RevBuffer:
        DS 30
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  164 unsigned char SerBuffer[20]; 
SerBuffer:
        DS 20
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  165 unsigned char CmdValid; 
CmdValid:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  166 unsigned char waitCommData=1;
waitCommData:
        DATA8
        DS 1
        REQUIRE `?<Initializer for waitCommData>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  167 uint8 sendRfiddata=1;  // «∑Ò∑¢ÀÕRFID ˝æ›
sendRfiddata:
        DATA8
        DS 1
        REQUIRE `?<Initializer for sendRfiddata>`
        REQUIRE __INIT_XDATA_I
//  168 
//  169 //---------------------------------------------------------------------
//  170 //±Í◊º∞Ê≤ªÕ¨µƒ÷’∂À–Ë“™–ﬁ∏ƒ¥ÀID,”√”⁄ ∂±–≠µ˜∆˜∑¢π˝¿¥µƒ ˝æ›£¨IDœ‡Õ¨‘Ú¥¶¿Ì
//  171 //◊®“µ∞Ê◊‘∂Ø¥”FlashªÒµ√µÿ÷∑£¨À˘”–÷’∂ÀπÃº˛œ‡Õ¨£¨  ∫œ¡ø≤˙

        RSEG XDATA_I:XDATA:NOROOT(0)
//  172 static uint16 EndDeviceID = 0x0003; //÷’∂ÀID£¨∑«≥£÷ÿ“™
EndDeviceID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for EndDeviceID>`
        REQUIRE __INIT_XDATA_I
//  173 
//  174 
//  175 
//  176 /*********************************************************************
//  177  * LOCAL FUNCTIONS
//  178  */
//  179 void SampleApp_HandleKeys( uint8 shift, uint8 keys );
//  180 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  181 void SampleApp_SendPeriodicMessage( void );
//  182 void SerialApp_DeviceConnect();
//  183 void SerialApp_Rfid_Message( void );
//  184 
//  185 /*********************************************************************
//  186  * NETWORK LAYER CALLBACKS
//  187  */
//  188 
//  189 /*********************************************************************
//  190  * PUBLIC FUNCTIONS
//  191  */
//  192 
//  193 /*********************************************************************
//  194  * @fn      SampleApp_Init
//  195  *
//  196  * @brief   Initialization function for the Generic App Task.
//  197  *          This is called during initialization and should contain
//  198  *          any application specific initialization (ie. hardware
//  199  *          initialization/setup, table initialization, power up
//  200  *          notificaiton ... ).
//  201  *
//  202  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  203  *                    used to send messages and set timers.
//  204  *
//  205  * @return  none
//  206  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  207 void SampleApp_Init( uint8 task_id )
SampleApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SampleApp_Init
        CODE
//  208 { 
        FUNCALL SampleApp_Init, MT_UartInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, MT_UartRegisterTaskID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, PcdReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, PcdAntennaOff
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, PcdAntennaOn
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, M500PcdConfigISOType
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  209   SampleApp_TaskID = task_id;
        MOV     DPTR,#SampleApp_TaskID
        MOVX    @DPTR,A
//  210   SampleApp_NwkState = DEV_INIT;
        MOV     DPTR,#SampleApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  211   SampleApp_TransID = 0;
        MOV     DPTR,#SampleApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  212   
//  213   MT_UartInit();                  //¥Æø⁄≥ı ºªØ
        ; Setup parameters for call to function MT_UartInit
        LCALL   ??MT_UartInit?relay
//  214   MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
        ; Setup parameters for call to function MT_UartRegisterTaskID
        MOV     A,R6
        MOV     R1,A
        LCALL   ??MT_UartRegisterTaskID?relay
//  215 
//  216     P0DIR |= 0xF0; //P0_4°¢P0_5°¢P0_6°¢P0_7∂®“ÂŒ™ ‰≥ˆ
        ORL     0xfd,#0xf0
//  217     P1DIR |= 0x01;//p1_0 ‰≥ˆ
        ORL     0xfe,#0x1
//  218 
//  219     P0 |= 0xF0; //P0_4°¢P0_5°¢P0_6°¢P0_7 ‰≥ˆ1
        ORL     0x80,#0xf0
//  220     P1 |= 0x01; //P1_0 ‰≥ˆ∏ﬂµÁ∆Ω
        SETB    0x90.0
//  221 
//  222     CmdValid=0; 
        MOV     DPTR,#CmdValid
        CLR     A
        MOVX    @DPTR,A
//  223 
//  224     PcdReset();
        ; Setup parameters for call to function PcdReset
        LCALL   ??PcdReset?relay
//  225     PcdAntennaOff(); 
        ; Setup parameters for call to function PcdAntennaOff
        LCALL   ??PcdAntennaOff?relay
//  226     PcdAntennaOn();  
        ; Setup parameters for call to function PcdAntennaOn
        LCALL   ??PcdAntennaOn?relay
//  227     M500PcdConfigISOType( 'A' );
        ; Setup parameters for call to function M500PcdConfigISOType
        MOV     R1,#0x41
        LCALL   ??M500PcdConfigISOType?relay
//  228 
//  229 
//  230   
//  231   // Device hardware initialization can be added here or in main() (Zmain.c).
//  232   // If the hardware is application specific - add it here.
//  233   // If the hardware is other parts of the device add it in main().
//  234 
//  235  #if defined ( BUILD_ALL_DEVICES )
//  236   // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
//  237   // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
//  238   // together - if they are - we will start up a coordinator. Otherwise,
//  239   // the device will start as a router.
//  240   if ( readCoordinatorJumper() )
//  241     zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;dd
//  242   else
//  243     zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
//  244 #endif // BUILD_ALL_DEVICES
//  245 
//  246 #if defined ( HOLD_AUTO_START )
//  247   // HOLD_AUTO_START is a compile option that will surpress ZDApp
//  248   //  from starting the device and wait for the application to
//  249   //  start the device.
//  250   ZDOInitDevice(0);ee
//  251 #endif
//  252 
//  253   // Setup for the periodic message's destination address
//  254   // Broadcast to everyone
//  255   SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
        MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  256   SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  257   SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
        MOV     DPTR,#SampleApp_Periodic_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  258 
//  259   // Setup for the flash command's destination address - Group 1
//  260   SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
        MOV     DPTR,#SampleApp_Flash_DstAddr + 8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  261   SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  262   SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
        MOV     DPTR,#SampleApp_Flash_DstAddr
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  263   
//  264   SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µ„≤• 
        MOV     DPTR,#SampleApp_P2P_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  265   SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
        INC     DPTR
        MOV     A,#0x14
        MOVX    @DPTR,A
//  266   SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //∑¢∏¯–≠µ˜∆˜
        MOV     DPTR,#SampleApp_P2P_DstAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  267 
//  268   // Fill out the endpoint description.
//  269   SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     DPTR,#SampleApp_epDesc
        MOV     A,#0x14
        MOVX    @DPTR,A
//  270   SampleApp_epDesc.task_id = &SampleApp_TaskID;
        INC     DPTR
        MOV     A,#SampleApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  271   SampleApp_epDesc.simpleDesc
//  272             = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
        INC     DPTR
        MOV     A,#SampleApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  273   SampleApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  274 
//  275   // Register the endpoint description with the AF
//  276   afRegister( &SampleApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SampleApp_epDesc & 0xff
        MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  277 
//  278   // Register for all key events - This app will handle all key events
//  279   RegisterForKeys( SampleApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  280 
//  281   // By default, all devices start out in Group 1
//  282   SampleApp_Group.ID = 0x0001;
        MOV     DPTR,#SampleApp_Group
        MOV     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  283   osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#(SampleApp_Group + 2) & 0xff
        MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
//  284   aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  285 
//  286 #if defined ( LCD_SUPPORTED )
//  287   HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#`?<Constant "SampleApp">` & 0xff
        MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
        CFI EndBlock cfiBlock0
//  288 #endif
//  289 }
        REQUIRE ?Subroutine0
        REQUIRE P0DIR
        REQUIRE P1DIR
        REQUIRE _A_P0
        REQUIRE _A_P1
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  290 
//  291 /*********************************************************************
//  292  * @fn      SampleApp_ProcessEvent
//  293  *
//  294  * @brief   Generic Application Task event processor.  This function
//  295  *          is called to process all events for the task.  Events
//  296  *          include timers, messages and any other user defined events.
//  297  *
//  298  * @param   task_id  - The OSAL assigned task ID.
//  299  * @param   events - events to process.  This is a bit map and can
//  300  *                   contain more than one event.
//  301  *
//  302  * @return  none
//  303  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  304 uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
SampleApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SampleApp_ProcessEvent
        CODE
//  305 {
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SerialApp_DeviceConnect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SampleApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, SerialApp_Rfid_Message
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  306   afIncomingMSGPacket_t *MSGpkt;
//  307   (void)task_id;  // Intentionally unreferenced parameter
//  308 
//  309   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      ??SampleApp_ProcessEvent_0
//  310   {
//  311     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??SampleApp_ProcessEvent_1
//  312     while ( MSGpkt )
//  313     {
//  314       switch ( MSGpkt->hdr.event )
//  315       {
//  316         // Received when a key is pressed
//  317         case KEY_CHANGE:
//  318           SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  319           break;
//  320 
//  321         // Received when a messages is received (OTA) for this endpoint
//  322         case AF_INCOMING_MSG_CMD:
//  323           SampleApp_MessageMSGCB( MSGpkt );
//  324           break;
//  325 
//  326         // Received whenever the device changes state in the network
//  327         case ZDO_STATE_CHANGE:
//  328           SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??SampleApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SampleApp_NwkState
        MOVX    @DPTR,A
//  329           if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
//  330                  (SampleApp_NwkState == DEV_ROUTER)
//  331               || (SampleApp_NwkState == DEV_END_DEVICE) )
        XRL     A,#0x7
        JZ      ??SampleApp_ProcessEvent_3
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SampleApp_ProcessEvent_4
//  332           {
//  333             SerialApp_DeviceConnect();//…œ¥´÷’∂Àµƒ∂Ãµÿ÷∑            
??SampleApp_ProcessEvent_3:
        ; Setup parameters for call to function SerialApp_DeviceConnect
        LCALL   ??SerialApp_DeviceConnect?relay
//  334             // Start sending the periodic message in a regular interval.
//  335             osal_start_timerEx( SampleApp_TaskID,
//  336                               SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  337                               SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x30
        MOV     R5,#0x7
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  338           }
//  339           else
//  340           {
//  341             // Device is no longer in the network
//  342           }
//  343           break;
//  344 
//  345         default:
//  346           break;
//  347       }
//  348 
//  349       // Release the memory
//  350       osal_msg_deallocate( (uint8 *)MSGpkt );
??SampleApp_ProcessEvent_4:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  351 
//  352       // Next - if one is available
//  353       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??SampleApp_ProcessEvent_1:
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??SampleApp_ProcessEvent_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#0x40
        JZ      ??SampleApp_ProcessEvent_6
        ADD     A,#-0x11
        JZ      ??SampleApp_ProcessEvent_2
        SJMP    ??SampleApp_ProcessEvent_4
??SampleApp_ProcessEvent_6:
        ; Setup parameters for call to function SampleApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SampleApp_HandleKeys?relay
        SJMP    ??SampleApp_ProcessEvent_4
//  354     }
//  355 
//  356     // return unprocessed events
//  357     return (events ^ SYS_EVENT_MSG);
??SampleApp_ProcessEvent_5:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
??SampleApp_ProcessEvent_7:
        MOV     R3,A
        SJMP    ??SampleApp_ProcessEvent_8
//  358   }
//  359 
//  360   // Send a message out - This event is generated by a timer
//  361   //  (setup in SampleApp_Init()).
//  362   if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
??SampleApp_ProcessEvent_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SampleApp_ProcessEvent_9
//  363   {
//  364     // Send the periodic message
//  365 
//  366     SerialApp_Rfid_Message();
        ; Setup parameters for call to function SerialApp_Rfid_Message
        LCALL   ??SerialApp_Rfid_Message?relay
//  367 
//  368     osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
//  369         100 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#0x64
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SampleApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  370 
//  371     // return unprocessed events
//  372     return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
        MOV     A,R6
        XRL     A,#0x1
        MOV     R2,A
        MOV     A,R7
        SJMP    ??SampleApp_ProcessEvent_7
//  373   }
//  374 
//  375   // Discard unknown events
//  376   return 0;
??SampleApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SampleApp_ProcessEvent_8:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  377 }
//  378 
//  379 /*********************************************************************
//  380  * Event Generation Functions
//  381  */
//  382 /*********************************************************************
//  383  * @fn      SampleApp_HandleKeys
//  384  *
//  385  * @brief   Handles all key events for this device.
//  386  *
//  387  * @param   shift - true if in shift/alt.
//  388  * @param   keys - bit field for key events. Valid entries:
//  389  *                 HAL_KEY_SW_2
//  390  *                 HAL_KEY_SW_1
//  391  *
//  392  * @return  none
//  393  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  394 void SampleApp_HandleKeys( uint8 shift, uint8 keys )
SampleApp_HandleKeys:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SampleApp_HandleKeys
        CODE
//  395 {
        FUNCALL SampleApp_HandleKeys, aps_FindGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_RemoveGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SampleApp_HandleKeys, aps_AddGroup
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
//  396   (void)shift;  // Intentionally unreferenced parameter
//  397   
//  398   if ( keys & HAL_KEY_SW_1 )
//  399   {
//  400     /* This key sends the Flash Command is sent to Group 1.
//  401      * This device will not receive the Flash Command from this
//  402      * device (even if it belongs to group 1).
//  403      */
//  404   }
//  405 
//  406   if ( keys & HAL_KEY_SW_2 )
        MOV     C,0xE0 /* A   */.1
        JNC     ??SampleApp_HandleKeys_0
//  407   {
//  408     /* The Flashr Command is sent to Group 1.
//  409      * This key toggles this device in and out of group 1.
//  410      * If this device doesn't belong to group 1, this application
//  411      * will not receive the Flash command sent to group 1.
//  412      */
//  413     aps_Group_t *grp;
//  414     grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
//  415     if ( grp )
        ; Setup parameters for call to function aps_FindGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_FindGroup?relay
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SampleApp_HandleKeys_1
//  416     {
//  417       // Remove from the group
//  418       aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
        ; Setup parameters for call to function aps_RemoveGroup
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     R1,#0x14
        LCALL   ??aps_RemoveGroup?relay
        SJMP    ??SampleApp_HandleKeys_0
//  419     }
//  420     else
//  421     {
//  422       // Add to the flash group
//  423       aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
??SampleApp_HandleKeys_1:
        ; Setup parameters for call to function aps_AddGroup
        MOV     R2,#SampleApp_Group & 0xff
        MOV     R3,#(SampleApp_Group >> 8) & 0xff
        MOV     R1,#0x14
        LCALL   ??aps_AddGroup?relay
//  424     }
//  425   }
//  426 }
??SampleApp_HandleKeys_0:
        LJMP    ??Subroutine5_0 & 0xFFFF
        CFI EndBlock cfiBlock3
//  427 
//  428 
//  429 /*********************************************************************
//  430  * @fn      SampleApp_MessageMSGCB
//  431  *
//  432  * @brief   Data message processor callback.  This function processes
//  433  *          any incoming data - probably from other devices.  So, based
//  434  *          on cluster ID, perform the intended action.
//  435  *
//  436  * @param   none
//  437  *
//  438  * @return  none
//  439  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  440 void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
SampleApp_MessageMSGCB:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SampleApp_MessageMSGCB
        CODE
//  441 {
        ; Saved register size: 0
        ; Auto size: 0
//  442     uint16 flashTime;
//  443 
//  444     switch ( pkt->clusterId )
//  445     {
//  446     case SAMPLEAPP_END3:
//  447         {
//  448         break;
//  449         }
//  450     default:
//  451         break;
//  452   }
//  453 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
//  454 
//  455 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  456 void iccardcode()
iccardcode:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function iccardcode
        CODE
//  457 {	     
        FUNCALL iccardcode, PcdHalt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdAnticoll
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdSelect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdAuthState
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL iccardcode, PcdBakValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  458   	unsigned char cmd;
//  459 	unsigned char status;
//  460 	
//  461 	cmd = RevBuffer[0];
//  462 	switch(cmd)
        MOV     DPTR,#RevBuffer + 1
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#RevBuffer
        MOVX    A,@DPTR
        DEC     A
        JZ      ??iccardcode_0
        DEC     A
        JZ      ??iccardcode_1
        DEC     A
        JZ      ??iccardcode_2
        DEC     A
        JNZ     $+5
        LJMP    ??iccardcode_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??iccardcode_4 & 0xFFFF
        DEC     A
        JZ      ??iccardcode_5
        DEC     A
        JZ      ??iccardcode_5
        DEC     A
        JNZ     $+5
        LJMP    ??iccardcode_6 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??iccardcode_7 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??iccardcode_8 & 0xFFFF
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??iccardcode_9 & 0xFFFF
        LJMP    ??iccardcode_10 & 0xFFFF
//  463  	{
//  464 		case 1:     // Halt the card     //÷’÷πø®µƒ≤Ÿ◊˜
//  465 			status= PcdHalt();			
??iccardcode_0:
        ; Setup parameters for call to function PcdHalt
        LCALL   ??PcdHalt?relay
??iccardcode_11:
        MOV     A,R1
        MOV     R6,A
        SJMP    ??iccardcode_5
//  466 			RevBuffer[0]=1;
//  467 			RevBuffer[1]=status;
//  468 			break;			
//  469 		case 2:     // Request,Anticoll,Select,return CardType(2 bytes)+CardSerialNo(4 bytes)
//  470 			        // —∞ø®£¨∑¿≥ÂÕª£¨—°‘Òø®    ∑µªÿø®¿‡–Õ£®2 bytes£©+ ø®œµ¡–∫≈(4 bytes)
//  471 			status= PcdRequest(RevBuffer[1],&RevBuffer[2]);
??iccardcode_1:
        ; Setup parameters for call to function PcdRequest
        MOV     R2,#(RevBuffer + 2) & 0xff
        MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
        LCALL   ??PcdRequest?relay
        MOV     A,R1
        MOV     R6,A
//  472 			if(status!=0)
        JZ      ??iccardcode_12
//  473 			{
//  474 				status= PcdRequest(RevBuffer[1],&RevBuffer[2]);
        ; Setup parameters for call to function PcdRequest
        MOV     R2,#(RevBuffer + 2) & 0xff
        MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
        MOV     DPTR,#RevBuffer + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??PcdRequest?relay
        MOV     A,R1
        MOV     R6,A
//  475 				if(status!=0)				
        JZ      ??iccardcode_12
//  476 				{
//  477 					RevBuffer[0]=1;	
??iccardcode_5:
        MOV     DPTR,#RevBuffer
??iccardcode_13:
        MOV     A,#0x1
??iccardcode_14:
        MOVX    @DPTR,A
//  478 					RevBuffer[1]=status;
        MOV     A,R6
        INC     DPTR
        LJMP    ??iccardcode_15 & 0xFFFF
//  479 					break;
//  480 				}
//  481 			}  
//  482 			RevBuffer[0]=3;	
//  483 			RevBuffer[1]=status;
//  484 			break;
//  485 			
//  486 		case 3:                         // ∑¿≥ÂÕª ∂¡ø®µƒœµ¡–∫≈ MLastSelectedSnr
//  487 			status = PcdAnticoll(&RevBuffer[2]);
??iccardcode_2:
        ; Setup parameters for call to function PcdAnticoll
        MOV     R2,#(RevBuffer + 2) & 0xff
        MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
        LCALL   ??PcdAnticoll?relay
        MOV     A,R1
        MOV     R6,A
//  488 			if(status!=0)
        JNZ     ??iccardcode_5
//  489 			{
//  490 				RevBuffer[0]=1;	
//  491 				RevBuffer[1]=status;
//  492 				break;
//  493 			}
//  494 			memcpy(MLastSelectedSnr,&RevBuffer[2],4);
        ; Setup parameters for call to function memcpy
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#(RevBuffer + 2) & 0xff
        MOV     R5,#((RevBuffer + 2) >> 8) & 0xff
        MOV     R2,#MLastSelectedSnr & 0xff
        MOV     R3,#(MLastSelectedSnr >> 8) & 0xff
        LCALL   ??memcpy?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  495 			RevBuffer[0]=5;
        MOV     DPTR,#RevBuffer
        MOV     A,#0x5
        SJMP    ??iccardcode_16
//  496 			RevBuffer[1]=status;
//  497 			break;	
//  498 		case 4:		                    // —°‘Òø® Select Card
//  499 			status=PcdSelect(MLastSelectedSnr);
??iccardcode_3:
        ; Setup parameters for call to function PcdSelect
        MOV     R2,#MLastSelectedSnr & 0xff
        MOV     R3,#(MLastSelectedSnr >> 8) & 0xff
        LCALL   ??PcdSelect?relay
        MOV     A,R1
        MOV     R6,A
//  500 			if(status!=MI_OK)
        JNZ     ??iccardcode_5
??iccardcode_12:
        MOV     DPTR,#RevBuffer
        MOV     A,#0x3
        SJMP    ??iccardcode_14
//  501 			{
//  502 				RevBuffer[0]=1;	
//  503 				RevBuffer[1]=status;
//  504 				break;
//  505 			}
//  506 			RevBuffer[0]=3;
//  507 			RevBuffer[1]=status;			
//  508 			break;
//  509 		case 5:	    // Key loading into the MF RC500's EEPROM
//  510             status = PcdAuthState(RevBuffer[1], RevBuffer[3], DefaultKey, MLastSelectedSnr);// –£—Èø®√‹¬Î
??iccardcode_4:
        ; Setup parameters for call to function PcdAuthState
        MOV     ?V0 + 0,#MLastSelectedSnr & 0xff
        MOV     ?V0 + 1,#(MLastSelectedSnr >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#DefaultKey & 0xff
        MOV     R5,#(DefaultKey >> 8) & 0xff
        MOV     DPTR,#RevBuffer + 3
        MOVX    A,@DPTR
        MOV     R2,A
        LCALL   ??PcdAuthState?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ??iccardcode_11 & 0xFFFF
//  511 			RevBuffer[0]=1;
//  512 			RevBuffer[1]=status;			
//  513 			break;							
//  514 		case 6: 
//  515 			RevBuffer[0]=1;
//  516 			RevBuffer[1]=status;			
//  517 			break;				
//  518 		case 7:     
//  519     		RevBuffer[0]=1;
//  520 			RevBuffer[1]=status;			
//  521 			break;
//  522 		case 8:     // Read the mifare card
//  523 		            // ∂¡ø®
//  524 			status=PcdRead(RevBuffer[1],&RevBuffer[2]);
??iccardcode_6:
        ; Setup parameters for call to function PcdRead
        MOV     R2,#(RevBuffer + 2) & 0xff
        MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
        LCALL   ??PcdRead?relay
        MOV     A,R1
        MOV     R6,A
//  525 			if(status==0)
        MOV     DPTR,#RevBuffer
        JNZ     ??iccardcode_13
//  526 			{RevBuffer[0]=17;}
        MOV     A,#0x11
        SJMP    ??iccardcode_14
//  527 			else
//  528 			{RevBuffer[0]=1;}
//  529 			RevBuffer[1]=status;			
//  530 			break;
//  531 		case 9:     // Write the mifare card
//  532 		            // –¥ø®  œ¬‘ÿ√‹¬Î
//  533 			status=PcdWrite(RevBuffer[1],&RevBuffer[2]);
??iccardcode_7:
        ; Setup parameters for call to function PcdWrite
        MOV     R2,#(RevBuffer + 2) & 0xff
        MOV     R3,#((RevBuffer + 2) >> 8) & 0xff
        LCALL   ??PcdWrite?relay
        LJMP    ??iccardcode_11 & 0xFFFF
//  534 			RevBuffer[0]=1;
//  535 			RevBuffer[1]=status;			
//  536 			break;
//  537 		case 10:
//  538             	PcdValue(RevBuffer[1],RevBuffer[2],&RevBuffer[3]);
??iccardcode_8:
        ; Setup parameters for call to function PcdValue
        MOV     R4,#(RevBuffer + 3) & 0xff
        MOV     R5,#((RevBuffer + 3) >> 8) & 0xff
        LCALL   ??PcdValue?relay
        LJMP    ??iccardcode_5 & 0xFFFF
//  539 			RevBuffer[0]=1;	
//  540 			RevBuffer[1]=status;
//  541 			break;
//  542 		case 12:    // ≤Œ ˝…Ë÷√
//  543 		    PcdBakValue(RevBuffer[1], RevBuffer[2]);
??iccardcode_9:
        ; Setup parameters for call to function PcdBakValue
        LCALL   ??PcdBakValue?relay
//  544 			RevBuffer[0]=1;	//contact
        MOV     DPTR,#RevBuffer
        MOV     A,#0x1
??iccardcode_16:
        MOVX    @DPTR,A
//  545 			RevBuffer[1]=0;
        INC     DPTR
        CLR     A
??iccardcode_15:
        MOVX    @DPTR,A
//  546 			break;		
//  547 	}
//  548 }
??iccardcode_10:
        LJMP    ??Subroutine5_0 & 0xFFFF
        CFI EndBlock cfiBlock5
//  549 
//  550 //BCD◊™ASC¬Î±Ì

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  551 char NumberToLetter(unsigned char number)
NumberToLetter:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function NumberToLetter
        CODE
//  552 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        MOV     R0,A
//  553     char buff[]="0123456789ABCDEF";
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant "0123456789ABCDEF">` >> 8) & 0xff
        MOV     DPL,#`?<Constant "0123456789ABCDEF">` & 0xff
        MOV     A,#0x11
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  554 
//  555     if(number>15) return 0;
        MOV     A,R0
        CLR     C
        SUBB    A,#0x10
        JC      ??NumberToLetter_0
        MOV     R1,#0x0
        SJMP    ??NumberToLetter_1
//  556 
//  557     return buff[number];
??NumberToLetter_0:
        MOV     ?V0 + 0,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
??NumberToLetter_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock6
//  558 
//  559 }
//  560 
//  561 //LCD∫Õ¥Æø⁄œ‘ æRFID–≈œ¢

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  562 void PrintfRfidCard(uint8* data, int len)
PrintfRfidCard:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function PrintfRfidCard
        CODE
//  563 {
        FUNCALL PrintfRfidCard, sprintf
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintfRfidCard, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintfRfidCard, strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintfRfidCard, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintfRfidCard, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL PrintfRfidCard, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 20
        MOV     A,#-0x14
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  564     char card_buff[20]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x14
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  565 
//  566     if(data[0]!=0)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??PrintfRfidCard_0
//  567     {
//  568         sprintf(card_buff, "ID:%s", data);
        ; Setup parameters for call to function sprintf
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     R4,#`?<Constant "ID:%s">` & 0xff
        MOV     R5,#(`?<Constant "ID:%s">` >> 8) & 0xff
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sprintf?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 30)
//  569         HalLcdWriteString( card_buff, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
//  570         HalUARTWrite (0, (uint8 *)card_buff, strlen(card_buff));
        ; Setup parameters for call to function HalUARTWrite
        ; Setup parameters for call to function strlen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??PrintfRfidCard_1
//  571     }
//  572     else
//  573     {
//  574         HalLcdWriteString( "", HAL_LCD_LINE_3 );
??PrintfRfidCard_0:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "">` & 0xff
        MOV     R3,#(`?<Constant "">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  575         HalLcdWriteString( "", HAL_LCD_LINE_4 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     R2,#`?<Constant "">` & 0xff
        MOV     R3,#(`?<Constant "">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  576     }
//  577 }
??PrintfRfidCard_1:
        MOV     A,#0x14
        SJMP    ??Subroutine4_0
        CFI EndBlock cfiBlock7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 27)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x11
        CFI EndBlock cfiBlock8
        REQUIRE ??Subroutine4_0
        ; // Fall through to label ??Subroutine4_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine4_0:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 30)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock9
        REQUIRE ??Subroutine5_0
        ; // Fall through to label ??Subroutine5_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine5_0:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock10
//  578 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 void SerialApp_Rfid_Message( void )
SerialApp_Rfid_Message:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function SerialApp_Rfid_Message
        CODE
//  580 {
        FUNCALL SerialApp_Rfid_Message, iccardcode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Rfid_Message, iccardcode
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Rfid_Message, NumberToLetter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Rfid_Message, NumberToLetter
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Rfid_Message, PrintfRfidCard
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Rfid_Message, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Rfid_Message, PrintfRfidCard
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  581 
//  582     uint8 SendBuf[10]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0xa
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  583     uint8 error=0;
//  584     
//  585     //—∞ø®√¸¡Ó
//  586     RevBuffer[0]=0x02;
        MOV     DPTR,#RevBuffer
        MOV     A,#0x2
        MOVX    @DPTR,A
//  587     RevBuffer[1]=0x26;
        INC     DPTR
        MOV     A,#0x26
        LCALL   ?Subroutine2 & 0xFFFF
//  588 
//  589      // —∞ø®
//  590     iccardcode();
//  591 
//  592     if(RevBuffer[1]==0)//—∞ø®≥…π¶
??CrossCallReturnLabel_0:
        JZ      $+5
        LJMP    ??SerialApp_Rfid_Message_0 & 0xFFFF
//  593     {
//  594         //∂¡ø®√¸¡Ó
//  595   //      SendBuf[0]=RevBuffer[2];  //data
//  596   //      SendBuf[1]=RevBuffer[3];  //data        
//  597 
//  598         //’“µΩø®
//  599         //∂¡ø®
//  600         RevBuffer[0]=0x03;
        MOV     DPTR,#RevBuffer
        MOV     A,#0x3
        LCALL   ?Subroutine2 & 0xFFFF
//  601         iccardcode();
//  602 
//  603         if(RevBuffer[1]==0)
??CrossCallReturnLabel_1:
        JZ      $+5
        LJMP    ??SerialApp_Rfid_Message_0 & 0xFFFF
//  604         {
//  605             //∂¡ø®≥…π¶
//  606             //º«¬ºø®ID
//  607 
//  608             for(int i=0; i<4; i++)
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  609             {
//  610                 unsigned char temp= RevBuffer[2+i];
??SerialApp_Rfid_Message_1:
        MOV     A,#(RevBuffer + 2) & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#((RevBuffer + 2) >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
//  611                 SendBuf[i*2]=NumberToLetter((temp>>4)&0x0f);
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,?V0 + 1
        RLC     A
        MOV     R1,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,DPL
        ADD     A,R0
        MOV     R6,A
        MOV     A,DPH
        ADDC    A,R1
        MOV     R7,A
        ; Setup parameters for call to function NumberToLetter
        MOV     A,?V0 + 2
        SWAP    A
        ANL     A,#0xf
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_2:
        MOVX    @DPTR,A
//  612                 SendBuf[i*2+1]=NumberToLetter(temp&0x0f);
        ; Setup parameters for call to function NumberToLetter
        MOV     A,#0xf
        ANL     A,?V0 + 2
        LCALL   ?Subroutine3 & 0xFFFF
//  613             }
??CrossCallReturnLabel_3:
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,?V0 + 0
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x4
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??SerialApp_Rfid_Message_1
//  614             
//  615         }
//  616         else
//  617         {
//  618             error=1;
//  619         }
//  620     }
//  621     else
//  622     {
//  623         error=1;
//  624     }
//  625 
//  626     if(error>0)
//  627     {
//  628         sendRfiddata=1;
//  629         SendBuf[0]=0;
//  630         PrintfRfidCard(SendBuf, 6);
//  631     }
//  632     else if(sendRfiddata==1)
        MOV     DPTR,#sendRfiddata
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_Rfid_Message_2
//  633     {
//  634         // ‰≥ˆœ‘ æ
//  635         PrintfRfidCard(SendBuf, 8);
        ; Setup parameters for call to function PrintfRfidCard
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??PrintfRfidCard?relay
//  636         sendRfiddata=1;
        MOV     DPTR,#sendRfiddata
        MOV     A,#0x1
        MOVX    @DPTR,A
//  637  
//  638         //∑¢ÀÕ∏¯–≠µ˜∆˜
//  639         if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
//  640                            SAMPLEAPP_END3,
//  641                            8,
//  642                            SendBuf,
//  643                            &SampleApp_TransID,
//  644                            AF_DISCV_ROUTE,
//  645                            AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#0x4
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0x20
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     R2,#SampleApp_P2P_DstAddr & 0xff
        MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  646         {
//  647         }
//  648         else
//  649         {
//  650         // Error occurred in request to send.
//  651         }                
//  652     }
//  653 }
??SerialApp_Rfid_Message_2:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        LJMP    ?Subroutine0 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 21)
??SerialApp_Rfid_Message_0:
        MOV     DPTR,#sendRfiddata
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function PrintfRfidCard
        MOV     R4,#0x6
        MOV     R5,A
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??PrintfRfidCard?relay
        SJMP    ??SerialApp_Rfid_Message_2
        CFI EndBlock cfiBlock11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+0
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker14 Using cfiCommon1
        CFI (cfiPicker14) NoFunction
        CFI (cfiPicker14) Picker
        MOV     R1,A
        LCALL   ??NumberToLetter?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiPicker14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function iccardcode
        ; Setup parameters for call to function iccardcode
        LCALL   ??iccardcode?relay
        MOV     DPTR,#RevBuffer + 1
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//  654 
//  655 //∞—÷’∂Àµÿ÷∑…œ¥´∑˛ŒÒ∆˜

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  656 void  SerialApp_DeviceConnect()
SerialApp_DeviceConnect:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function SerialApp_DeviceConnect
        CODE
//  657 {
        FUNCALL SerialApp_DeviceConnect, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_DeviceConnect, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 17
        MOV     A,#-0x11
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  658   uint16 nwkAddr;
//  659   uint16 parentNwkAddr;
//  660   char buff[5] = {0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_2` & 0xff
        MOV     A,#0x5
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  661   afAddrType_t SerialApp_TxAddr;
//  662   
//  663   nwkAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
//  664 //  parentNwkAddr = NLME_GetCoordShortAddr();
//  665   
//  666   SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  667   SerialApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x14
        MOVX    @DPTR,A
//  668   SerialApp_TxAddr.addr.shortAddr = 0x0;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  669 
//  670   buff[0] = EndDeviceID;
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  671   buff[1] = HI_UINT16( nwkAddr );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
//  672   buff[2] = LO_UINT16( nwkAddr );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
//  673   
//  674   if ( AF_DataRequest( &SerialApp_TxAddr, &SampleApp_epDesc,
//  675                        SERIALAPP_CONNECTREQ_CLUSTER,
//  676                        3,
//  677                        (uint8*)buff,
//  678                        &SampleApp_TransID, 
//  679                        0, 
//  680                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#SampleApp_TransID & 0xff
        MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#0x3
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R1,#0x0
        MOV     R4,#SampleApp_epDesc & 0xff
        MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
//  681   {
//  682   }
//  683   else
//  684   {
//  685     // Error occurred in request to send.
//  686   }
//  687 }
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock18

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for data2>`:
        DATA8
        DB 18
        DB 0
        DB 0
        DB 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for DefaultKey>`:
        DATA8
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255
        DB 255

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for waitCommData>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for sendRfiddata>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for EndDeviceID>`:
        DATA16
        DW 3

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SampleApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SampleApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??iccardcode?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    iccardcode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??NumberToLetter?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    NumberToLetter

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??PrintfRfidCard?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    PrintfRfidCard

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Rfid_Message?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Rfid_Message

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_DeviceConnect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_DeviceConnect

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Group 1">`:
        DB "Group 1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SampleApp">`:
        DB "SampleApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "0123456789ABCDEF">`:
        DB "0123456789ABCDEF"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ID:%s">`:
        DB "ID:%s"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "">`:
        DB ""

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0

        END
//  688 /*********************************************************************
//  689 *********************************************************************/
// 
// 1 378 bytes in segment BANKED_CODE
//    54 bytes in segment BANK_RELAYS
//     4 bytes in segment SFR_AN
//    14 bytes in segment XDATA_I
//    14 bytes in segment XDATA_ID
//   101 bytes in segment XDATA_ROM_C
//   140 bytes in segment XDATA_Z
// 
// 1 446 bytes of CODE  memory
//   101 bytes of CONST memory
//     0 bytes of DATA  memory (+ 4 bytes shared)
//   154 bytes of XDATA memory
//
//Errors: none
//Warnings: 4
