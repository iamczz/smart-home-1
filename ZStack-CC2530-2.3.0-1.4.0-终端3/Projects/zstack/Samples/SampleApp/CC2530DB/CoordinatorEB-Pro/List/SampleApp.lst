###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         27/Oct/2015  11:28:12 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\Source\SampleApp.c                   #
#    Command line       =  -f E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶ #
#                          È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\ #
#                          f8wCoord.cfg (-DCPU32MHZ -DROOT=__near_func        #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f       #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8w #
#                          Config.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0       #
#                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800          #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\Source\SampleApp.c -D ZIGBEEPRO -D   #
#                          ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC -D            #
#                          xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -D HAL_ADC     #
#                          -lC E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª #
#                          ¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\ #
#                          Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List\ #
#                           -lA E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊ #
#                          ª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack #
#                          \Samples\SampleApp\CC2530DB\CoordinatorEB-Pro\List #
#                          \ --diag_suppress Pe001,Pa010 -o                   #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\ -e   #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶ #
#                          È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\ -I                      #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\SOURCE\ -I               #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\    #
#                          -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶ #
#                          È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\S #
#                          amples\SampleApp\CC2530DB\..\..\..\..\..\COMPONENT #
#                          S\MT\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11 #
#                          -ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zs #
#                          tack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COM #
#                          PONENTS\HAL\INCLUDE\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂ #
#                          Êª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1. #
#                          4.0\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I     #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\O #
#                          SAL\MCU\CCSOC\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´« #
#                          ¸ÐÆ÷DHT11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\OSAL\INCLUDE\ -I                  #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\AF\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\STACK\NWK\ -I                           #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\SEC\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\SAPI\ -I                         #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          TACK\SYS\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷D #
#                          HT11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Project #
#                          s\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\.. #
#                          \COMPONENTS\STACK\ZDO\ -I                          #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\Z #
#                          MAC\F8W\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DH #
#                          T11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects #
#                          \zstack\Samples\SampleApp\CC2530DB\..\..\..\..\..\ #
#                          COMPONENTS\ZMAC\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È #
#                          ´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\COMPONENTS\SERVICES\SADDR\ -I              #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\S #
#                          ERVICES\SDATA\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´« #
#                          ¸ÐÆ÷DHT11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MAC\INCLUDE\ -I                   #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\HIGH_LEVEL\ -I E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´« #
#                          ¸ÐÆ÷DHT11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\..\..\..\ #
#                          ..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I           #
#                          E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\..\..\..\..\..\COMPONENTS\M #
#                          AC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz               #
#    List file          =  E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\CoordinatorEB-Pro\List\Samp #
#                          leApp.lst                                          #
#    Object file        =  E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹ #
#                          âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samp #
#                          les\SampleApp\CC2530DB\CoordinatorEB-Pro\Obj\Sampl #
#                          eApp.r51                                           #
#                                                                             #
#                                                                             #
###############################################################################

E:\DÅÌ\baidu×ÊÁÏ\ÏîÄ¿\7.ÎÂÊª¶È´«¸ÐÆ÷DHT11-ÎÂÊª¶È+¹âÕÕ\ZStack-CC2530-2.3.0-1.4.0\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          #include "Hal_adc.h"
     79          #include "stdio.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     99          {
    100            SAMPLEAPP_PERIODIC_CLUSTERID,
    101            SAMPLEAPP_FLASH_CLUSTERID
    102          };
    103          

   \                                 In  segment XDATA_ROM_C, align 1
    104          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    105          {
    106            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    107            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    108            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    109            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    110            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    111            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    112            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    113            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    114            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    115          };
    116          
    117          // This is the Endpoint/Interface description.  It is defined here, but
    118          // filled-in in SampleApp_Init().  Another way to go would be to fill
    119          // in the structure here and make it a "const" (in code space).  The
    120          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    121          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    122          
    123          /*********************************************************************
    124           * EXTERNAL VARIABLES
    125           */
    126          
    127          /*********************************************************************
    128           * EXTERNAL FUNCTIONS
    129           */
    130          
    131          /*********************************************************************
    132           * LOCAL VARIABLES
    133           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    134          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    135                                    // This variable will be received when
    136                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          afAddrType_t SampleApp_Periodic_DstAddr; //¹ã²¥
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          afAddrType_t SampleApp_Flash_DstAddr;    //×é²¥
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          afAddrType_t SampleApp_P2P_DstAddr;      //µã²¥
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    148          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    149          
    150          #define wendu_ctrl_pin        P0_4
    151          #define shidu_ctrl_pin        P0_5
    152          #define guangzhao_ctrl_pin    P0_6
    153          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    154          uint8 wendu=20,shidu=30,guangzhao=40;//·Ö±ðÓÃÓÚ´æ´¢ÎÂ¶È£¬Êª¶È£¬¹âÕÕ
   \                     wendu:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for wendu>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     shidu:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for shidu>`
   \   000001                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     guangzhao:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for guangzhao>`
   \   000001                REQUIRE __INIT_XDATA_I
    155          
    156          
    157          /*********************************************************************
    158           * LOCAL FUNCTIONS
    159           */
    160          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    161          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    162          void SampleApp_SendPeriodicMessage( void );
    163          void SampleApp_SendFlashMessage( uint16 flashTime );
    164          void SampleApp_Send_P2P_Message(void);
    165          void displayAndCtrl();
    166          /*********************************************************************
    167           * NETWORK LAYER CALLBACKS
    168           */
    169          
    170          /*********************************************************************
    171           * PUBLIC FUNCTIONS
    172           */
    173          
    174          /*********************************************************************
    175           * @fn      SampleApp_Init
    176           *
    177           * @brief   Initialization function for the Generic App Task.
    178           *          This is called during initialization and should contain
    179           *          any application specific initialization (ie. hardware
    180           *          initialization/setup, table initialization, power up
    181           *          notificaiton ... ).
    182           *
    183           * @param   task_id - the ID assigned by OSAL.  This ID should be
    184           *                    used to send messages and set timers.
    185           *
    186           * @return  none
    187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    189          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    190            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    191            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    192            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    193            
    194            MT_UartInit();                  //´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    195            MT_UartRegisterTaskID(task_id); //×¢²á´®¿ÚÈÎÎñ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    196          
    197           #if defined ( ZDO_COORDINATOR )
    198           
    199            P0DIR |= 0xF0; //P0_4¡¢P0_5¡¢P0_6¡¢P0_7¶¨ÒåÎªÊä³ö
   \   00001E   43FDF0       ORL     0xfd,#0xf0
    200            P0 |= 0xF0; //P0_4¡¢P0_5¡¢P0_6¡¢P0_7Êä³ö0
   \   000021   4380F0       ORL     0x80,#0xf0
    201          
    202          #else
    203          
    204            P0SEL &= 0x7f;                  //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
    205          
    206          #endif
    207            
    208            // Device hardware initialization can be added here or in main() (Zmain.c).
    209            // If the hardware is application specific - add it here.
    210            // If the hardware is other parts of the device add it in main().
    211          
    212           #if defined ( BUILD_ALL_DEVICES )
    213            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    214            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    215            // together - if they are - we will start up a coordinator. Otherwise,
    216            // the device will start as a router.
    217            if ( readCoordinatorJumper() )
    218              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;dd
    219            else
    220              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    221          #endif // BUILD_ALL_DEVICES
    222          
    223          #if defined ( HOLD_AUTO_START )
    224            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    225            //  from starting the device and wait for the application to
    226            //  start the device.
    227            ZDOInitDevice(0);ee
    228          #endif
    229          
    230            // Setup for the periodic message's destination address
    231            // Broadcast to everyone
    232            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000024   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000027   740F         MOV     A,#0xf
   \   000029   F0           MOVX    @DPTR,A
    233            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   A3           INC     DPTR
   \   00002B   7414         MOV     A,#0x14
   \   00002D   F0           MOVX    @DPTR,A
    234            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   00002E   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000031   74FF         MOV     A,#-0x1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   F0           MOVX    @DPTR,A
    235          
    236            // Setup for the flash command's destination address - Group 1
    237            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000036   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000039   7401         MOV     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
    238            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003C   A3           INC     DPTR
   \   00003D   7414         MOV     A,#0x14
   \   00003F   F0           MOVX    @DPTR,A
    239            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000040   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000043   7401         MOV     A,#0x1
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
    240            
    241            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µã²¥ 
   \   000049   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   00004C   7402         MOV     A,#0x2
   \   00004E   F0           MOVX    @DPTR,A
    242            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   00004F   A3           INC     DPTR
   \   000050   7414         MOV     A,#0x14
   \   000052   F0           MOVX    @DPTR,A
    243            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //·¢¸øÐ­µ÷Æ÷
   \   000053   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \   000059   F0           MOVX    @DPTR,A
    244          
    245            // Fill out the endpoint description.
    246            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005A   90....       MOV     DPTR,#SampleApp_epDesc
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    247            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000060   A3           INC     DPTR
   \   000061   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000067   F0           MOVX    @DPTR,A
    248            SampleApp_epDesc.simpleDesc
    249                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   000068   A3           INC     DPTR
   \   000069   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   00006F   F0           MOVX    @DPTR,A
    250            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000070   A3           INC     DPTR
   \   000071   E4           CLR     A
   \   000072   F0           MOVX    @DPTR,A
    251          
    252            // Register the endpoint description with the AF
    253            afRegister( &SampleApp_epDesc );
   \   000073                ; Setup parameters for call to function afRegister
   \   000073   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000075   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   000077   12....       LCALL   ??afRegister?relay
    254          
    255            // Register for all key events - This app will handle all key events
    256            RegisterForKeys( SampleApp_TaskID );
   \   00007A                ; Setup parameters for call to function RegisterForKeys
   \   00007A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   F9           MOV     R1,A
   \   00007F   12....       LCALL   ??RegisterForKeys?relay
    257          
    258            // By default, all devices start out in Group 1
    259            SampleApp_Group.ID = 0x0001;
   \   000082   90....       MOV     DPTR,#SampleApp_Group
   \   000085   7401         MOV     A,#0x1
   \   000087   F0           MOVX    @DPTR,A
   \   000088   A3           INC     DPTR
   \   000089   E4           CLR     A
   \   00008A   F0           MOVX    @DPTR,A
    260            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00008B                ; Setup parameters for call to function osal_memcpy
   \   00008B   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   00008E   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000091   F5..         MOV     ?V0 + 2,A
   \   000093   78..         MOV     R0,#?V0 + 0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000098   7C07         MOV     R4,#0x7
   \   00009A   7D00         MOV     R5,#0x0
   \   00009C   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   00009E   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000A0   12....       LCALL   ??osal_memcpy?relay
   \   0000A3   7403         MOV     A,#0x3
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
    261            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000A8                ; Setup parameters for call to function aps_AddGroup
   \   0000A8   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000AA   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000AC   7914         MOV     R1,#0x14
   \   0000AE   12....       LCALL   ??aps_AddGroup?relay
    262          
    263          #if defined ( LCD_SUPPORTED )
    264            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000B1                ; Setup parameters for call to function HalLcdWriteString
   \   0000B1   7901         MOV     R1,#0x1
   \   0000B3   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000B5   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000B7   12....       LCALL   ??HalLcdWriteString?relay
    265          #endif
    266              displayAndCtrl();
   \   0000BA                ; Setup parameters for call to function displayAndCtrl
   \   0000BA   12....       LCALL   ??displayAndCtrl?relay
    267          }
   \   0000BD   7F03         MOV     R7,#0x3
   \   0000BF   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000C2                REQUIRE P0DIR
   \   0000C2                REQUIRE _A_P0
    268          
    269          /*********************************************************************
    270           * @fn      SampleApp_ProcessEvent
    271           *
    272           * @brief   Generic Application Task event processor.  This function
    273           *          is called to process all events for the task.  Events
    274           *          include timers, messages and any other user defined events.
    275           *
    276           * @param   task_id  - The OSAL assigned task ID.
    277           * @param   events - events to process.  This is a bit map and can
    278           *                   contain more than one event.
    279           *
    280           * @return  none
    281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    283          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    284            afIncomingMSGPacket_t *MSGpkt;
    285            (void)task_id;  // Intentionally unreferenced parameter
    286          
    287            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6074         JZ      ??SampleApp_ProcessEvent_0
    288            {
    289              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8026         SJMP    ??SampleApp_ProcessEvent_1
    290              while ( MSGpkt )
    291              {
    292                switch ( MSGpkt->hdr.event )
    293                {
    294                  // Received when a key is pressed
    295                  case KEY_CHANGE:
    296                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    297                    break;
    298          
    299                  // Received when a messages is received (OTA) for this endpoint
    300                  case AF_INCOMING_MSG_CMD:
    301                    SampleApp_MessageMSGCB( MSGpkt );
    302                    break;
    303          
    304                  // Received whenever the device changes state in the network
    305                  case ZDO_STATE_CHANGE:
    306                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    307                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    308                           (SampleApp_NwkState == DEV_ROUTER)
    309                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7010         JNZ     ??SampleApp_ProcessEvent_4
    310                    {
    311                      // Start sending the periodic message in a regular interval.
    312                      osal_start_timerEx( SampleApp_TaskID,
    313                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    314                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function osal_start_timerEx
   \   00001E   7CD0         MOV     R4,#-0x30
   \   000020   7D07         MOV     R5,#0x7
   \   000022   7A01         MOV     R2,#0x1
   \   000024   7B00         MOV     R3,#0x0
   \   000026   90....       MOV     DPTR,#SampleApp_TaskID
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F9           MOV     R1,A
   \   00002B   12....       LCALL   ??osal_start_timerEx?relay
    315                    }
    316                    else
    317                    {
    318                      // Device is no longer in the network
    319                    }
    320                    break;
    321          
    322                  default:
    323                    break;
    324                }
    325          
    326                // Release the memory
    327                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   00002E                ; Setup parameters for call to function osal_msg_deallocate
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   12....       LCALL   ??osal_msg_deallocate?relay
    328          
    329                // Next - if one is available
    330                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000035                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000035   90....       MOV     DPTR,#SampleApp_TaskID
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??osal_msg_receive?relay
   \   00003D   8A..         MOV     ?V0 + 0,R2
   \   00003F   8B..         MOV     ?V0 + 1,R3
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   45..         ORL     A,?V0 + 1
   \   000045   6032         JZ      ??SampleApp_ProcessEvent_5
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   24E6         ADD     A,#-0x1a
   \   000050   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000052   245A         ADD     A,#0x5a
   \   000054   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000056   24EF         ADD     A,#-0x11
   \   000058   60B5         JZ      ??SampleApp_ProcessEvent_2
   \   00005A   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005C                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FA           MOV     R2,A
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   F9           MOV     R1,A
   \   00006B   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   00006E   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000070                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000070   AA..         MOV     R2,?V0 + 0
   \   000072   AB..         MOV     R3,?V0 + 1
   \   000074   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   000077   80B5         SJMP    ??SampleApp_ProcessEvent_4
    331              }
    332          
    333              // return unprocessed events
    334              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   000079   EE           MOV     A,R6
   \   00007A   FA           MOV     R2,A
   \   00007B   EF           MOV     A,R7
   \   00007C   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   00007E   FB           MOV     R3,A
   \   00007F   802A         SJMP    ??SampleApp_ProcessEvent_9
    335            }
    336          
    337            // Send a message out - This event is generated by a timer
    338            //  (setup in SampleApp_Init()).
    339            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000081   EE           MOV     A,R6
   \   000082   A2E0         MOV     C,0xE0 /* A   */.0
   \   000084   5021         JNC     ??SampleApp_ProcessEvent_10
    340            {
    341              // Send the periodic message
    342              //SampleApp_SendPeriodicMessage();
    343              SampleApp_Send_P2P_Message();
   \   000086                ; Setup parameters for call to function SampleApp_Send_P2P_Message
   \   000086   12....       LCALL   ??SampleApp_Send_P2P_Message?relay
    344          
    345              // Setup to send message again in normal period (+ a little jitter)
    346              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    347                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   000089                ; Setup parameters for call to function osal_rand
   \   000089   12....       LCALL   ??osal_rand?relay
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   EA           MOV     A,R2
   \   00008D   24D0         ADD     A,#-0x30
   \   00008F   FC           MOV     R4,A
   \   000090   E4           CLR     A
   \   000091   3407         ADDC    A,#0x7
   \   000093   FD           MOV     R5,A
   \   000094   7A01         MOV     R2,#0x1
   \   000096   7B00         MOV     R3,#0x0
   \   000098   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??osal_start_timerEx?relay
    348          
    349              // return unprocessed events
    350              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A0   EE           MOV     A,R6
   \   0000A1   6401         XRL     A,#0x1
   \   0000A3   FA           MOV     R2,A
   \   0000A4   EF           MOV     A,R7
   \   0000A5   80D7         SJMP    ??SampleApp_ProcessEvent_8
    351            }
    352          
    353            // Discard unknown events
    354            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A7   7A00         MOV     R2,#0x0
   \   0000A9   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AB   7F04         MOV     R7,#0x4
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    355          }
    356          
    357          /*********************************************************************
    358           * Event Generation Functions
    359           */
    360          /*********************************************************************
    361           * @fn      SampleApp_HandleKeys
    362           *
    363           * @brief   Handles all key events for this device.
    364           *
    365           * @param   shift - true if in shift/alt.
    366           * @param   keys - bit field for key events. Valid entries:
    367           *                 HAL_KEY_SW_2
    368           *                 HAL_KEY_SW_1
    369           *
    370           * @return  none
    371           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    372          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    373          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    374            (void)shift;  // Intentionally unreferenced parameter
    375            
    376            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    377            {
    378              /* This key sends the Flash Command is sent to Group 1.
    379               * This device will not receive the Flash Command from this
    380               * device (even if it belongs to group 1).
    381               */
    382              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay
    383            }
    384          
    385            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    386            {
    387              /* The Flashr Command is sent to Group 1.
    388               * This key toggles this device in and out of group 1.
    389               * If this device doesn't belong to group 1, this application
    390               * will not receive the Flash command sent to group 1.
    391               */
    392              aps_Group_t *grp;
    393              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    394              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay
   \   000020   8B..         MOV     ?V0 + 1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V0 + 1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    395              {
    396                // Remove from the group
    397                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    398              }
    399              else
    400              {
    401                // Add to the flash group
    402                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay
    403              }
    404            }
    405          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   02....       LJMP    ??Subroutine6_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    406          
    407          
    408          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    409          void displayAndCtrl()
   \                     displayAndCtrl:
    410          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    411              uint8 buff[30]={0};    
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   741E         MOV     A,#0x1e
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    412          
    413          
    414              //ÎÂÊª¶ÈÏÔÊ¾
    415              sprintf(buff, "ÎÂ¶È:%02d Êª¶È:%02d", wendu,shidu);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000023                ; Setup parameters for call to function sprintf
   \   000023   90....       MOV     DPTR,#shidu
   \   000026   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   90....       MOV     DPTR,#wendu
   \   00002F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7C..         MOV     R4,#`?<Constant "\\316\\302\\266\\310:%02d \\312\\252\\266` & 0xff
   \   000037   7D..         MOV     R5,#(`?<Constant "\\316\\302\\266\\310:%02d \\312\\252\\266` >> 8) & 0xff
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   AA82         MOV     R2,DPL
   \   000040   AB83         MOV     R3,DPH
   \   000042   12....       LCALL   ??sprintf?relay
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
    416              HalLcdWriteString( buff, HAL_LCD_LINE_3 );
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00004A                ; Setup parameters for call to function HalLcdWriteString
   \   00004A   12....       LCALL   ?Subroutine1 & 0xFFFF
    417          
    418              //ÎÂÊª¶È´®¿ÚÊä³ö
    419              HalUARTWrite(0, buff, osal_strlen(buff));
                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    420              HalUARTWrite(0, "\n",1);
    421          
    422              //¹âÕÕÏÔÊ¾
    423              sprintf(buff, "¹âÕÕ:%02d", guangzhao);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??CrossCallReturnLabel_11:
   \   00004D                ; Setup parameters for call to function sprintf
   \   00004D   90....       MOV     DPTR,#guangzhao
   \   000050   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000056   7C..         MOV     R4,#`?<Constant "\\271\\342\\325\\325:%02d">` & 0xff
   \   000058   7D..         MOV     R5,#(`?<Constant "\\271\\342\\325\\325:%02d">` >> 8) & 0xff
   \   00005A   7402         MOV     A,#0x2
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   AA82         MOV     R2,DPL
   \   000061   AB83         MOV     R3,DPH
   \   000063   12....       LCALL   ??sprintf?relay
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
    424              HalLcdWriteString( buff, HAL_LCD_LINE_4 );
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   00006B                ; Setup parameters for call to function HalLcdWriteString
   \   00006B   7904         MOV     R1,#0x4
   \   00006D   12....       LCALL   ??Subroutine7_0 & 0xFFFF
    425          
    426              //¹âÕÕ´®¿ÚÊä³ö
    427              HalUARTWrite(0, buff, osal_strlen(buff));
                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    428              HalUARTWrite(0, "\n",1);
    429          
    430              //¿ØÖÆ¡¡
    431          
    432              //Êª¶È¹ýµÍ
    433              //×Ô¶¯½½Ë®
    434              if(shidu<20)
   \                     ??CrossCallReturnLabel_13:
   \   000070   90....       MOV     DPTR,#shidu
   \   000073   E0           MOVX    A,@DPTR
   \   000074   C3           CLR     C
   \   000075   9414         SUBB    A,#0x14
   \   000077   5004         JNC     ??displayAndCtrl_0
    435              {
    436                  //
    437                  shidu_ctrl_pin=1;
   \   000079   D285         SETB    0x80.5
   \   00007B   8002         SJMP    ??displayAndCtrl_1
    438              }
    439              else
    440              {
    441                  //
    442                  shidu_ctrl_pin=0;
   \                     ??displayAndCtrl_0:
   \   00007D   C285         CLR     0x80.5
    443              }
    444          
    445              //¹âÕÕ²»×ã£¬¿ª´°    
    446              //°ÙÒ¶´°£¬
    447              if(guangzhao<30)
   \                     ??displayAndCtrl_1:
   \   00007F   90....       MOV     DPTR,#guangzhao
   \   000082   E0           MOVX    A,@DPTR
   \   000083   C3           CLR     C
   \   000084   941E         SUBB    A,#0x1e
   \   000086   5004         JNC     ??displayAndCtrl_2
    448              {
    449                  //
    450                  guangzhao_ctrl_pin=1;
   \   000088   D286         SETB    0x80.6
   \   00008A   8002         SJMP    ??displayAndCtrl_3
    451              }
    452              else
    453              {
    454                  //
    455                  guangzhao_ctrl_pin=0;                
   \                     ??displayAndCtrl_2:
   \   00008C   C286         CLR     0x80.6
    456              }
    457          
    458              //ÎÂ¶È¹ý¸ß£¬Í¨·ç
    459              //Í¨·ç
    460              if(wendu>40)
   \                     ??displayAndCtrl_3:
   \   00008E   90....       MOV     DPTR,#wendu
   \   000091   E0           MOVX    A,@DPTR
   \   000092   C3           CLR     C
   \   000093   9429         SUBB    A,#0x29
   \   000095   4004         JC      ??displayAndCtrl_4
    461              {
    462                  //
    463                  wendu_ctrl_pin=1;
   \   000097   D284         SETB    0x80.4
   \   000099   8002         SJMP    ??displayAndCtrl_5
    464              }
    465              else
    466              {
    467                  //
    468                  wendu_ctrl_pin=0;                
   \                     ??displayAndCtrl_4:
   \   00009B   C284         CLR     0x80.4
    469              }
    470          }
   \                     ??displayAndCtrl_5:
   \   00009D   741E         MOV     A,#0x1e
   \   00009F   02....       LJMP    ?Subroutine0 & 0xFFFF
   \   0000A2                REQUIRE _A_P0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine6_0
   \   000003                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   75..00       MOV     ?V0 + 1,#0x0
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7903         MOV     R1,#0x3
   \   000002                REQUIRE ??Subroutine7_0
   \   000002                ; // Fall through to label ??Subroutine7_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine7_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   12....       LCALL   ??HalLcdWriteString?relay
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D                ; Setup parameters for call to function osal_strlen
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D                ; Setup parameters for call to function osal_strlen
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D                ; Setup parameters for call to function osal_strlen
   \   00000D                ; Setup parameters for call to function HalUARTWrite
   \   00000D                ; Setup parameters for call to function osal_strlen
   \   00000D   85..82       MOV     DPL,?XSP + 0
   \   000010   85..83       MOV     DPH,?XSP + 1
   \   000013   AA82         MOV     R2,DPL
   \   000015   AB83         MOV     R3,DPH
   \   000017   12....       LCALL   ??osal_strlen?relay
   \   00001A   EA           MOV     A,R2
   \   00001B   FC           MOV     R4,A
   \   00001C   EB           MOV     A,R3
   \   00001D   FD           MOV     R5,A
   \   00001E   85..82       MOV     DPL,?XSP + 0
   \   000021   85..83       MOV     DPH,?XSP + 1
   \   000024   AA82         MOV     R2,DPL
   \   000026   AB83         MOV     R3,DPH
   \   000028   7900         MOV     R1,#0x0
   \   00002A   12....       LCALL   ??HalUARTWrite?relay
   \   00002D                ; Setup parameters for call to function HalUARTWrite
   \   00002D                ; Setup parameters for call to function HalUARTWrite
   \   00002D                ; Setup parameters for call to function HalUARTWrite
   \   00002D                ; Setup parameters for call to function HalUARTWrite
   \   00002D   7C01         MOV     R4,#0x1
   \   00002F   7D00         MOV     R5,#0x0
   \   000031   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000033   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   000035   7900         MOV     R1,#0x0
   \   000037   12....       LCALL   ??HalUARTWrite?relay
   \   00003A   22           RET
    471          
    472          
    473          /*********************************************************************
    474           * @fn      SampleApp_MessageMSGCB
    475           *
    476           * @brief   Data message processor callback.  This function processes
    477           *          any incoming data - probably from other devices.  So, based
    478           *          on cluster ID, perform the intended action.
    479           *
    480           * @param   none
    481           *
    482           * @return  none
    483           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    484          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    485          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
    486              uint16 flashTime;
    487          
    488              switch ( pkt->clusterId )
   \   000009   E582         MOV     A,DPL
   \   00000B   2421         ADD     A,#0x21
   \   00000D   F8           MOV     R0,A
   \   00000E   E583         MOV     A,DPH
   \   000010   3400         ADDC    A,#0x0
   \   000012   F9           MOV     R1,A
   \   000013   E8           MOV     A,R0
   \   000014   FA           MOV     R2,A
   \   000015   E9           MOV     A,R1
   \   000016   FB           MOV     R3,A
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F5..         MOV     ?V0 + 0,A
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 1,A
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   000027   0200         DW        2
   \   000029   02           DB        2
   \   00002A   ....         DW        ??SampleApp_MessageMSGCB_0
   \   00002C   ....         DW        ??SampleApp_MessageMSGCB_1
   \   00002E   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000030   ....         DW        ??SampleApp_MessageMSGCB_2
    489              {
    490              case SAMPLEAPP_P2P_CLUSTERID:
    491                  {
    492           #if defined ( ZDO_COORDINATOR )
    493                      
    494                      wendu=pkt->cmd.Data[0];
   \                     ??SampleApp_MessageMSGCB_2:
   \   000032   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000035   E0           MOVX    A,@DPTR
   \   000036   90....       MOV     DPTR,#wendu
   \   000039   12....       LCALL   ?Subroutine2 & 0xFFFF
    495                      shidu=pkt->cmd.Data[1];
   \                     ??CrossCallReturnLabel_0:
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   90....       MOV     DPTR,#shidu
   \   000040   12....       LCALL   ?Subroutine2 & 0xFFFF
    496                      guangzhao=pkt->cmd.Data[2];
   \                     ??CrossCallReturnLabel_1:
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   90....       MOV     DPTR,#guangzhao
   \   000048   F0           MOVX    @DPTR,A
    497          
    498                      displayAndCtrl();
   \   000049                ; Setup parameters for call to function displayAndCtrl
   \   000049   12....       LCALL   ??displayAndCtrl?relay
    499          
    500          
    501          #endif            
    502                  }
    503                  break;    
   \   00004C   8035         SJMP    ??SampleApp_MessageMSGCB_0
    504              case SAMPLEAPP_PERIODIC_CLUSTERID:
    505                break;
    506          
    507              case SAMPLEAPP_FLASH_CLUSTERID:
    508                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    509                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \                     ??SampleApp_MessageMSGCB_1:
   \   00004E   8A82         MOV     DPL,R2
   \   000050   8B83         MOV     DPH,R3
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F9           MOV     R1,A
   \   000057                ; Setup parameters for call to function HalLedBlink
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   FA           MOV     R2,A
   \   00005E   8882         MOV     DPL,R0
   \   000060   8983         MOV     DPH,R1
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   F9           MOV     R1,A
   \   000066   EA           MOV     A,R2
   \   000067   2400         ADD     A,#0x0
   \   000069   F5..         MOV     ?V0 + 0,A
   \   00006B   E4           CLR     A
   \   00006C   39           ADDC    A,R1
   \   00006D   F5..         MOV     ?V0 + 1,A
   \   00006F   7402         MOV     A,#0x2
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?US_SHR
   \   000076   AC..         MOV     R4,?V0 + 0
   \   000078   AD..         MOV     R5,?V0 + 1
   \   00007A   7B32         MOV     R3,#0x32
   \   00007C   7A04         MOV     R2,#0x4
   \   00007E   7908         MOV     R1,#0x8
   \   000080   12....       LCALL   ??HalLedBlink?relay
    510                break;
    511            }
    512          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000083   02....       LJMP    ??Subroutine6_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8882         MOV     DPL,R0
   \   00000C   22           RET
    513          
    514          /*********************************************************************
    515           * @fn      SampleApp_SendPeriodicMessage
    516           *
    517           * @brief   Send the periodic message.
    518           *
    519           * @param   none
    520           *
    521           * @return  none
    522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    524          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    525            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    526                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    527                                 1,
    528                                 (uint8*)&SampleAppPeriodicCounter,
    529                                 &SampleApp_TransID,
    530                                 AF_DISCV_ROUTE,
    531                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0 + 0,#0x1e
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75....       MOV     ?V0 + 0,#SampleAppPeriodicCounter & 0xff
   \   00001B   75....       MOV     ?V0 + 1,#(SampleAppPeriodicCounter >> 8) & 0xff
   \   00001E   78..         MOV     R0,#?V0 + 0
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000023   75..01       MOV     ?V0 + 0,#0x1
   \   000026   75..00       MOV     ?V0 + 1,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7920         MOV     R1,#0x20
   \   000035   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000037   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000039   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003B   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003D   12....       LCALL   ??AF_DataRequest?relay
   \   000040   7409         MOV     A,#0x9
   \   000042   80..         SJMP    ?Subroutine0
    532            {
    533            }
    534            else
    535            {
    536              // Error occurred in request to send.
    537            }
    538          }
    539          
    540          /*********************************************************************
    541           * @fn      SampleApp_SendFlashMessage
    542           *
    543           * @brief   Send the flash message to group 1.
    544           *
    545           * @param   flashTime - in milliseconds
    546           *
    547           * @return  none
    548           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    549          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    550          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    551            uint8 buffer[3];
    552            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    553            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    554            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    555          
    556            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    557                                 SAMPLEAPP_FLASH_CLUSTERID,
    558                                 3,
    559                                 buffer,
    560                                 &SampleApp_TransID,
    561                                 AF_DISCV_ROUTE,
    562                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0 + 0,#0x1e
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   8582..       MOV     ?V0 + 0,DPL
   \   000044   8583..       MOV     ?V0 + 1,DPH
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 0
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000057   75..02       MOV     ?V0 + 0,#0x2
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7920         MOV     R1,#0x20
   \   000061   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000063   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000065   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000067   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000069   12....       LCALL   ??AF_DataRequest?relay
   \   00006C   7409         MOV     A,#0x9
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
    563            {
    564            }
    565            else
    566            {
    567              // Error occurred in request to send.
    568            }
    569          }
   \   000071   7403         MOV     A,#0x3
   \   000073                REQUIRE ?Subroutine0
   \   000073                ; // Fall through to label ?Subroutine0
    570          
    571          /*********************************************************************
    572           * @fn      SampleApp_Send_P2P_Message
    573           *
    574           * @brief   point to point.
    575           *
    576           * @param   none
    577           *
    578           * @return  none
    579           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    580          void SampleApp_Send_P2P_Message( void )
   \                     SampleApp_Send_P2P_Message:
    581          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    582              //byte i, temp[3], humidity[3], strTemp[7];
    583              uint16 adc= 0;
    584              float vol=0.0; //adc²ÉÑùµçÑ¹  
    585              uint16 temp=0;//°Ù·Ö±ÈµÄÕûÊýÖµ
    586              uint8 buff[30]={0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   00001A   741E         MOV     A,#0x1e
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    587          
    588              DHT11();             //»ñÈ¡ÎÂÊª¶È
   \   00001F                ; Setup parameters for call to function DHT11
   \   00001F   12....       LCALL   ??DHT11?relay
    589              adc= HalAdcRead(HAL_ADC_CHANNEL_6, HAL_ADC_RESOLUTION_14); //ADC ²ÉÑùÖµ P06¿Ú
   \   000022                ; Setup parameters for call to function HalAdcRead
   \   000022   7A04         MOV     R2,#0x4
   \   000024   7906         MOV     R1,#0x6
   \   000026   12....       LCALL   ??HalAdcRead?relay
   \   000029   8A..         MOV     ?V0 + 0,R2
   \   00002B   8B..         MOV     ?V0 + 1,R3
   \   00002D   A8..         MOV     R0,?V0 + 0
   \   00002F   A9..         MOV     R1,?V0 + 1
    590          
    591            //  osal_memset(str_adc, 0, 19);
    592              //×î´ó²ÉÑùÖµ8192(ÒòÎª×î¸ßÎ»ÊÇ·ûºÅÎ»)
    593              if(adc>=8192)
   \   000031   C3           CLR     C
   \   000032   E9           MOV     A,R1
   \   000033   9420         SUBB    A,#0x20
   \   000035   4003         JC      $+5
   \   000037   02....       LJMP    ??SampleApp_Send_P2P_Message_0 & 0xFFFF
    594              {
    595                  return;
    596              }
    597              
    598              adc=8192-adc;//·´ÏàÒ»ÏÂ£¬ÒòÎªµÍÊª¶ÈÊ±AO¿ÚÊä³ö½Ï¸ßµçÆ½
    599                             //          ¸ßÊª¶ÈÊ±AO¿ÚÊä³ö½ÏµÍµçÆ½   
    600          
    601              //×ª»¯Îª°Ù·Ö±È
    602              vol=(float)((float)adc)/8192.0;
    603                 
    604              //È¡°Ù·Ö±ÈÁ½Î»Êý×Ö
    605              temp=vol*100;
                         ^
Warning[Pa093]: implicit conversion from floating point to integer
   \   00003A   E4           CLR     A
   \   00003B   C3           CLR     C
   \   00003C   98           SUBB    A,R0
   \   00003D   F5..         MOV     ?V0 + 0,A
   \   00003F   7420         MOV     A,#0x20
   \   000041   99           SUBB    A,R1
   \   000042   F5..         MOV     ?V0 + 1,A
   \   000044   E4           CLR     A
   \   000045   F5..         MOV     ?V0 + 2,A
   \   000047   F5..         MOV     ?V0 + 3,A
   \   000049   78..         MOV     R0,#?V0 + 0
   \   00004B   12....       LCALL   ?UL_TO_FLT
   \   00004E   90....       MOV     DPTR,#__Constant_39000000
   \   000051   78..         MOV     R0,#?V0 + 4
   \   000053   12....       LCALL   ?L_MOV_X
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   79..         MOV     R1,#?V0 + 4
   \   00005A   12....       LCALL   ?FLT_MUL
   \   00005D   90....       MOV     DPTR,#__Constant_42c80000
   \   000060   78..         MOV     R0,#?V0 + 4
   \   000062   12....       LCALL   ?L_MOV_X
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   79..         MOV     R1,#?V0 + 4
   \   000069   12....       LCALL   ?FLT_MUL
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?FLT_TO_L
   \   000071   85....       MOV     ?V0 + 2,?V0 + 0
   \   000074   85....       MOV     ?V0 + 3,?V0 + 1
    606          
    607          
    608              //lcdÏÔÊ¾&´®¿ÚÊä³ö
    609          
    610              //ÎÂÊª¶ÈÏÔÊ¾
    611              sprintf(buff, "ÎÂ:%c%c Êª:%c%c", wendu_shi,wendu_ge,shidu_shi, shidu_ge);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000077                ; Setup parameters for call to function sprintf
   \   000077   90....       MOV     DPTR,#shidu_ge
   \   00007A   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000080   90....       MOV     DPTR,#shidu_shi
   \   000083   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   90....       MOV     DPTR,#wendu_ge
   \   00008C   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   90....       MOV     DPTR,#wendu_shi
   \   000095   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   7C..         MOV     R4,#`?<Constant "\\316\\302:%c%c \\312\\252:%c%c">` & 0xff
   \   00009D   7D..         MOV     R5,#(`?<Constant "\\316\\302:%c%c \\312\\252:%c%c">` >> 8) & 0xff
   \   00009F   7408         MOV     A,#0x8
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   AA82         MOV     R2,DPL
   \   0000A6   AB83         MOV     R3,DPH
   \   0000A8   12....       LCALL   ??sprintf?relay
   \   0000AB   7408         MOV     A,#0x8
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
    612              HalLcdWriteString( buff, HAL_LCD_LINE_3 );
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   0000B0                ; Setup parameters for call to function HalLcdWriteString
   \   0000B0   12....       LCALL   ?Subroutine1 & 0xFFFF
    613          
    614              //ÎÂÊª¶È´®¿ÚÊä³ö
    615              HalUARTWrite(0, buff, osal_strlen(buff));
                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    616              HalUARTWrite(0, "\n",1);
    617          
    618              //¹âÕÕÏÔÊ¾
    619              sprintf(buff, "¹âÕÕ:%02d", temp);
                             ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \                     ??CrossCallReturnLabel_12:
   \   0000B3                ; Setup parameters for call to function sprintf
   \   0000B3   78..         MOV     R0,#?V0 + 2
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   7C..         MOV     R4,#`?<Constant "\\271\\342\\325\\325:%02d">` & 0xff
   \   0000BA   7D..         MOV     R5,#(`?<Constant "\\271\\342\\325\\325:%02d">` >> 8) & 0xff
   \   0000BC   7402         MOV     A,#0x2
   \   0000BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C1   AA82         MOV     R2,DPL
   \   0000C3   AB83         MOV     R3,DPH
   \   0000C5   12....       LCALL   ??sprintf?relay
   \   0000C8   7402         MOV     A,#0x2
   \   0000CA   12....       LCALL   ?DEALLOC_XSTACK8
    620              HalLcdWriteString( buff, HAL_LCD_LINE_4 );
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   0000CD                ; Setup parameters for call to function HalLcdWriteString
   \   0000CD   7904         MOV     R1,#0x4
   \   0000CF   12....       LCALL   ??Subroutine7_0 & 0xFFFF
    621          
    622              //¹âÕÕ´®¿ÚÊä³ö
    623              HalUARTWrite(0, buff, osal_strlen(buff));
                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
    624              HalUARTWrite(0, "\n",1);
    625                  
    626              //ÎÂÊª¶ÈºÍ¹âÕÕ´®¿Ú´«Êä
    627              buff[0]=wendu_shi*10+wendu_ge;
   \                     ??CrossCallReturnLabel_14:
   \   0000D2   75F00A       MOV     B,#0xa
   \   0000D5   90....       MOV     DPTR,#wendu_shi
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   A4           MUL     AB
   \   0000DA   7583..       MOV     DPH,#(wendu_ge >> 8) & 0xff
   \   0000DD   7582..       MOV     DPL,#wendu_ge & 0xff
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   28           ADD     A,R0
   \   0000E3   85..82       MOV     DPL,?XSP + 0
   \   0000E6   85..83       MOV     DPH,?XSP + 1
   \   0000E9   F0           MOVX    @DPTR,A
    628              buff[1]=shidu_shi*10+shidu_ge;
   \   0000EA   75F00A       MOV     B,#0xa
   \   0000ED   90....       MOV     DPTR,#shidu_shi
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   A4           MUL     AB
   \   0000F2   7583..       MOV     DPH,#(shidu_ge >> 8) & 0xff
   \   0000F5   7582..       MOV     DPL,#shidu_ge & 0xff
   \   0000F8   F8           MOV     R0,A
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   28           ADD     A,R0
   \   0000FB   C0E0         PUSH    A
   \   0000FD   7401         MOV     A,#0x1
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   D0E0         POP     A
   \   000104   F0           MOVX    @DPTR,A
    629              buff[2]=temp;
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   E5..         MOV     A,?V0 + 2
   \   00010C   F0           MOVX    @DPTR,A
    630          
    631           
    632              if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    633                                 SAMPLEAPP_P2P_CLUSTERID,
    634                                 3,
    635                                 buff,
    636                                 &SampleApp_TransID,
    637                                 AF_DISCV_ROUTE,
    638                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00010D                ; Setup parameters for call to function AF_DataRequest
   \   00010D   75..1E       MOV     ?V0 + 0,#0x1e
   \   000110   78..         MOV     R0,#?V0 + 0
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000115   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000118   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00011B   78..         MOV     R0,#?V0 + 0
   \   00011D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000120   7403         MOV     A,#0x3
   \   000122   12....       LCALL   ?XSTACK_DISP0_8
   \   000125   8582..       MOV     ?V0 + 0,DPL
   \   000128   8583..       MOV     ?V0 + 1,DPH
   \   00012B   78..         MOV     R0,#?V0 + 0
   \   00012D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000130   75..03       MOV     ?V0 + 0,#0x3
   \   000133   75..00       MOV     ?V0 + 1,#0x0
   \   000136   78..         MOV     R0,#?V0 + 0
   \   000138   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00013B   75..04       MOV     ?V0 + 0,#0x4
   \   00013E   78..         MOV     R0,#?V0 + 0
   \   000140   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000143   7920         MOV     R1,#0x20
   \   000145   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000147   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000149   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   00014B   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   00014D   12....       LCALL   ??AF_DataRequest?relay
   \   000150   7409         MOV     A,#0x9
   \   000152   12....       LCALL   ?DEALLOC_XSTACK8
    639              {
    640              }
    641              else
    642              {
    643              // Error occurred in request to send.
    644              }
    645          }
   \                     ??SampleApp_Send_P2P_Message_0:
   \   000155   741E         MOV     A,#0x1e
   \   000157   12....       LCALL   ?DEALLOC_XSTACK8
   \   00015A   7F08         MOV     R7,#0x8
   \   00015C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for wendu>`:
   \   000000   14           DB 20

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for shidu>`:
   \   000000   1E           DB 30

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for guangzhao>`:
   \   000000   28           DB 40

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??displayAndCtrl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    displayAndCtrl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Send_P2P_Message?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Send_P2P_Message

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\316\\302\\266\\310:%02d \\312\\252\\266`:
   \   000000   CEC2B6C8     DB "\316\302\266\310:%02d \312\252\266\310:%02d"
   \            3A253032
   \            6420CAAA
   \            B6C83A25
   \            30326400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\271\\342\\325\\325:%02d">`:
   \   000000   B9E2D5D5     DB "\271\342\325\325:%02d"
   \            3A253032
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00000000     DB 0, 0, 0, 0, 0
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\316\\302:%c%c \\312\\252:%c%c">`:
   \   000000   CEC23A25     DB "\316\302:%c%c \312\252:%c%c"
   \            63256320
   \            CAAA3A25
   \            63256300

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_39000000:
   \   000000   00000039     DD 39000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80000:
   \   000000   0000C842     DD 42C80000H
    646          /*********************************************************************
    647          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     SampleApp_HandleKeys               0      0     22
       -> SampleApp_SendFlashMessage
                                        0      0     20
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
       -> displayAndCtrl                0      0     22
     SampleApp_MessageMSGCB             0      0     22
       -> displayAndCtrl                0      0     20
       -> HalLedBlink                   0      0     20
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SampleApp_Send_P2P_Message
                                        0      0     24
       -> osal_rand                     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendFlashMessage         1      0     32
       -> AF_DataRequest                0      0     44
     SampleApp_SendPeriodicMessage      0      0     19
       -> AF_DataRequest                0      0     38
     SampleApp_Send_P2P_Message         2      0     67
       -> DHT11                         0      0     92
       -> HalAdcRead                    0      0     92
       -> sprintf                       0      0    108
       -> HalLcdWriteString             0      0     92
       -> osal_strlen                   0      0     92
       -> HalUARTWrite                  0      0     92
       -> HalUARTWrite                  0      0     92
       -> sprintf                       0      0     96
       -> HalLcdWriteString             0      0     92
       -> osal_strlen                   0      0     92
       -> HalUARTWrite                  0      0     92
       -> HalUARTWrite                  0      0     92
       -> AF_DataRequest                0      0    110
     displayAndCtrl                     2      0     55
       -> sprintf                       0      0     88
       -> HalLcdWriteString             0      0     80
       -> osal_strlen                   0      0     80
       -> HalUARTWrite                  0      0     80
       -> HalUARTWrite                  0      0     80
       -> sprintf                       0      0     84
       -> HalLcdWriteString             0      0     80
       -> osal_strlen                   0      0     80
       -> HalUARTWrite                  0      0     80
       -> HalUARTWrite                  0      0     80


   Segment part sizes:

     Function/Label                                 Bytes
     --------------                                 -----
     _A_P0                                             1
     P0DIR                                             1
     SampleApp_ClusterList                             4
     SampleApp_SimpleDesc                             12
     SampleApp_epDesc                                  6
     SampleApp_TaskID                                  1
     SampleApp_NwkState                                1
     SampleApp_TransID                                 1
     SampleApp_Periodic_DstAddr                       12
     SampleApp_Flash_DstAddr                          12
     SampleApp_P2P_DstAddr                            12
     SampleApp_Group                                  18
     SampleAppPeriodicCounter                          1
     SampleAppFlashCounter                             1
     wendu                                             1
     shidu                                             1
     guangzhao                                         1
     SampleApp_Init                                  194
     SampleApp_ProcessEvent                          176
     SampleApp_HandleKeys                             62
     ??Subroutine6_0                                   5
     displayAndCtrl                                  162
     ?Subroutine0                                      3
     ?Subroutine4                                      9
     ?Subroutine3                                      6
     ?Subroutine1                                      2
     ??Subroutine7_0                                  59
     SampleApp_MessageMSGCB                          134
     ?Subroutine2                                      6
     ?Subroutine5                                     13
     SampleApp_SendPeriodicMessage                    68
     SampleApp_SendFlashMessage                      115
     SampleApp_Send_P2P_Message                      351
     ?<Initializer for wendu>                          1
     ?<Initializer for shidu>                          1
     ?<Initializer for guangzhao>                      1
     ??SampleApp_Init?relay                            6
     ??SampleApp_ProcessEvent?relay                    6
     ??SampleApp_HandleKeys?relay                      6
     ??displayAndCtrl?relay                            6
     ??SampleApp_MessageMSGCB?relay                    6
     ??SampleApp_SendPeriodicMessage?relay             6
     ??SampleApp_SendFlashMessage?relay                6
     ??SampleApp_Send_P2P_Message?relay                6
     ?<Constant "Group 1">                             8
     ?<Constant "SampleApp">                          10
     ?<Constant {0}>                                  30
     ?<Constant "\316\302\266\310:%02d \312\252\266   20
     ?<Constant "\n">                                  2
     ?<Constant "\271\342\325\325:%02d">              10
     ?<Constant {0}>_1                                30
     ?<Constant "\316\302:%c%c \312\252:%c%c">        16
     __Constant_39000000                               4
     __Constant_42c80000                               4

 
 1 365 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
     3 bytes in segment XDATA_I
     3 bytes in segment XDATA_ID
   150 bytes in segment XDATA_ROM_C
    65 bytes in segment XDATA_Z
 
 1 416 bytes of CODE  memory
   142 bytes of CONST memory (+ 8 bytes shared)
     0 bytes of DATA  memory (+ 2 bytes shared)
    68 bytes of XDATA memory

Errors: none
Warnings: 13
