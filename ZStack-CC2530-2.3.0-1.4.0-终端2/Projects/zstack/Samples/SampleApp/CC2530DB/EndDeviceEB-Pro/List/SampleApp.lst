###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         08/Nov/2015  16:05:09 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c           #
#    Command line       =  -f E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ #
#                          ZStack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wEndev.cfg (-DCPU32MHZ                   #
#                          -DROOT=__near_func -DBLINK_LEDS) -f                #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC25 #
#                          30DB\f8wConfig.cfg (-DSECURE=0                     #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\Source\SampleApp.c -D        #
#                          ZIGBEEPRO -D NWK_AUTO_POLL -D ZTOOL_P1 -D          #
#                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D        #
#                          LCD_SUPPORTED=DEBUG -lC E:\work\zigbee\taobao\work #
#                          \WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂ #
#                          À2-÷«ƒ‹º“æ”\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\EndDeviceEB-Pro\List\ -lA                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\ --diag_suppress Pe001,Pa010 -o                  #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \ -e --debug --core=plain --dptr=16,1              #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ #
#                          ZStack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\ #
#                          zstack\Samples\SampleApp\CC2530DB\ -I              #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\SOURCE\ -I       #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\ZMAIN\TI25 #
#                          30DB\ -I E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ #
#                          ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\COMPONENTS\MT\ -I E:\work\zigbee\taobao\work\ #
#                          WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À #
#                          2-÷«ƒ‹º“æ”\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I      #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\HAL\TARGET\CC2530EB\ -I                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\MCU\CCSOC\ -I                          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\OSAL\INCLUDE\ -I E:\work\zigbee\taobao\work #
#                          \WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂ #
#                          À2-÷«ƒ‹º“æ”\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\..\..\..\..\..\COMPONENTS\STACK\AF\ -I        #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\NWK\ -I E:\work\zigbee\taobao\work\WI #
#                          FI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À2- #
#                          ÷«ƒ‹º“æ”\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\STACK\SEC\ -I          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\SAPI\ -I E:\work\zigbee\taobao\work\W #
#                          IFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À2 #
#                          -÷«ƒ‹º“æ”\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\..\..\COMPONENTS\STACK\SYS\ -I         #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\STACK\ZDO\ -I E:\work\zigbee\taobao\work\WI #
#                          FI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À2- #
#                          ÷«ƒ‹º“æ”\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I           #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\ZMAC\ -I E:\work\zigbee\taobao\work\WIFI-Zi #
#                          gBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º #
#                          “æ”\Projects\zstack\Samples\SampleApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\SERVICES\SDATA\ -I                          #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\INCLUDE\ -I E:\work\zigbee\taobao\work\ #
#                          WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À #
#                          2-÷«ƒ‹º“æ”\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I   #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\ -I                     #
#                          E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\COMP #
#                          ONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\ -Ohz       #
#    List file          =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Lis #
#                          t\SampleApp.lst                                    #
#    Object file        =  E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZSt #
#                          ack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zst #
#                          ack\Samples\SampleApp\CC2530DB\EndDeviceEB-Pro\Obj #
#                          \SampleApp.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

E:\work\zigbee\taobao\work\WIFI-ZigBeeπ‹¿ÌœµÕ≥\ZStack-CC2530-2.3.0-1.4.0-÷’∂À2-÷«ƒ‹º“æ”\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED ìAS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf3
   \   unsigned char volatile __sfr P0SEL
   \                     P0SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          #include "MT_UART.h"
     75          #include "MT_APP.h"
     76          #include "MT.h"
     77          #include "DHT11.h"
     78          #include "Hal_adc.h"
     79          #include "stdio.h"
     80          
     81          /*********************************************************************
     82           * MACROS
     83           */
     84          
     85          /*********************************************************************
     86           * CONSTANTS
     87           */
     88          
     89          /*********************************************************************
     90           * TYPEDEFS
     91           */
     92          
     93          /*********************************************************************
     94           * GLOBAL VARIABLES
     95           */
     96          
     97          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     98          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0300         DW 3
   \   000006   0400         DW 4
   \   000008   0500         DW 5
   \   00000A   0600         DW 6
     99          {
    100            SERIALAPP_CONNECTREQ_CLUSTER,//”√”⁄…œ¥´÷’∂À∂Ãµÿ÷∑
    101            SAMPLEAPP_END1,
    102            SAMPLEAPP_END2,
    103            SAMPLEAPP_END3,
    104            SAMPLEAPP_END4,
    105            SAMPLEAPP_END5
    106          };
    107          

   \                                 In  segment XDATA_ROM_C, align 1
    108          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   06           DB 6
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   06           DB 6
   \   00000A   ....         DW SampleApp_ClusterList
    109          {
    110            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    111            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    112            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    113            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    114            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    115            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    116            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    117            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    118            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    119          };
    120          
    121          // This is the Endpoint/Interface description.  It is defined here, but
    122          // filled-in in SampleApp_Init().  Another way to go would be to fill
    123          // in the structure here and make it a "const" (in code space).  The
    124          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    125          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    126          
    127          /*********************************************************************
    128           * EXTERNAL VARIABLES
    129           */
    130          
    131          /*********************************************************************
    132           * EXTERNAL FUNCTIONS
    133           */
    134          
    135          /*********************************************************************
    136           * LOCAL VARIABLES
    137           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    139                                    // This variable will be received when
    140                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          afAddrType_t SampleApp_Periodic_DstAddr; //π„≤•
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    146          afAddrType_t SampleApp_Flash_DstAddr;    //◊È≤•
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          afAddrType_t SampleApp_P2P_DstAddr;      //µ„≤•
   \                     SampleApp_P2P_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    153          
    154          
    155          #define HUMAN_PIN	P0_4       //»ÀÃÂ∏–”¶1:”–»À0£∫Œﬁ»À
    156          #define LAMP_PIN     P0_5        //∂®“ÂP0.5ø⁄Œ™ºÃµÁ∆˜ ‰»Î∂À
    157          #define GAS_PIN      P1_5        //∂®“ÂP0.6ø⁄Œ™—ÃŒÌ¥´∏–∆˜µƒ ‰»Î∂À  
    158          #define DHT11_DATA P0_7   //dht11
    159          #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
    160          
    161          
    162          
    163          //---------------------------------------------------------------------
    164          //±Í◊º∞Ê≤ªÕ¨µƒ÷’∂À–Ë“™–ﬁ∏ƒ¥ÀID,”√”⁄ ∂±–≠µ˜∆˜∑¢π˝¿¥µƒ ˝æ›£¨IDœ‡Õ¨‘Ú¥¶¿Ì
    165          //◊®“µ∞Ê◊‘∂Ø¥”FlashªÒµ√µÿ÷∑£¨À˘”–÷’∂ÀπÃº˛œ‡Õ¨£¨  ∫œ¡ø≤˙

   \                                 In  segment XDATA_I, align 1, keep-with-next
    166          static uint16 EndDeviceID = 0x0002; //÷’∂ÀID£¨∑«≥£÷ÿ“™
   \                     EndDeviceID:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for EndDeviceID>`
   \   000002                REQUIRE __INIT_XDATA_I
    167          
    168          
    169          /*********************************************************************
    170           * LOCAL FUNCTIONS
    171           */
    172          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    173          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    174          void SampleApp_SendPeriodicMessage( void );
    175          void SerialApp_DeviceConnect();
    176          static void SerialApp_SendSensorsData();
    177          uint8 GetLamp( void );
    178          void SetLamp(bool on);
    179          uint8 GetGas( void );
    180          uint8 GetHuman( void );
    181          
    182          /*********************************************************************
    183           * NETWORK LAYER CALLBACKS
    184           */
    185          
    186          /*********************************************************************
    187           * PUBLIC FUNCTIONS
    188           */
    189          
    190          /*********************************************************************
    191           * @fn      SampleApp_Init
    192           *
    193           * @brief   Initialization function for the Generic App Task.
    194           *          This is called during initialization and should contain
    195           *          any application specific initialization (ie. hardware
    196           *          initialization/setup, table initialization, power up
    197           *          notificaiton ... ).
    198           *
    199           * @param   task_id - the ID assigned by OSAL.  This ID should be
    200           *                    used to send messages and set timers.
    201           *
    202           * @return  none
    203           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    204          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    205          { 
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    206              SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    207              SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    208              SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    209          
    210              MT_UartInit();                  //¥Æø⁄≥ı ºªØ
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay
    211              MT_UartRegisterTaskID(task_id); //◊¢≤·¥Æø⁄»ŒŒÒ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay
    212          
    213              P0SEL &= ~0x10;                  //…Ë÷√P0.4ø⁄Œ™∆’Õ®IO
   \   00001E   53F3EF       ANL     0xf3,#0xef
    214              P0DIR &= ~0x10;                  //…Ë÷√P0.4Œ™ ‰»Î
   \   000021   53FDEF       ANL     0xfd,#0xef
    215          
    216              P0SEL &= ~0x20;                  //…Ë÷√P0.5ø⁄Œ™∆’Õ®IO
   \   000024   53F3DF       ANL     0xf3,#0xdf
    217              P0DIR |= 0x20;                  //…Ë÷√P0.5Œ™ ‰≥ˆ
   \   000027   43FD20       ORL     0xfd,#0x20
    218              
    219              P0SEL &= ~0x40;                  //…Ë÷√P0.6ø⁄Œ™∆’Õ®IO
   \   00002A   53F3BF       ANL     0xf3,#0xbf
    220              P0DIR &= ~0x40;                  //…Ë÷√P0.6Œ™ ‰»Î
   \   00002D   53FDBF       ANL     0xfd,#0xbf
    221          
    222              P1SEL &= ~0x20;                  //…Ë÷√P1.5ø⁄Œ™∆’Õ®IO
   \   000030   53F4DF       ANL     0xf4,#0xdf
    223              P1DIR &= ~0x20;                  //…Ë÷√P1.5Œ™ ‰»Î
   \   000033   53FEDF       ANL     0xfe,#0xdf
    224          
    225              
    226              LAMP_PIN = 1;                   //µÕµÁ∆ΩºÃµÁ∆˜∂œø™;∏ﬂµÁ∆ΩºÃµÁ∆˜Œ¸∫œ
   \   000036   D285         SETB    0x80.5
    227          
    228          
    229            
    230            // Device hardware initialization can be added here or in main() (Zmain.c).
    231            // If the hardware is application specific - add it here.
    232            // If the hardware is other parts of the device add it in main().
    233          
    234           #if defined ( BUILD_ALL_DEVICES )
    235            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    236            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    237            // together - if they are - we will start up a coordinator. Otherwise,
    238            // the device will start as a router.
    239            if ( readCoordinatorJumper() )
    240              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;dd
    241            else
    242              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    243          #endif // BUILD_ALL_DEVICES
    244          
    245          #if defined ( HOLD_AUTO_START )
    246            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    247            //  from starting the device and wait for the application to
    248            //  start the device.
    249            ZDOInitDevice(0);ee
    250          #endif
    251          
    252            // Setup for the periodic message's destination address
    253            // Broadcast to everyone
    254            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000038   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00003B   740F         MOV     A,#0xf
   \   00003D   F0           MOVX    @DPTR,A
    255            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00003E   A3           INC     DPTR
   \   00003F   7414         MOV     A,#0x14
   \   000041   F0           MOVX    @DPTR,A
    256            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000042   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000045   74FF         MOV     A,#-0x1
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   F0           MOVX    @DPTR,A
    257          
    258            // Setup for the flash command's destination address - Group 1
    259            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00004A   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
    260            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000050   A3           INC     DPTR
   \   000051   7414         MOV     A,#0x14
   \   000053   F0           MOVX    @DPTR,A
    261            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000054   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000057   7401         MOV     A,#0x1
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
    262            
    263            SampleApp_P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit; //µ„≤• 
   \   00005D   90....       MOV     DPTR,#SampleApp_P2P_DstAddr + 8
   \   000060   7402         MOV     A,#0x2
   \   000062   F0           MOVX    @DPTR,A
    264            SampleApp_P2P_DstAddr.endPoint = SAMPLEAPP_ENDPOINT; 
   \   000063   A3           INC     DPTR
   \   000064   7414         MOV     A,#0x14
   \   000066   F0           MOVX    @DPTR,A
    265            SampleApp_P2P_DstAddr.addr.shortAddr = 0x0000;            //∑¢∏¯–≠µ˜∆˜
   \   000067   90....       MOV     DPTR,#SampleApp_P2P_DstAddr
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   F0           MOVX    @DPTR,A
    266          
    267            // Fill out the endpoint description.
    268            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00006E   90....       MOV     DPTR,#SampleApp_epDesc
   \   000071   7414         MOV     A,#0x14
   \   000073   F0           MOVX    @DPTR,A
    269            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000074   A3           INC     DPTR
   \   000075   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00007B   F0           MOVX    @DPTR,A
    270            SampleApp_epDesc.simpleDesc
    271                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00007C   A3           INC     DPTR
   \   00007D   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000083   F0           MOVX    @DPTR,A
    272            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000084   A3           INC     DPTR
   \   000085   E4           CLR     A
   \   000086   F0           MOVX    @DPTR,A
    273          
    274            // Register the endpoint description with the AF
    275            afRegister( &SampleApp_epDesc );
   \   000087                ; Setup parameters for call to function afRegister
   \   000087   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   000089   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00008B   12....       LCALL   ??afRegister?relay
    276          
    277            // Register for all key events - This app will handle all key events
    278            RegisterForKeys( SampleApp_TaskID );
   \   00008E                ; Setup parameters for call to function RegisterForKeys
   \   00008E   90....       MOV     DPTR,#SampleApp_TaskID
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   12....       LCALL   ??RegisterForKeys?relay
    279          
    280            // By default, all devices start out in Group 1
    281            SampleApp_Group.ID = 0x0001;
   \   000096   90....       MOV     DPTR,#SampleApp_Group
   \   000099   7401         MOV     A,#0x1
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   E4           CLR     A
   \   00009E   F0           MOVX    @DPTR,A
    282            osal_memcpy( SampleApp_Group.name, "Group 1", 7 );
   \   00009F                ; Setup parameters for call to function osal_memcpy
   \   00009F   75....       MOV     ?V0 + 0,#`?<Constant "Group 1">` & 0xff
   \   0000A2   75....       MOV     ?V0 + 1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000A5   F5..         MOV     ?V0 + 2,A
   \   0000A7   78..         MOV     R0,#?V0 + 0
   \   0000A9   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AC   7C07         MOV     R4,#0x7
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000B2   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000B4   12....       LCALL   ??osal_memcpy?relay
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
    283            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000BC                ; Setup parameters for call to function aps_AddGroup
   \   0000BC   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000BE   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000C0   7914         MOV     R1,#0x14
   \   0000C2   12....       LCALL   ??aps_AddGroup?relay
    284          
    285          #if defined ( LCD_SUPPORTED )
    286            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000C5                ; Setup parameters for call to function HalLcdWriteString
   \   0000C5   7901         MOV     R1,#0x1
   \   0000C7   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000C9   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000CB   12....       LCALL   ??HalLcdWriteString?relay
    287          #endif
    288          }
   \   0000CE   7F03         MOV     R7,#0x3
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000D3                REQUIRE P0SEL
   \   0000D3                REQUIRE P0DIR
   \   0000D3                REQUIRE P1SEL
   \   0000D3                REQUIRE P1DIR
   \   0000D3                REQUIRE _A_P0
    289          
    290          /*********************************************************************
    291           * @fn      SampleApp_ProcessEvent
    292           *
    293           * @brief   Generic Application Task event processor.  This function
    294           *          is called to process all events for the task.  Events
    295           *          include timers, messages and any other user defined events.
    296           *
    297           * @param   task_id  - The OSAL assigned task ID.
    298           * @param   events - events to process.  This is a bit map and can
    299           *                   contain more than one event.
    300           *
    301           * @return  none
    302           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    303          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    304          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    305            afIncomingMSGPacket_t *MSGpkt;
    306            (void)task_id;  // Intentionally unreferenced parameter
    307          
    308            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6077         JZ      ??SampleApp_ProcessEvent_0
    309            {
    310              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8029         SJMP    ??SampleApp_ProcessEvent_1
    311              while ( MSGpkt )
    312              {
    313                switch ( MSGpkt->hdr.event )
    314                {
    315                  // Received when a key is pressed
    316                  case KEY_CHANGE:
    317                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    318                    break;
    319          
    320                  // Received when a messages is received (OTA) for this endpoint
    321                  case AF_INCOMING_MSG_CMD:
    322                    SampleApp_MessageMSGCB( MSGpkt );
    323                    break;
    324          
    325                  // Received whenever the device changes state in the network
    326                  case ZDO_STATE_CHANGE:
    327                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    328                    if ( //(SampleApp_NwkState == DEV_ZB_COORD) ||
    329                           (SampleApp_NwkState == DEV_ROUTER)
    330                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6407         XRL     A,#0x7
   \   000017   6005         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6406         XRL     A,#0x6
   \   00001C   7013         JNZ     ??SampleApp_ProcessEvent_4
    331                    {
    332          
    333                      SerialApp_DeviceConnect();//…œ¥´÷’∂Àµƒ∂Ãµÿ÷∑
   \                     ??SampleApp_ProcessEvent_3:
   \   00001E                ; Setup parameters for call to function SerialApp_DeviceConnect
   \   00001E   12....       LCALL   ??SerialApp_DeviceConnect?relay
    334                      // Start sending the periodic message in a regular interval.
    335                      osal_start_timerEx( SampleApp_TaskID,
    336                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    337                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \   000021                ; Setup parameters for call to function osal_start_timerEx
   \   000021   7CD0         MOV     R4,#-0x30
   \   000023   7D07         MOV     R5,#0x7
   \   000025   7A01         MOV     R2,#0x1
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay
    338                    }
    339                    else
    340                    {
    341                      // Device is no longer in the network
    342                    }
    343                    break;
    344          
    345                  default:
    346                    break;
    347                }
    348          
    349                // Release the memory
    350                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000031                ; Setup parameters for call to function osal_msg_deallocate
   \   000031   AA..         MOV     R2,?V0 + 0
   \   000033   AB..         MOV     R3,?V0 + 1
   \   000035   12....       LCALL   ??osal_msg_deallocate?relay
    351          
    352                // Next - if one is available
    353                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000038                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000038   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   F9           MOV     R1,A
   \   00003D   12....       LCALL   ??osal_msg_receive?relay
   \   000040   8A..         MOV     ?V0 + 0,R2
   \   000042   8B..         MOV     ?V0 + 1,R3
   \   000044   E5..         MOV     A,?V0 + 0
   \   000046   45..         ORL     A,?V0 + 1
   \   000048   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004A   85..82       MOV     DPL,?V0 + 0
   \   00004D   85..83       MOV     DPH,?V0 + 1
   \   000050   E0           MOVX    A,@DPTR
   \   000051   24E6         ADD     A,#-0x1a
   \   000053   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000055   245A         ADD     A,#0x5a
   \   000057   6006         JZ      ??SampleApp_ProcessEvent_7
   \   000059   24EF         ADD     A,#-0x11
   \   00005B   60B2         JZ      ??SampleApp_ProcessEvent_2
   \   00005D   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   00005F                ; Setup parameters for call to function SampleApp_HandleKeys
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   E0           MOVX    A,@DPTR
   \   000063   FA           MOV     R2,A
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   12....       LCALL   ??SampleApp_HandleKeys?relay
   \   000071   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000073                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000073   AA..         MOV     R2,?V0 + 0
   \   000075   AB..         MOV     R3,?V0 + 1
   \   000077   12....       LCALL   ??SampleApp_MessageMSGCB?relay
   \   00007A   80B5         SJMP    ??SampleApp_ProcessEvent_4
    354              }
    355          
    356              // return unprocessed events
    357              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007C   EE           MOV     A,R6
   \   00007D   FA           MOV     R2,A
   \   00007E   EF           MOV     A,R7
   \   00007F   6480         XRL     A,#0x80
   \                     ??SampleApp_ProcessEvent_8:
   \   000081   FB           MOV     R3,A
   \   000082   8023         SJMP    ??SampleApp_ProcessEvent_9
    358            }
    359          
    360            // Send a message out - This event is generated by a timer
    361            //  (setup in SampleApp_Init()).
    362            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000084   EE           MOV     A,R6
   \   000085   A2E0         MOV     C,0xE0 /* A   */.0
   \   000087   501A         JNC     ??SampleApp_ProcessEvent_10
    363            {
    364              // Send the periodic message
    365              
    366              SerialApp_SendSensorsData();
   \   000089                ; Setup parameters for call to function SerialApp_SendSensorsData
   \   000089   12....       LCALL   ??SerialApp_SendSensorsData?relay
    367          
    368              // Setup to send message again in normal period (+ a little jitter)
    369              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    370                  1000 );
   \   00008C                ; Setup parameters for call to function osal_start_timerEx
   \   00008C   7CE8         MOV     R4,#-0x18
   \   00008E   7D03         MOV     R5,#0x3
   \   000090   7A01         MOV     R2,#0x1
   \   000092   7B00         MOV     R3,#0x0
   \   000094   90....       MOV     DPTR,#SampleApp_TaskID
   \   000097   E0           MOVX    A,@DPTR
   \   000098   F9           MOV     R1,A
   \   000099   12....       LCALL   ??osal_start_timerEx?relay
    371          
    372          
    373              // return unprocessed events
    374              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   00009C   EE           MOV     A,R6
   \   00009D   6401         XRL     A,#0x1
   \   00009F   FA           MOV     R2,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   80DE         SJMP    ??SampleApp_ProcessEvent_8
    375            }
    376          
    377            // Discard unknown events
    378            return 0;
   \                     ??SampleApp_ProcessEvent_10:
   \   0000A3   7A00         MOV     R2,#0x0
   \   0000A5   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_9:
   \   0000A7   7F04         MOV     R7,#0x4
   \   0000A9   02....       LJMP    ?BANKED_LEAVE_XDATA
    379          }
    380          
    381          /*********************************************************************
    382           * Event Generation Functions
    383           */
    384          /*********************************************************************
    385           * @fn      SampleApp_HandleKeys
    386           *
    387           * @brief   Handles all key events for this device.
    388           *
    389           * @param   shift - true if in shift/alt.
    390           * @param   keys - bit field for key events. Valid entries:
    391           *                 HAL_KEY_SW_2
    392           *                 HAL_KEY_SW_1
    393           *
    394           * @return  none
    395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    396          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    397          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
    398            (void)shift;  // Intentionally unreferenced parameter
    399            
    400            if ( keys & HAL_KEY_SW_1 )
    401            {
    402              /* This key sends the Flash Command is sent to Group 1.
    403               * This device will not receive the Flash Command from this
    404               * device (even if it belongs to group 1).
    405               */
    406            }
    407          
    408            if ( keys & HAL_KEY_SW_2 )
   \   000006   A2E1         MOV     C,0xE0 /* A   */.1
   \   000008   5024         JNC     ??SampleApp_HandleKeys_0
    409            {
    410              /* The Flashr Command is sent to Group 1.
    411               * This key toggles this device in and out of group 1.
    412               * If this device doesn't belong to group 1, this application
    413               * will not receive the Flash command sent to group 1.
    414               */
    415              aps_Group_t *grp;
    416              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    417              if ( grp )
   \   00000A                ; Setup parameters for call to function aps_FindGroup
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   7914         MOV     R1,#0x14
   \   000010   12....       LCALL   ??aps_FindGroup?relay
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   EA           MOV     A,R2
   \   000016   45..         ORL     A,?V0 + 1
   \   000018   600B         JZ      ??SampleApp_HandleKeys_1
    418              {
    419                // Remove from the group
    420                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   00001A                ; Setup parameters for call to function aps_RemoveGroup
   \   00001A   7A01         MOV     R2,#0x1
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   7914         MOV     R1,#0x14
   \   000020   12....       LCALL   ??aps_RemoveGroup?relay
   \   000023   8009         SJMP    ??SampleApp_HandleKeys_0
    421              }
    422              else
    423              {
    424                // Add to the flash group
    425                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_1:
   \   000025                ; Setup parameters for call to function aps_AddGroup
   \   000025   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000027   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000029   7914         MOV     R1,#0x14
   \   00002B   12....       LCALL   ??aps_AddGroup?relay
    426              }
    427            }
    428          }
   \                     ??SampleApp_HandleKeys_0:
   \   00002E   02....       LJMP    ??Subroutine3_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine3_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    429          
    430          
    431          /*********************************************************************
    432           * @fn      SampleApp_MessageMSGCB
    433           *
    434           * @brief   Data message processor callback.  This function processes
    435           *          any incoming data - probably from other devices.  So, based
    436           *          on cluster ID, perform the intended action.
    437           *
    438           * @param   none
    439           *
    440           * @return  none
    441           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    442          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    443          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    444              uint16 flashTime;
                            ^
Warning[Pe177]: variable "flashTime" was declared but never referenced
    445          
    446              switch ( pkt->clusterId )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6403         XRL     A,#0x3
   \   00000F   7002         JNZ     ??SampleApp_MessageMSGCB_0
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \                     ??SampleApp_MessageMSGCB_0:
   \   000013   7021         JNZ     ??SampleApp_MessageMSGCB_1
    447              {
    448              case SAMPLEAPP_END2:
    449                  {
    450                      if(pkt->cmd.Data[0]>0)
   \   000015   EA           MOV     A,R2
   \   000016   2421         ADD     A,#0x21
   \   000018   F582         MOV     DPL,A
   \   00001A   EB           MOV     A,R3
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F583         MOV     DPH,A
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F583         MOV     DPH,A
   \   000025   8882         MOV     DPL,R0
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6004         JZ      ??SampleApp_MessageMSGCB_2
    451                      {
    452                          SetLamp(1);//ø™µ∆
   \   00002A                ; Setup parameters for call to function SetLamp
   \   00002A   7901         MOV     R1,#0x1
   \   00002C   8002         SJMP    ??SampleApp_MessageMSGCB_3
    453                      }
    454                      else
    455                      {
    456                          SetLamp(0);//πÿµ∆
   \                     ??SampleApp_MessageMSGCB_2:
   \   00002E                ; Setup parameters for call to function SetLamp
   \   00002E   7900         MOV     R1,#0x0
   \                     ??SampleApp_MessageMSGCB_3:
   \   000030   12....       LCALL   ??SetLamp?relay
    457                      }
    458                      SerialApp_SendSensorsData();
   \   000033                ; Setup parameters for call to function SerialApp_SendSensorsData
   \   000033   12....       LCALL   ??SerialApp_SendSensorsData?relay
    459                  }
    460                break;
    461            }
    462          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   000036   D083         POP     DPH
   \   000038   D082         POP     DPL
   \   00003A   02....       LJMP    ?BRET
    463          
    464          /*********************************************************************
    465           * @fn      SampleApp_SendPeriodicMessage
    466           *
    467           * @brief   Send the periodic message.
    468           *
    469           * @param   none
    470           *
    471           * @return  none
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    474          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    475              
    476          }
   \   000000   02....       LJMP    ?BRET
    477          
    478          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    479          static void SerialApp_SendSensorsData()
   \                     SerialApp_SendSensorsData:
    480          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    481              uint8 SendBuf[20]={0};
   \   00000A   90....       MOV     DPTR,#`?<Constant {0}>`
   \   00000D   C082         PUSH    DPL
   \   00000F   85..82       MOV     DPL,?XSP + 0
   \   000012   85..83       MOV     DPH,?XSP + 1
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   00001C   D082         POP     DPL
   \   00001E   7414         MOV     A,#0x14
   \   000020   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    482              uint8 SendLen=0;
    483          
    484              DHT11();                //ªÒ»°Œ¬ ™∂»
   \   000023                ; Setup parameters for call to function DHT11
   \   000023   12....       LCALL   ??DHT11?relay
    485          
    486              SendBuf[0] =EndDeviceID;
   \   000026   12....       LCALL   ?Subroutine2 & 0xFFFF
    487              SendBuf[1] = wendu;  //Œ¬∂»
   \                     ??CrossCallReturnLabel_0:
   \   000029   90....       MOV     DPTR,#wendu
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   F0           MOVX    @DPTR,A
    488              SendBuf[2] = shidu;    // ™∂»
   \   000037   90....       MOV     DPTR,#shidu
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C0E0         PUSH    A
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   F0           MOVX    @DPTR,A
    489              SendBuf[3] = GetGas()>0?true:false;  //ªÒ»°∆¯ÃÂ¥´∏–∆˜µƒ◊¥Ã¨ 
   \   000045   A295         MOV     C,0x90.5
   \   000047   7403         MOV     A,#0x3
   \   000049   5007         JNC     ??SerialApp_SendSensorsData_0
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   7401         MOV     A,#0x1
   \   000050   8004         SJMP    ??SerialApp_SendSensorsData_1
   \                     ??SerialApp_SendSensorsData_0:
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   E4           CLR     A
   \                     ??SerialApp_SendSensorsData_1:
   \   000056   F0           MOVX    @DPTR,A
    490              SendBuf[4] = GetHuman()>0?true:false;  //ªÒ»°»ÀÃÂ¥´∏–∆˜µƒ◊¥Ã¨ 
   \   000057   A284         MOV     C,0x80.4
   \   000059   7404         MOV     A,#0x4
   \   00005B   5007         JNC     ??SerialApp_SendSensorsData_2
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   7401         MOV     A,#0x1
   \   000062   8004         SJMP    ??SerialApp_SendSensorsData_3
   \                     ??SerialApp_SendSensorsData_2:
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   E4           CLR     A
   \                     ??SerialApp_SendSensorsData_3:
   \   000068   F0           MOVX    @DPTR,A
    491              SendBuf[5] = GetLamp()>0?true:false;  //true:¡¡
   \   000069   A285         MOV     C,0x80.5
   \   00006B   7405         MOV     A,#0x5
   \   00006D   5007         JNC     ??SerialApp_SendSensorsData_4
   \   00006F   12....       LCALL   ?XSTACK_DISP0_8
   \   000072   7401         MOV     A,#0x1
   \   000074   8004         SJMP    ??SerialApp_SendSensorsData_5
   \                     ??SerialApp_SendSensorsData_4:
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   E4           CLR     A
   \                     ??SerialApp_SendSensorsData_5:
   \   00007A   F0           MOVX    @DPTR,A
    492          
    493              SendLen=6;//π≤6∏ˆ◊÷Ω⁄∑¢ÀÕ
    494          
    495              if ( AF_DataRequest( &SampleApp_P2P_DstAddr, &SampleApp_epDesc,
    496                                 SAMPLEAPP_END2,
    497                                 SendLen,
    498                                 SendBuf,
    499                                 &SampleApp_TransID,
    500                                 AF_DISCV_ROUTE,
    501                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00007B                ; Setup parameters for call to function AF_DataRequest
   \   00007B   75..1E       MOV     ?V0 + 0,#0x1e
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000083   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000086   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7403         MOV     A,#0x3
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   8582..       MOV     ?V0 + 0,DPL
   \   000096   8583..       MOV     ?V0 + 1,DPH
   \   000099   78..         MOV     R0,#?V0 + 0
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009E   75..06       MOV     ?V0 + 0,#0x6
   \   0000A1   75..00       MOV     ?V0 + 1,#0x0
   \   0000A4   78..         MOV     R0,#?V0 + 0
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   75..03       MOV     ?V0 + 0,#0x3
   \   0000AC   78..         MOV     R0,#?V0 + 0
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B1   7920         MOV     R1,#0x20
   \   0000B3   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   0000B5   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   0000B7   7A..         MOV     R2,#SampleApp_P2P_DstAddr & 0xff
   \   0000B9   7B..         MOV     R3,#(SampleApp_P2P_DstAddr >> 8) & 0xff
   \   0000BB   12....       LCALL   ??AF_DataRequest?relay
   \   0000BE   7409         MOV     A,#0x9
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
    502              {
    503              }
    504              else
    505              {
    506              // Error occurred in request to send.
    507              }
    508              
    509          }
   \   0000C3   7414         MOV     A,#0x14
   \   0000C5                REQUIRE ?Subroutine0
   \   0000C5                REQUIRE _A_P0
   \   0000C5                REQUIRE _A_P1
   \   0000C5                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine3_0
   \   000003                ; // Fall through to label ??Subroutine3_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   90....       MOV     DPTR,#EndDeviceID
   \   000003   E0           MOVX    A,@DPTR
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET
    510          
    511          //ªÒµ√P0_5 ºÃµÁ∆˜“˝Ω≈µƒµÁ∆Ω
    512          //on  1:¡¡  0:√

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    513          uint8 GetLamp( void )
   \                     GetLamp:
    514          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    515            uint8 ret;
    516            
    517            if(LAMP_PIN == 0)
    518            {	
    519              ret = 0;
    520            }
    521            else
    522            {
    523          	ret = 1;
    524            }
    525            
    526          	return ret;
   \   000000   A285         MOV     C,0x80.5
   \   000002                REQUIRE ?Subroutine1
   \   000002                REQUIRE _A_P0
   \   000002                ; // Fall through to label ?Subroutine1
    527          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   E4           CLR     A
   \   000001   33           RLC     A
   \   000002   F9           MOV     R1,A
   \   000003   02....       LJMP    ?BRET
    528          
    529          //on  true:¡¡  false:√

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    530          void SetLamp(bool on)
   \                     SetLamp:
    531          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    532          	LAMP_PIN=(on)?1:0;
   \   000000   E9           MOV     A,R1
   \   000001   6004         JZ      ??SetLamp_0
   \   000003   7401         MOV     A,#0x1
   \   000005   8001         SJMP    ??SetLamp_1
   \                     ??SetLamp_0:
   \   000007   E4           CLR     A
   \                     ??SetLamp_1:
   \   000008   C4           SWAP    A
   \   000009   33           RLC     A
   \   00000A   54E0         ANL     A,#0xe0
   \   00000C   F8           MOV     R0,A
   \   00000D   E580         MOV     A,0x80
   \   00000F   54DF         ANL     A,#0xdf
   \   000011   48           ORL     A,R0
   \   000012   F580         MOV     0x80,A
    533          }
   \   000014   02....       LJMP    ?BRET
   \   000017                REQUIRE _A_P0
    534          
    535          //ªÒµ√P0_6 MQ-2∆¯ÃÂ¥´∏–∆˜µƒ ˝æ›
    536          //∏ﬂµÁ∆Ω ±£¨∆¯ÃÂ’˝≥£

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    537          uint8 GetGas( void )
   \                     GetGas:
    538          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    539            uint8 ret;
    540            
    541            if(GAS_PIN == 0)
    542              ret = 0;
    543            else
    544              ret = 1;
    545            
    546            return ret;
   \   000000   A295         MOV     C,0x90.5
   \   000002   80..         SJMP    ?Subroutine1
   \   000004                REQUIRE _A_P1
    547          }
    548          
    549          //ªÒµ√P0_4 »ÀÃÂ∫ÏÕ‚¥´∏–∆˜µƒ ˝æ›
    550          //∑µªÿ,1:”–»À0£∫Œﬁ»À

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    551          uint8 GetHuman( void )
   \                     GetHuman:
    552          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    553            uint8 ret;
    554            
    555            if(HUMAN_PIN == 0)
    556              ret = 0;
    557            else
    558              ret = 1;
    559            
    560            return ret;
   \   000000   A284         MOV     C,0x80.4
   \   000002   80..         SJMP    ?Subroutine1
   \   000004                REQUIRE _A_P0
    561          }
    562          
    563          //∞—÷’∂Àµÿ÷∑…œ¥´∑˛ŒÒ∆˜

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    564          void  SerialApp_DeviceConnect()
   \                     SerialApp_DeviceConnect:
    565          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    566            uint16 nwkAddr;
    567            uint16 parentNwkAddr;
                          ^
Warning[Pe177]: variable "parentNwkAddr" was declared but never referenced
    568            char buff[5] = {0};
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AC82         MOV     R4,DPL
   \   000012   AD83         MOV     R5,DPH
   \   000014   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000017   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    569              afAddrType_t SerialApp_TxAddr;
    570            
    571            nwkAddr = NLME_GetShortAddr();
   \   00001F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00001F   12....       LCALL   ??NLME_GetShortAddr?relay
    572          //  parentNwkAddr = NLME_GetCoordShortAddr();
    573            
    574            SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000022   740D         MOV     A,#0xd
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   7402         MOV     A,#0x2
   \   000029   F0           MOVX    @DPTR,A
    575            SerialApp_TxAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00002A   740E         MOV     A,#0xe
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7414         MOV     A,#0x14
   \   000031   F0           MOVX    @DPTR,A
    576            SerialApp_TxAddr.addr.shortAddr = 0x0;
   \   000032   7405         MOV     A,#0x5
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   E4           CLR     A
   \   000038   F0           MOVX    @DPTR,A
   \   000039   A3           INC     DPTR
   \   00003A   F0           MOVX    @DPTR,A
    577          
    578            buff[0] = EndDeviceID;
   \   00003B   12....       LCALL   ?Subroutine2 & 0xFFFF
    579            buff[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_1:
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   EB           MOV     A,R3
   \   000044   F0           MOVX    @DPTR,A
    580            buff[2] = LO_UINT16( nwkAddr );
   \   000045   7402         MOV     A,#0x2
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   EA           MOV     A,R2
   \   00004B   F0           MOVX    @DPTR,A
    581            
    582            if ( AF_DataRequest( &SerialApp_TxAddr, &SampleApp_epDesc,
    583                                 SERIALAPP_CONNECTREQ_CLUSTER,
    584                                 3,
    585                                 (uint8*)buff,
    586                                 &SampleApp_TransID, 
    587                                 0, 
    588                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   00004C                ; Setup parameters for call to function AF_DataRequest
   \   00004C   75..1E       MOV     ?V0 + 0,#0x1e
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   75....       MOV     ?V0 + 0,#SampleApp_TransID & 0xff
   \   000057   75....       MOV     ?V0 + 1,#(SampleApp_TransID >> 8) & 0xff
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   8582..       MOV     ?V0 + 0,DPL
   \   000067   8583..       MOV     ?V0 + 1,DPH
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   75..03       MOV     ?V0 + 0,#0x3
   \   000072   75..00       MOV     ?V0 + 1,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007A   75..01       MOV     ?V0 + 0,#0x1
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   7900         MOV     R1,#0x0
   \   000084   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000086   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000088   740E         MOV     A,#0xe
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   AA82         MOV     R2,DPL
   \   00008F   AB83         MOV     R3,DPH
   \   000091   12....       LCALL   ??AF_DataRequest?relay
   \   000094   7409         MOV     A,#0x9
   \   000096   12....       LCALL   ?DEALLOC_XSTACK8
    589            {
    590            }
    591            else
    592            {
    593              // Error occurred in request to send.
    594            }
    595          }
   \   000099   7411         MOV     A,#0x11
   \   00009B   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for EndDeviceID>`:
   \   000000   0200         DW 2

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_SendSensorsData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_SendSensorsData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetLamp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetLamp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SetLamp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SetLamp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetGas?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetGas

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GetHuman?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GetHuman

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SerialApp_DeviceConnect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SerialApp_DeviceConnect

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   000000       DB 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0
    596          /*********************************************************************
    597          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     GetGas                             0      0      0
     GetHuman                           0      0      0
     GetLamp                            0      0      0
     SampleApp_HandleKeys               0      0     22
       -> aps_FindGroup                 0      0     20
       -> aps_RemoveGroup               0      0     20
       -> aps_AddGroup                  0      0     20
     SampleApp_Init                     0      0     14
       -> MT_UartInit                   0      0     22
       -> MT_UartRegisterTaskID         0      0     22
       -> afRegister                    0      0     22
       -> RegisterForKeys               0      0     22
       -> osal_memcpy                   0      0     28
       -> aps_AddGroup                  0      0     22
       -> HalLcdWriteString             0      0     22
     SampleApp_MessageMSGCB             2      0     12
       -> SetLamp                       4      0      0
       -> SetLamp                       4      0      0
       -> SerialApp_SendSensorsData     4      0      0
     SampleApp_ProcessEvent             0      0     12
       -> osal_msg_receive              0      0     24
       -> SerialApp_DeviceConnect       0      0     24
       -> osal_start_timerEx            0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> SampleApp_HandleKeys          0      0     24
       -> SampleApp_MessageMSGCB        0      0     24
       -> SerialApp_SendSensorsData     0      0     24
       -> osal_start_timerEx            0      0     24
     SampleApp_SendPeriodicMessage      0      0      0
     SerialApp_DeviceConnect            2      0     48
       -> NLME_GetShortAddr             0      0     54
       -> AF_DataRequest                0      0     72
     SerialApp_SendSensorsData          2      0     51
       -> DHT11                         0      0     60
       -> AF_DataRequest                0      0     78
     SetLamp                            0      0      0


   Segment part sizes:

     Function/Label                        Bytes
     --------------                        -----
     _A_P0                                    1
     _A_P1                                    1
     P0SEL                                    1
     P1SEL                                    1
     P0DIR                                    1
     P1DIR                                    1
     SampleApp_ClusterList                   12
     SampleApp_SimpleDesc                    12
     SampleApp_epDesc                         6
     SampleApp_TaskID                         1
     SampleApp_NwkState                       1
     SampleApp_TransID                        1
     SampleApp_Periodic_DstAddr              12
     SampleApp_Flash_DstAddr                 12
     SampleApp_P2P_DstAddr                   12
     SampleApp_Group                         18
     SampleAppPeriodicCounter                 1
     SampleAppFlashCounter                    1
     EndDeviceID                              2
     SampleApp_Init                         211
     SampleApp_ProcessEvent                 172
     SampleApp_HandleKeys                    49
     ??Subroutine3_0                          5
     SampleApp_MessageMSGCB                  61
     SampleApp_SendPeriodicMessage            3
     SerialApp_SendSensorsData              197
     ?Subroutine0                             3
     ?Subroutine2                            12
     GetLamp                                  2
     ?Subroutine1                             6
     SetLamp                                 23
     GetGas                                   4
     GetHuman                                 4
     SerialApp_DeviceConnect                158
     ?<Initializer for EndDeviceID>           2
     ??SampleApp_Init?relay                   6
     ??SampleApp_ProcessEvent?relay           6
     ??SampleApp_HandleKeys?relay             6
     ??SampleApp_MessageMSGCB?relay           6
     ??SampleApp_SendPeriodicMessage?relay    6
     ??SerialApp_SendSensorsData?relay        6
     ??GetLamp?relay                          6
     ??SetLamp?relay                          6
     ??GetGas?relay                           6
     ??GetHuman?relay                         6
     ??SerialApp_DeviceConnect?relay          6
     ?<Constant "Group 1">                    8
     ?<Constant "SampleApp">                 10
     ?<Constant {0}>                         20
     ?<Constant {0}>_1                        5

 
 910 bytes in segment BANKED_CODE
  66 bytes in segment BANK_RELAYS
   6 bytes in segment SFR_AN
   2 bytes in segment XDATA_I
   2 bytes in segment XDATA_ID
  67 bytes in segment XDATA_ROM_C
  65 bytes in segment XDATA_Z
 
 978 bytes of CODE  memory
  67 bytes of CONST memory
   0 bytes of DATA  memory (+ 6 bytes shared)
  67 bytes of XDATA memory

Errors: none
Warnings: 2
